[
  {
    "filePath": "C:\\git\\weather\\eslint.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\html\\assets\\index-D_ryMEPs.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\public\\sw.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\analyze-bundle.cjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\ci-cd-optimizer.cjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\cloudflare-diagnostic.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\create-png-icons.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\demo-summary.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\dev-doctor.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\generate-icons.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\health-check.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\mobile-deploy.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\performance-budget.cjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\performance-monitor.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\pre-commit-hook.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\quick-setup.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\security-check.cjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\setup-custom-domains.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\simple-health.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\streamlined-test-runner.cjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\test-dash0-integration.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\validate-ios-design.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\scripts\\verify-ignore-config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\src\\App-diagnostic.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\App.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\ErrorBoundary.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\__tests__\\placeholder.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\background-protection.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\AnimatedWeatherCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\BottomSheet.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\Dash0ErrorBoundary.tsx",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 89,
        "column": 9,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [2450, 2488], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 95,
        "column": 9,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [2708, 2746], "text": " " }
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 97,
        "column": 9,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [2831, 2869], "text": " " }
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "The ref value 'mountTimeRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'mountTimeRef.current' to a variable inside the effect, and use that variable in the cleanup function.",
        "line": 258,
        "column": 53,
        "nodeType": "Identifier",
        "endLine": 258,
        "endColumn": 60
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'properties' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 282,
        "column": 22,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 282,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'startTime' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 332,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 332,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 435,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 435,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12310, 12313], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12310, 12313], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "/**\n * Enhanced Error Boundary and Performance Monitoring with Dash0\n * This provides comprehensive error tracking and performance monitoring\n */\n\nimport type { ErrorInfo, ReactNode } from 'react';\nimport { Component } from 'react';\nimport { dash0Telemetry } from '../utils/dash0Setup';\n\n// Global error tracking setup\ndeclare global {\n  interface Window {\n    dash0ErrorHandler?: (error: Error, context?: string) => void;\n  }\n}\n\n// Error boundary state interface\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: ErrorInfo;\n  errorId?: string;\n}\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\n}\n\n/**\n * Enhanced Error Boundary with Dash0 Integration\n * Catches React component errors and sends them to Dash0\n */\nexport class Dash0ErrorBoundary extends Component<\n  ErrorBoundaryProps,\n  ErrorBoundaryState\n> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n\n    // Set up global error handler\n    this.setupGlobalErrorHandling();\n  }\n\n  /**\n   * Set up global error handling for the entire app\n   */\n  private setupGlobalErrorHandling() {\n    // Handle unhandled promise rejections\n    window.addEventListener('unhandledrejection', event => {\n      const error = new Error(`Unhandled Promise Rejection: ${event.reason}`);\n      this.trackError(error, 'unhandled_promise_rejection');\n    });\n\n    // Handle global JavaScript errors\n    window.addEventListener('error', event => {\n      const error = new Error(`Global Error: ${event.message}`);\n      this.trackError(error, 'global_error');\n    });\n\n    // Set up global error handler function\n    window.dash0ErrorHandler = (error: Error, context?: string) => {\n      this.trackError(error, context || 'manual_error_report');\n    };\n  }\n\n  /**\n   * Track error with Dash0 telemetry\n   */\n  private trackError(error: Error, context: string) {\n    try {\n      // Ensure telemetry is initialized\n      if (!dash0Telemetry.isReady()) {\n        dash0Telemetry.initialize().catch(() => {\n          // Silently handle initialization errors\n        });\n      }\n\n      // Track the error\n      dash0Telemetry.trackError(error, context);\n\n      // Track error metrics\n      dash0Telemetry.trackPerformance('error_count', 1, 'count');\n\n      // Log to console in development\n      if (process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.error('Dash0 Error Tracked:', { error, context });\n      }\n    } catch (telemetryError) {\n      // Fallback: log to console if telemetry fails\n      if (process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.error('Failed to track error with Dash0:', telemetryError);\n        // eslint-disable-next-line no-console\n        console.error('Original error:', error);\n      }\n    }\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    // Generate unique error ID\n    const errorId = `err_${Date.now()}_${Math.random()\n      .toString(36)\n      .substr(2, 9)}`;\n    return {\n      hasError: true,\n      error,\n      errorId,\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // Update state with error info\n    this.setState({\n      error,\n      errorInfo,\n    });\n\n    // Track with Dash0\n    this.trackError(error, 'react_error_boundary');\n\n    // Track additional context\n    try {\n      dash0Telemetry.trackUserInteraction('error_boundary_triggered', {\n        component_stack: errorInfo.componentStack?.substring(0, 500) || '',\n        error_message: error.message,\n        error_stack: error.stack?.substring(0, 500) || '',\n      });\n    } catch (e) {\n      console.error('Failed to track error boundary context:', e);\n    }\n\n    // Call user-provided error handler\n    if (this.props.onError) {\n      this.props.onError(error, errorInfo);\n    }\n  }\n\n  private handleRetry = () => {\n    // Track retry attempt\n    try {\n      dash0Telemetry.trackUserInteraction('error_boundary_retry', {\n        error_id: this.state.errorId || '',\n      });\n    } catch (e) {\n      console.error('Failed to track retry:', e);\n    }\n\n    // Reset error state\n    this.setState({ hasError: false, error: undefined, errorInfo: undefined });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      // Custom fallback UI\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      // Default error UI\n      return (\n        <div className=\"dash0-error-boundary\">\n          <div className=\"error-container\">\n            <h2>🚨 Oops! Something went wrong</h2>\n            <p>\n              We've been notified about this error and are working to fix it.\n            </p>\n\n            <div className=\"error-actions\">\n              <button\n                onClick={this.handleRetry}\n                className=\"error-retry-button\"\n                type=\"button\"\n              >\n                🔄 Try Again\n              </button>\n\n              <button\n                onClick={() => window.location.reload()}\n                className=\"error-reload-button\"\n                type=\"button\"\n              >\n                🔁 Reload Page\n              </button>\n            </div>\n\n            {this.state.errorId && (\n              <p className=\"error-id\">\n                Error ID: <code>{this.state.errorId}</code>\n              </p>\n            )}\n\n            {process.env.NODE_ENV === 'development' && this.state.error && (\n              <details className=\"error-details\">\n                <summary>Error Details (Development Only)</summary>\n                <div className=\"error-stack\">\n                  <h4>Error Message:</h4>\n                  <pre>{this.state.error.message}</pre>\n\n                  <h4>Stack Trace:</h4>\n                  <pre>{this.state.error.stack}</pre>\n\n                  {this.state.errorInfo && (\n                    <>\n                      <h4>Component Stack:</h4>\n                      <pre>{this.state.errorInfo.componentStack}</pre>\n                    </>\n                  )}\n                </div>\n              </details>\n            )}\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n/**\n * Performance Monitor Hook\n * Use this to monitor component performance and user interactions\n */\nimport { useCallback, useEffect, useRef } from 'react';\nimport { useDash0Telemetry } from '../hooks/useDash0Telemetry';\n\ninterface PerformanceConfig {\n  componentName: string;\n  trackRender?: boolean;\n  trackMount?: boolean;\n  trackUnmount?: boolean;\n  trackInteractions?: boolean;\n}\n\nexport function usePerformanceMonitor(config: PerformanceConfig) {\n  const telemetry = useDash0Telemetry();\n  const mountTimeRef = useRef<number>(Date.now());\n  const renderCountRef = useRef<number>(0);\n\n  // Track component mount\n  useEffect(() => {\n    if (config.trackMount) {\n      const mountTime = Date.now() - mountTimeRef.current;\n      telemetry.trackPerformance({\n        name: 'component_mount_time',\n        value: mountTime,\n        unit: 'milliseconds',\n      });\n    }\n\n    // Track component unmount\n    return () => {\n      if (config.trackUnmount) {\n        const totalTime = Date.now() - mountTimeRef.current;\n        telemetry.trackPerformance({\n          name: 'component_total_time',\n          value: totalTime,\n          unit: 'milliseconds',\n        });\n      }\n    };\n  }, [config.trackMount, config.trackUnmount, telemetry]);\n\n  // Track render performance\n  useEffect(() => {\n    if (config.trackRender) {\n      renderCountRef.current += 1;\n      telemetry.trackPerformance({\n        name: 'component_render_count',\n        value: renderCountRef.current,\n        unit: 'count',\n      });\n    }\n  });\n\n  // Track user interactions\n  const trackInteraction = useCallback(\n    (action: string, properties?: Record<string, unknown>) => {\n      if (config.trackInteractions) {\n        telemetry.trackUserInteraction({\n          action: `${config.componentName}_${action}`,\n          component: config.componentName,\n        });\n\n        // Track interaction timing\n        const interactionTime = Date.now() - mountTimeRef.current;\n        telemetry.trackPerformance({\n          name: 'interaction_timing',\n          value: interactionTime,\n          unit: 'milliseconds',\n        });\n      }\n    },\n    [config.componentName, config.trackInteractions, telemetry],\n  );\n\n  return {\n    trackInteraction,\n    renderCount: renderCountRef.current,\n    mountTime: mountTimeRef.current,\n  };\n}\n\n/**\n * Weather API Performance Wrapper\n * Wraps weather API calls with performance monitoring\n */\nexport class WeatherApiPerformanceMonitor {\n  private static instance: WeatherApiPerformanceMonitor;\n  private performanceEntries: Map<string, PerformanceEntry> = new Map();\n\n  static getInstance(): WeatherApiPerformanceMonitor {\n    if (!WeatherApiPerformanceMonitor.instance) {\n      WeatherApiPerformanceMonitor.instance =\n        new WeatherApiPerformanceMonitor();\n    }\n    return WeatherApiPerformanceMonitor.instance;\n  }\n\n  /**\n   * Monitor API call performance\n   */\n  async monitorApiCall<T>(\n    apiName: string,\n    apiCall: () => Promise<T>,\n    city?: string,\n  ): Promise<T> {\n    const startTime = performance.now();\n    const markStart = `${apiName}_start_${Date.now()}`;\n    const markEnd = `${apiName}_end_${Date.now()}`;\n\n    // Mark start\n    performance.mark(markStart);\n\n    try {\n      // Execute API call\n      const result = await apiCall();\n\n      // Mark end and measure\n      performance.mark(markEnd);\n      const measureName = `${apiName}_duration`;\n      performance.measure(measureName, markStart, markEnd);\n\n      // Get measurement\n      const entries = performance.getEntriesByName(measureName);\n      const duration =\n        entries.length > 0 ? entries[entries.length - 1].duration : 0;\n\n      // Track with Dash0\n      try {\n        if (!dash0Telemetry.isReady()) {\n          await dash0Telemetry.initialize();\n        }\n\n        dash0Telemetry.trackPerformance(\n          `api_${apiName}_duration`,\n          duration,\n          'milliseconds',\n        );\n        dash0Telemetry.trackUserInteraction(`api_${apiName}_success`, {\n          city: city || 'unknown',\n          duration: duration.toFixed(2),\n        });\n      } catch (telemetryError) {\n        console.error('Failed to track API performance:', telemetryError);\n      }\n\n      // Clean up performance entries\n      performance.clearMarks(markStart);\n      performance.clearMarks(markEnd);\n      performance.clearMeasures(measureName);\n\n      return result;\n    } catch (error) {\n      // Mark end even on error\n      performance.mark(markEnd);\n\n      // Track error with Dash0\n      try {\n        if (!dash0Telemetry.isReady()) {\n          await dash0Telemetry.initialize();\n        }\n\n        dash0Telemetry.trackError(error as Error, `api_${apiName}_error`);\n        dash0Telemetry.trackUserInteraction(`api_${apiName}_error`, {\n          city: city || 'unknown',\n          error_message: (error as Error).message.substring(0, 100),\n        });\n      } catch (telemetryError) {\n        console.error('Failed to track API error:', telemetryError);\n      }\n\n      // Clean up performance entries\n      performance.clearMarks(markStart);\n      performance.clearMarks(markEnd);\n\n      throw error;\n    }\n  }\n\n  /**\n   * Get performance summary\n   */\n  getPerformanceSummary(): Record<string, unknown> {\n    const navigation = performance.getEntriesByType(\n      'navigation',\n    )[0] as PerformanceNavigationTiming;\n\n    return {\n      pageLoadTime: navigation\n        ? navigation.loadEventEnd - navigation.fetchStart\n        : 0,\n      domContentLoaded: navigation\n        ? navigation.domContentLoadedEventEnd - navigation.fetchStart\n        : 0,\n      firstContentfulPaint: this.getFirstContentfulPaint(),\n      memoryUsage: this.getMemoryUsage(),\n    };\n  }\n\n  private getFirstContentfulPaint(): number {\n    const paintEntries = performance.getEntriesByType('paint');\n    const fcp = paintEntries.find(\n      entry => entry.name === 'first-contentful-paint',\n    );\n    return fcp ? fcp.startTime : 0;\n  }\n\n  private getMemoryUsage(): Record<string, number> {\n    if ('memory' in performance) {\n      const memory = (performance as any).memory;\n      return {\n        usedJSHeapSize: memory.usedJSHeapSize,\n        totalJSHeapSize: memory.totalJSHeapSize,\n        jsHeapSizeLimit: memory.jsHeapSizeLimit,\n      };\n    }\n    return {};\n  }\n}\n\n/**\n * CSS for Error Boundary\n * Add this to your CSS file or use CSS-in-JS\n */\nexport const errorBoundaryStyles = `\n  .dash0-error-boundary {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 400px;\n    padding: 2rem;\n    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n  }\n\n  .error-container {\n    max-width: 500px;\n    background: white;\n    border-radius: 12px;\n    padding: 2rem;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n    text-align: center;\n  }\n\n  .error-actions {\n    display: flex;\n    gap: 1rem;\n    justify-content: center;\n    margin: 1.5rem 0;\n  }\n\n  .error-retry-button,\n  .error-reload-button {\n    padding: 0.75rem 1.5rem;\n    border: none;\n    border-radius: 8px;\n    font-size: 1rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.2s ease;\n  }\n\n  .error-retry-button {\n    background: #667eea;\n    color: white;\n  }\n\n  .error-retry-button:hover {\n    background: #5a6fd8;\n    transform: translateY(-1px);\n  }\n\n  .error-reload-button {\n    background: #f1f3f4;\n    color: #333;\n  }\n\n  .error-reload-button:hover {\n    background: #e8eaed;\n    transform: translateY(-1px);\n  }\n\n  .error-id {\n    font-size: 0.875rem;\n    color: #666;\n    margin-top: 1rem;\n  }\n\n  .error-details {\n    margin-top: 1.5rem;\n    text-align: left;\n  }\n\n  .error-stack pre {\n    background: #f8f9fa;\n    padding: 1rem;\n    border-radius: 4px;\n    overflow-x: auto;\n    font-size: 0.875rem;\n    max-height: 200px;\n    overflow-y: auto;\n  }\n`;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\EnhancedLoadingStates.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\EnhancedMobileButton.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\EnhancedMobileContainer.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'telemetry'. Either include it or remove the dependency array.",
        "line": 171,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 171,
        "endColumn": 66,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [enablePullToRefresh, onRefresh, pullProgress, isRefreshing, telemetry]",
            "fix": {
              "range": [4857, 4917],
              "text": "[enablePullToRefresh, onRefresh, pullProgress, isRefreshing, telemetry]"
            }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'telemetry'. Either include it or remove the dependency array.",
        "line": 297,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 297,
        "endColumn": 54,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [enableSwipeGestures, onSwipeLeft, onSwipeRight, telemetry]",
            "fix": { "range": [8862, 8910], "text": "[enableSwipeGestures, onSwipeLeft, onSwipeRight, telemetry]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Enhanced Mobile Container Component\n *\n * Provides better mobile UX patterns including:\n * - Improved touch targets\n * - Better responsive layout\n * - Enhanced animations\n * - Gesture support\n * - Safe area handling\n */\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDash0Telemetry } from '../dash0/hooks/useDash0Telemetry';\nimport '../styles/mobileEnhancements.css';\nimport { useTheme } from '../utils/useTheme';\n\ninterface EnhancedMobileContainerProps {\n  children: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n  enablePullToRefresh?: boolean;\n  onRefresh?: () => Promise<void>;\n  enableSwipeGestures?: boolean;\n  onSwipeLeft?: () => void;\n  onSwipeRight?: () => void;\n}\n\nconst EnhancedMobileContainer: React.FC<EnhancedMobileContainerProps> = ({\n  children,\n  className = '',\n  style = {},\n  enablePullToRefresh = false,\n  onRefresh,\n  enableSwipeGestures = false,\n  onSwipeLeft,\n  onSwipeRight,\n}) => {\n  const { theme } = useTheme();\n  const telemetry = useDash0Telemetry();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [pullProgress, setPullProgress] = useState(0);\n\n  // Touch state for gestures\n  const touchStartRef = useRef<{ x: number; y: number; time: number } | null>(\n    null,\n  );\n  const lastTouchRef = useRef<{ x: number; y: number } | null>(null);\n\n  // Pull to refresh logic\n  useEffect(() => {\n    if (!enablePullToRefresh || !containerRef.current) return;\n\n    const container = containerRef.current;\n    let startY = 0;\n    let currentY = 0;\n    let isPulling = false;\n\n    const handleTouchStart = (e: TouchEvent) => {\n      if (container.scrollTop === 0) {\n        startY = e.touches[0].clientY;\n        isPulling = true;\n\n        // Track pull-to-refresh initiation\n        telemetry.trackUserInteraction({\n          action: 'pull_to_refresh_started',\n          component: 'EnhancedMobileContainer',\n          metadata: {\n            scrollPosition: container.scrollTop,\n            startY: Math.round(startY),\n            hasRefreshHandler: !!onRefresh,\n          },\n        });\n      }\n    };\n\n    const handleTouchMove = (e: TouchEvent) => {\n      if (!isPulling) return;\n\n      currentY = e.touches[0].clientY;\n      const pullDistance = Math.max(0, currentY - startY);\n      const maxPull = 120;\n      const progress = Math.min(pullDistance / maxPull, 1);\n\n      setPullProgress(progress);\n\n      if (pullDistance > 0) {\n        e.preventDefault();\n        container.style.transform = `translateY(${Math.min(\n          pullDistance * 0.5,\n          60,\n        )}px)`;\n      }\n    };\n\n    const handleTouchEnd = async () => {\n      if (!isPulling) return;\n\n      const pullTriggered = pullProgress >= 0.6;\n\n      // Track pull-to-refresh completion\n      telemetry.trackUserInteraction({\n        action: 'pull_to_refresh_completed',\n        component: 'EnhancedMobileContainer',\n        metadata: {\n          pullProgress: Math.round(pullProgress * 100),\n          triggered: pullTriggered,\n          hasRefreshHandler: !!onRefresh,\n          wasRefreshing: isRefreshing,\n        },\n      });\n\n      if (pullTriggered) {\n        telemetry.trackMetric({\n          name: 'pull_to_refresh_trigger',\n          value: 1,\n          tags: {\n            progress: String(Math.round(pullProgress * 100)),\n            has_handler: String(!!onRefresh),\n          },\n        });\n      }\n\n      isPulling = false;\n      container.style.transform = '';\n\n      if (pullTriggered && onRefresh && !isRefreshing) {\n        setIsRefreshing(true);\n        const refreshStartTime = performance.now();\n\n        try {\n          await onRefresh();\n\n          // Track successful refresh\n          const refreshDuration = performance.now() - refreshStartTime;\n          telemetry.trackMetric({\n            name: 'pull_to_refresh_success',\n            value: 1,\n            tags: {\n              duration_ms: String(Math.round(refreshDuration)),\n              method: 'pull_gesture',\n            },\n          });\n        } catch (error) {\n          // Track refresh error\n          telemetry.trackError(error as Error, {\n            context: 'pull_to_refresh_error',\n            metadata: { method: 'pull_gesture' },\n          });\n        } finally {\n          setIsRefreshing(false);\n        }\n      }\n\n      setPullProgress(0);\n    };\n\n    container.addEventListener('touchstart', handleTouchStart, {\n      passive: false,\n    });\n    container.addEventListener('touchmove', handleTouchMove, {\n      passive: false,\n    });\n    container.addEventListener('touchend', handleTouchEnd);\n\n    return () => {\n      container.removeEventListener('touchstart', handleTouchStart);\n      container.removeEventListener('touchmove', handleTouchMove);\n      container.removeEventListener('touchend', handleTouchEnd);\n    };\n  }, [enablePullToRefresh, onRefresh, pullProgress, isRefreshing]);\n\n  // Swipe gesture logic\n  useEffect(() => {\n    if (!enableSwipeGestures || !containerRef.current) return;\n\n    const container = containerRef.current;\n\n    const handleTouchStart = (e: TouchEvent) => {\n      const touch = e.touches[0];\n      touchStartRef.current = {\n        x: touch.clientX,\n        y: touch.clientY,\n        time: Date.now(),\n      };\n    };\n\n    const handleTouchMove = (e: TouchEvent) => {\n      if (!touchStartRef.current) return;\n\n      const touch = e.touches[0];\n      lastTouchRef.current = {\n        x: touch.clientX,\n        y: touch.clientY,\n      };\n    };\n\n    const handleTouchEnd = () => {\n      if (!touchStartRef.current || !lastTouchRef.current) return;\n\n      const deltaX = lastTouchRef.current.x - touchStartRef.current.x;\n      const deltaY = Math.abs(lastTouchRef.current.y - touchStartRef.current.y);\n      const deltaTime = Date.now() - touchStartRef.current.time;\n\n      // Swipe detection thresholds\n      const minSwipeDistance = 50;\n      const maxSwipeTime = 300;\n      const maxVerticalMovement = 100;\n\n      const isValidSwipe =\n        Math.abs(deltaX) > minSwipeDistance &&\n        deltaY < maxVerticalMovement &&\n        deltaTime < maxSwipeTime;\n\n      // Track swipe attempt\n      telemetry.trackUserInteraction({\n        action: 'swipe_gesture_attempt',\n        component: 'EnhancedMobileContainer',\n        metadata: {\n          deltaX: Math.round(deltaX),\n          deltaY: Math.round(deltaY),\n          deltaTime,\n          isValidSwipe,\n          direction: deltaX > 0 ? 'right' : 'left',\n          hasHandlers: { left: !!onSwipeLeft, right: !!onSwipeRight },\n        },\n      });\n\n      if (isValidSwipe) {\n        const direction = deltaX > 0 ? 'right' : 'left';\n        const hasHandler =\n          direction === 'right' ? !!onSwipeRight : !!onSwipeLeft;\n\n        // Track successful swipe\n        telemetry.trackUserInteraction({\n          action: 'swipe_gesture_success',\n          component: 'EnhancedMobileContainer',\n          metadata: {\n            direction,\n            distance: Math.round(Math.abs(deltaX)),\n            speed: Math.round((Math.abs(deltaX) / deltaTime) * 1000), // pixels per second\n            hasHandler,\n          },\n        });\n\n        telemetry.trackMetric({\n          name: 'swipe_gesture',\n          value: 1,\n          tags: {\n            direction,\n            distance_bucket: Math.abs(deltaX) > 100 ? 'long' : 'short',\n            speed_bucket:\n              (Math.abs(deltaX) / deltaTime) * 1000 > 500 ? 'fast' : 'slow',\n          },\n        });\n\n        if (deltaX > 0 && onSwipeRight) {\n          onSwipeRight();\n        } else if (deltaX < 0 && onSwipeLeft) {\n          onSwipeLeft();\n        }\n      } else {\n        // Track failed swipe attempt\n        let failureReason = 'unknown';\n        if (Math.abs(deltaX) <= minSwipeDistance)\n          failureReason = 'insufficient_distance';\n        else if (deltaY >= maxVerticalMovement) failureReason = 'too_vertical';\n        else if (deltaTime >= maxSwipeTime) failureReason = 'too_slow';\n\n        telemetry.trackUserInteraction({\n          action: 'swipe_gesture_failed',\n          component: 'EnhancedMobileContainer',\n          metadata: {\n            reason: failureReason,\n            deltaX: Math.round(deltaX),\n            deltaY: Math.round(deltaY),\n            deltaTime,\n          },\n        });\n      }\n\n      touchStartRef.current = null;\n      lastTouchRef.current = null;\n    };\n\n    container.addEventListener('touchstart', handleTouchStart, {\n      passive: true,\n    });\n    container.addEventListener('touchmove', handleTouchMove, { passive: true });\n    container.addEventListener('touchend', handleTouchEnd, { passive: true });\n\n    return () => {\n      container.removeEventListener('touchstart', handleTouchStart);\n      container.removeEventListener('touchmove', handleTouchMove);\n      container.removeEventListener('touchend', handleTouchEnd);\n    };\n  }, [enableSwipeGestures, onSwipeLeft, onSwipeRight]);\n\n  const containerStyle: React.CSSProperties = {\n    background: theme.appBackground,\n    color: theme.primaryText,\n    transition: 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n    position: 'relative',\n    ...style,\n  };\n\n  return (\n    <div\n      ref={containerRef}\n      className={`mobile-app-container ${className}`}\n      style={containerStyle}\n    >\n      {/* Pull to refresh indicator */}\n      {enablePullToRefresh && pullProgress > 0 && (\n        <div\n          style={{\n            position: 'absolute',\n            top: '16px',\n            left: '50%',\n            transform: 'translateX(-50%)',\n            zIndex: 1000,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            opacity: pullProgress,\n            transition: 'opacity 0.1s ease',\n          }}\n        >\n          <div\n            style={{\n              width: '24px',\n              height: '24px',\n              borderRadius: '50%',\n              border: `2px solid ${theme.secondaryText}`,\n              borderTop: `2px solid ${theme.primaryText}`,\n              animation: isRefreshing ? 'spin 1s linear infinite' : 'none',\n              transform: `rotate(${pullProgress * 360}deg)`,\n              marginBottom: '8px',\n            }}\n          />\n          <span\n            style={{\n              fontSize: '12px',\n              color: theme.secondaryText,\n              fontWeight: '500',\n            }}\n          >\n            {(() => {\n              if (isRefreshing) return 'Refreshing...';\n              if (pullProgress >= 0.6) return 'Release to refresh';\n              return 'Pull to refresh';\n            })()}\n          </span>\n        </div>\n      )}\n\n      <div className=\"mobile-content-area\">{children}</div>\n    </div>\n  );\n};\n\nexport default EnhancedMobileContainer;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\EnhancedSearchBar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\EnhancedSearchScreen.tsx",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 117,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 117,
        "endColumn": 21,
        "suggestions": [
          {
            "fix": { "range": [3365, 3426], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 292,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 292,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8963, 8966], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8963, 8966], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 462,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 462,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13865, 13868], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13865, 13868], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 477,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 477,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [14357, 14409], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useCallback, useEffect, useRef, useState } from 'react';\nimport { useHaptic } from '../utils/hapticHooks';\nimport '../utils/locationDiagnostic'; // Load diagnostic tools in development\nimport { locationService } from '../utils/locationService';\nimport { logError } from '../utils/logger';\nimport { offlineStorage } from '../utils/offlineWeatherStorage';\nimport { searchPerformanceMonitor } from '../utils/searchPerformanceMonitor';\nimport type { ThemeColors } from '../utils/themeConfig';\nimport './EnhancedSearchScreen.css';\n\ninterface SearchScreenProps {\n  theme: ThemeColors;\n  onBack: () => void;\n  onLocationSelect: (\n    cityName: string,\n    latitude: number,\n    longitude: number\n  ) => void;\n}\n\ninterface SearchResult {\n  name: string;\n  display_name: string;\n  lat: string;\n  lon: string;\n  country: string;\n  state?: string;\n}\n\ninterface NominatimResult {\n  display_name: string;\n  lat: string;\n  lon: string;\n  place_id: number;\n  type: string;\n  class: string;\n  name?: string;\n  importance?: number;\n  address?: {\n    city?: string;\n    town?: string;\n    village?: string;\n    municipality?: string;\n    state?: string;\n    country?: string;\n  };\n  relevanceScore?: number;\n  cleanDisplayName?: string;\n}\n\n/**\n * Create a clean, readable display name from Nominatim result\n */\nconst createCleanDisplayName = (item: NominatimResult): string => {\n  if (item.name) {\n    // Use the name if available, with country\n    const country = item.address?.country || '';\n    const state = item.address?.state || '';\n\n    if (state && country) {\n      return `${item.name}, ${state}, ${country}`;\n    } else if (country) {\n      return `${item.name}, ${country}`;\n    }\n    return item.name;\n  }\n\n  // Fallback to parsing display_name\n  const parts = item.display_name.split(',').map(part => part.trim());\n  if (parts.length >= 2) {\n    // Return first part (city) + last part (country)\n    return `${parts[0]}, ${parts[parts.length - 1]}`;\n  }\n\n  return item.display_name;\n};\n\n/**\n * Enhanced SearchScreen with improved error handling and fallback mechanisms\n */\nfunction EnhancedSearchScreen({\n  theme,\n  onBack,\n  onLocationSelect,\n}: Readonly<SearchScreenProps>) {\n  const haptic = useHaptic();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState<NominatimResult[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [recentSearches, setRecentSearches] = useState<SearchResult[]>([]);\n  const [locationPermission, setLocationPermission] = useState<\n    PermissionState | 'not-supported' | 'unknown'\n  >('unknown');\n  const [isGettingLocation, setIsGettingLocation] = useState(false);\n  const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Load recent searches\n  useEffect(() => {\n    try {\n      const saved = localStorage.getItem('weather-recent-searches');\n      if (saved) {\n        setRecentSearches(JSON.parse(saved).slice(0, 5));\n      }\n    } catch (error) {\n      logError('Error loading recent searches:', error);\n    }\n  }, []);\n\n  // Check location permissions on mount\n  useEffect(() => {\n    const checkPermissions = async () => {\n      try {\n        const permission = await locationService.checkPermissions();\n        setLocationPermission(permission);\n      } catch (error) {\n        console.warn('Failed to check location permissions:', error);\n        setLocationPermission('unknown');\n      }\n    };\n\n    checkPermissions();\n  }, []);\n\n  // Enhanced search function with better error handling\n  const performSearch = useCallback(async (query: string) => {\n    if (!query.trim() || query.length < 2) {\n      setSearchResults([]);\n      setError(null);\n      return;\n    }\n\n    // Start performance tracking\n    const trackingId = searchPerformanceMonitor.startSearch('nominatim');\n\n    setIsSearching(true);\n    setError(null);\n\n    // NEW: Check offline storage first\n    if (!navigator.onLine) {\n      try {\n        const recentCities = offlineStorage.getRecentCities();\n        const queryLower = query.toLowerCase();\n\n        const offlineMatches = recentCities\n          .filter(city => city.name.toLowerCase().includes(queryLower))\n          .map(\n            (city, index) =>\n              ({\n                display_name: city.name,\n                lat: city.lat.toString(),\n                lon: city.lon.toString(),\n                place_id: index + 1000000, // Use unique IDs for offline results\n                type: 'city',\n                class: 'place',\n                name: city.name,\n                address: { city: city.name },\n              } as NominatimResult),\n          );\n\n        setSearchResults(offlineMatches);\n\n        if (offlineMatches.length === 0) {\n          setError(\n            'No cached cities match your search. Connect to internet for full search.',\n          );\n        } else {\n          setError(null);\n        }\n\n        // End performance tracking - offline\n        searchPerformanceMonitor.endSearch(\n          trackingId,\n          'offline',\n          offlineMatches.length,\n        );\n        setIsSearching(false);\n        return;\n      } catch (error) {\n        logError('Offline search error:', error);\n      }\n    }\n\n    try {\n      // Primary API: OpenStreetMap Nominatim\n      const nominatimUrl = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(\n        query,\n      )}&format=json&limit=25&addressdetails=1&extratags=1`;\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 8000); // 8 second timeout\n\n      const response = await fetch(nominatimUrl, {\n        headers: {\n          'User-Agent': 'PremiumWeatherApp/1.0 (weather.andernet.dev)',\n          Accept: 'application/json',\n        },\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new Error(\n          `Search API returned ${response.status}: ${response.statusText}`,\n        );\n      }\n\n      const data: NominatimResult[] = await response.json();\n\n      // Filter and prioritize results with improved logic\n      const filteredResults = data\n        .filter((item: NominatimResult) => {\n          // Include a broader range of location types\n          const isValidLocationType =\n            item.type === 'city' ||\n            item.type === 'town' ||\n            item.type === 'village' ||\n            item.type === 'municipality' ||\n            item.type === 'administrative' ||\n            item.type === 'suburb' ||\n            item.type === 'neighbourhood' ||\n            item.class === 'place' ||\n            item.class === 'boundary' ||\n            (item.class === 'amenity' && item.type === 'university') ||\n            (item.address &&\n              (item.address.city || item.address.town || item.address.village));\n\n          // Exclude very specific locations like individual buildings\n          const isNotTooSpecific =\n            item.type !== 'house' &&\n            item.type !== 'building' &&\n            item.type !== 'shop' &&\n            item.type !== 'restaurant';\n\n          return isValidLocationType && isNotTooSpecific;\n        })\n        .map(item => {\n          // Calculate relevance score for better sorting\n          const queryLower = query.toLowerCase();\n          const displayName = item.display_name.toLowerCase();\n          const name = (item.name || '').toLowerCase();\n\n          let relevanceScore = 0;\n\n          // Exact name match gets highest score\n          if (name === queryLower) {\n            relevanceScore += 1000;\n          } else if (name.startsWith(queryLower)) {\n            relevanceScore += 500;\n          } else if (name.includes(queryLower)) {\n            relevanceScore += 100;\n          }\n\n          // Display name partial matches\n          if (displayName.includes(queryLower)) {\n            relevanceScore += 50;\n          }\n\n          // Boost major cities and administrative areas\n          if (item.type === 'city' || item.type === 'administrative') {\n            relevanceScore += 200;\n          }\n\n          // Boost based on importance (if available)\n          if (item.importance) {\n            relevanceScore += Math.round(item.importance * 100);\n          }\n\n          return {\n            ...item,\n            relevanceScore,\n            // Create clean, readable display name\n            cleanDisplayName: createCleanDisplayName(item),\n          };\n        })\n        .sort((a, b) => b.relevanceScore - a.relevanceScore) // Sort by relevance\n        .slice(0, 10); // Limit to top 10 results\n\n      setSearchResults(filteredResults);\n\n      if (filteredResults.length === 0) {\n        setError('No cities found. Try a different search term.');\n      }\n\n      // End performance tracking - success\n      searchPerformanceMonitor.endSearch(\n        trackingId,\n        'nominatim',\n        filteredResults.length,\n      );\n    } catch (error: any) {\n      logError('Search error:', error);\n\n      if (error.name === 'AbortError') {\n        setError(\n          'Search timed out. Please check your internet connection and try again.',\n        );\n      } else if (\n        error.message?.includes('Failed to fetch') ||\n        error.message?.includes('NetworkError')\n      ) {\n        setError(\n          'Network error. Please check your internet connection and try again.',\n        );\n      } else {\n        setError('Search failed. Please try again in a moment.');\n      }\n\n      setSearchResults([]);\n      // End performance tracking - error\n      searchPerformanceMonitor.endSearch(trackingId, 'nominatim', 0);\n    } finally {\n      setIsSearching(false);\n    }\n  }, []);\n\n  // Debounced search\n  useEffect(() => {\n    if (searchTimeoutRef.current) {\n      clearTimeout(searchTimeoutRef.current);\n    }\n\n    searchTimeoutRef.current = setTimeout(() => {\n      performSearch(searchQuery);\n    }, 300);\n\n    return () => {\n      if (searchTimeoutRef.current) {\n        clearTimeout(searchTimeoutRef.current);\n      }\n    };\n  }, [searchQuery, performSearch]);\n\n  // Handle city selection\n  const handleCitySelection = useCallback(\n    async (city: NominatimResult) => {\n      haptic.dataLoad();\n\n      const cityName = city.display_name.split(',')[0].trim();\n      const latitude = parseFloat(city.lat);\n      const longitude = parseFloat(city.lon);\n\n      if (isNaN(latitude) || isNaN(longitude)) {\n        haptic.error();\n        setError('Invalid location coordinates. Please try another city.');\n        return;\n      }\n\n      // Add to recent searches\n      const searchResult: SearchResult = {\n        name: cityName,\n        display_name: city.display_name,\n        lat: city.lat,\n        lon: city.lon,\n        country:\n          city.address?.country ||\n          city.display_name.split(',').pop()?.trim() ||\n          'Unknown',\n        state: city.address?.state || city.display_name.split(',')[1]?.trim(),\n      };\n\n      const newRecent = [\n        searchResult,\n        ...recentSearches.filter(\n          r => r.lat !== searchResult.lat || r.lon !== searchResult.lon,\n        ),\n      ].slice(0, 5);\n\n      setRecentSearches(newRecent);\n\n      try {\n        localStorage.setItem(\n          'weather-recent-searches',\n          JSON.stringify(newRecent),\n        );\n      } catch (error) {\n        logError('Error saving recent searches:', error);\n      }\n\n      // NEW: Cache location for offline access\n      try {\n        await offlineStorage.cacheRecentCity(cityName, latitude, longitude);\n      } catch (error) {\n        logError('Error caching recent city:', error);\n      }\n\n      onLocationSelect(cityName, latitude, longitude);\n    },\n    [haptic, onLocationSelect, recentSearches],\n  );\n\n  // Handle recent search selection\n  const handleRecentSelect = useCallback(\n    async (result: SearchResult) => {\n      haptic.selection();\n      const latitude = parseFloat(result.lat);\n      const longitude = parseFloat(result.lon);\n\n      // Cache location for offline access\n      try {\n        await offlineStorage.cacheRecentCity(result.name, latitude, longitude);\n      } catch (error) {\n        logError('Error caching recent city from selection:', error);\n      }\n\n      onLocationSelect(result.name, latitude, longitude);\n    },\n    [haptic, onLocationSelect],\n  );\n\n  // Get current location with enhanced error handling\n  const getCurrentLocation = useCallback(async () => {\n    haptic.dataLoad();\n    setError(null);\n    setIsGettingLocation(true);\n\n    try {\n      // Check if we're in a secure context\n      if (!locationService.isSecureContext()) {\n        haptic.error();\n        setError(\n          'Location services require a secure connection (HTTPS). This feature may not work on non-secure websites.',\n        );\n        return;\n      }\n\n      // Check if location is supported\n      if (!locationService.isSupported()) {\n        haptic.error();\n        setError(\n          'Geolocation is not supported by this browser. Please search for your city manually.',\n        );\n        return;\n      }\n\n      // Check permissions first\n      const permissionState = await locationService.checkPermissions();\n      setLocationPermission(permissionState);\n\n      if (permissionState === 'denied') {\n        haptic.error();\n        setError(\n          'Location access is blocked. Please enable location permissions in your browser settings and refresh the page.',\n        );\n        return;\n      }\n\n      // Get location\n      const locationResult = await locationService.getCurrentLocation();\n\n      haptic.dataLoad();\n\n      // Use the city name if available, otherwise use \"Current Location\"\n      const cityName = locationResult.cityName || 'Current Location';\n\n      onLocationSelect(\n        cityName,\n        locationResult.latitude,\n        locationResult.longitude,\n      );\n    } catch (locationError: any) {\n      haptic.error();\n      logError('Enhanced geolocation error:', locationError);\n\n      // Use the user-friendly message from the location service\n      if (locationError.userMessage) {\n        setError(locationError.userMessage);\n      } else {\n        setError(\n          'Failed to get your location. Please try again or search for your city manually.',\n        );\n      }\n\n      // Log additional troubleshooting tips\n      const tips = locationService.getLocationTips();\n      console.log('Location troubleshooting tips:', tips);\n    } finally {\n      setIsGettingLocation(false);\n    }\n  }, [haptic, onLocationSelect]);\n\n  return (\n    <div className=\"enhanced-search-screen\">\n      {/* Dynamic theme styles */}\n      <style\n        dangerouslySetInnerHTML={{\n          __html: `\n          .enhanced-search-screen {\n            background: ${theme.appBackground};\n            color: ${theme.primaryText};\n          }\n          .enhanced-search-header {\n            border-bottom-color: ${theme.primaryGradient}20;\n          }\n          .enhanced-search-back-button,\n          .enhanced-search-title,\n          .enhanced-search-input {\n            color: ${theme.primaryText};\n          }\n          .enhanced-search-input-wrapper {\n            background: ${theme.primaryGradient}10;\n            border-color: ${theme.primaryGradient}30;\n          }\n          .enhanced-current-location-button {\n            background: ${theme.primaryGradient}10;\n            border-color: ${theme.primaryGradient}20;\n            color: ${theme.primaryText};\n          }\n          .enhanced-search-result-item,\n          .enhanced-recent-search-item {\n            border-color: ${theme.primaryGradient}20;\n            color: ${theme.primaryText};\n          }\n          .enhanced-search-spinner {\n            border: 2px solid ${theme.primaryGradient}30;\n            border-top: 2px solid ${theme.primaryGradient};\n          }\n        `,\n        }}\n      />\n\n      {/* Header */}\n      <header className=\"enhanced-search-header\">\n        <button\n          className=\"enhanced-search-back-button\"\n          onClick={onBack}\n          aria-label=\"Go back\"\n        >\n          ←\n        </button>\n\n        <h1 className=\"enhanced-search-title\">Search Location</h1>\n      </header>\n\n      {/* Search Input */}\n      <div className=\"enhanced-search-input-container\">\n        <div className=\"enhanced-search-input-wrapper\">\n          <span className=\"enhanced-search-icon\">🔍</span>\n          <input\n            type=\"text\"\n            className=\"enhanced-search-input\"\n            value={searchQuery}\n            onChange={e => setSearchQuery(e.target.value)}\n            placeholder=\"Search for a city...\"\n            autoFocus\n          />\n          {isSearching && <div className=\"enhanced-search-spinner\" />}\n        </div>\n      </div>\n\n      {/* Error Display */}\n      {error && <div className=\"enhanced-search-error\">⚠️ {error}</div>}\n\n      {/* Content */}\n      <div className=\"enhanced-search-content\">\n        {/* Current Location Button */}\n        <button\n          className=\"enhanced-current-location-button\"\n          onClick={getCurrentLocation}\n          disabled={isGettingLocation || locationPermission === 'denied'}\n        >\n          <span className=\"enhanced-current-location-icon\">\n            {(() => {\n              if (isGettingLocation) return '⏳';\n              if (locationPermission === 'denied') return '🚫';\n              return '�';\n            })()}\n          </span>\n          <div className=\"enhanced-current-location-text\">\n            <div className=\"enhanced-current-location-title\">\n              {(() => {\n                if (isGettingLocation) return 'Getting Location...';\n                if (locationPermission === 'denied') return 'Location Blocked';\n                return 'Use Current Location';\n              })()}\n            </div>\n            <div className=\"enhanced-current-location-subtitle\">\n              {(() => {\n                if (isGettingLocation)\n                  return 'Please wait while we get your location';\n                if (locationPermission === 'denied')\n                  return 'Enable location permissions to use this feature';\n                if (locationPermission === 'granted')\n                  return 'Location access granted - tap to get weather';\n                return 'Get weather for your current location';\n              })()}\n            </div>\n          </div>\n        </button>\n\n        {/* Location Troubleshooting Tips */}\n        {(locationPermission === 'denied' ||\n          error?.includes('Location') ||\n          error?.includes('permission')) && (\n          <div className=\"enhanced-location-tips\">\n            <h4 className=\"enhanced-location-tips-title\">\n              📍 Location Troubleshooting\n            </h4>\n            <div className=\"enhanced-location-tips-content\">\n              {!locationService.isSecureContext() && (\n                <div className=\"enhanced-tip\">\n                  🔒 Location requires a secure connection (HTTPS)\n                </div>\n              )}\n              <div className=\"enhanced-tip\">\n                🌐 Make sure location services are enabled in your browser\n              </div>\n              <div className=\"enhanced-tip\">\n                📱 Check that your device has location services turned on\n              </div>\n              <div className=\"enhanced-tip\">\n                🔄 Try refreshing the page and allowing location access\n              </div>\n              <div className=\"enhanced-tip\">\n                🔍 You can also search for your city manually above\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Search Results */}\n        {searchResults.length > 0 && (\n          <div className=\"enhanced-search-section\">\n            <h3 className=\"enhanced-search-section-title\">Search Results</h3>\n            {searchResults.map((result, index) => (\n              <button\n                key={`${result.place_id}-${index}`}\n                className=\"enhanced-search-result-item\"\n                onClick={() => handleCitySelection(result)}\n              >\n                <span className=\"enhanced-search-result-icon\">🏙️</span>\n                <div className=\"enhanced-search-result-text\">\n                  <div className=\"enhanced-search-result-name\">\n                    {result.display_name.split(',')[0]}\n                  </div>\n                  <div className=\"enhanced-search-result-location\">\n                    {result.display_name}\n                  </div>\n                </div>\n              </button>\n            ))}\n          </div>\n        )}\n\n        {/* Recent Searches */}\n        {recentSearches.length > 0 && (\n          <div className=\"enhanced-search-section\">\n            <h3 className=\"enhanced-search-section-title\">Recent Searches</h3>\n            {recentSearches.map((result, index) => (\n              <button\n                key={`recent-${result.lat}-${result.lon}-${index}`}\n                className=\"enhanced-recent-search-item\"\n                onClick={() => handleRecentSelect(result)}\n              >\n                <span className=\"enhanced-recent-search-icon\">🕒</span>\n                <div className=\"enhanced-recent-search-text\">\n                  <div className=\"enhanced-recent-search-name\">\n                    {result.name}\n                  </div>\n                  <div className=\"enhanced-recent-search-location\">\n                    {result.state ? `${result.state}, ` : ''}\n                    {result.country}\n                  </div>\n                </div>\n              </button>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default EnhancedSearchScreen;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\FavoritesScreen.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\FloatingActionButton.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\HorrorQuoteDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\HorrorThemeActivator.tsx",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 6,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 6,
        "endColumn": 14,
        "suggestions": [
          {
            "fix": { "range": [184, 237], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 20,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 20,
        "endColumn": 14,
        "suggestions": [
          {
            "fix": { "range": [825, 892], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 39,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 39,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [1437, 1559], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 51,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 51,
        "endColumn": 14,
        "suggestions": [
          {
            "fix": { "range": [1835, 1905], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 60,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 60,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [2173, 2292], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 88,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 88,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [3164, 3208], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 99,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 99,
        "endColumn": 14,
        "suggestions": [
          {
            "fix": { "range": [3479, 3533], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useEffect, useState } from 'react';\r\nimport { useTheme } from '../utils/useTheme';\r\n\r\n// Direct horror effects force function\r\nconst forceHorrorEffectsNow = () => {\r\n  console.log('🎃 FORCING HORROR EFFECTS DIRECTLY...');\r\n\r\n  // Force add horror classes to body and html\r\n  document.body.classList.add('horror-theme', 'horror-film-grain');\r\n  document.documentElement.classList.add('horror-theme');\r\n\r\n  // Force change page title\r\n  document.title = '🎃 Crystal Lake Weather Station - FORCED MODE';\r\n\r\n  // Force add blood drip to ALL headings and text\r\n  const selector =\r\n    'h1, h2, h3, h4, h5, h6, .temperature, .temp, .temperature-display, .city-name, .weather-description, .metric-value, .forecast-temp, .weather-title, .location-title';\r\n  const elements = document.querySelectorAll(selector);\r\n\r\n  console.log(`🩸 Adding blood drip to ${elements.length} elements`);\r\n\r\n  elements.forEach((element, index) => {\r\n    (element as HTMLElement).classList.add('horror-blood-drip');\r\n    (element as HTMLElement).style.setProperty(\r\n      'animation',\r\n      'bloodDrip 4s infinite ease-in-out',\r\n      'important',\r\n    );\r\n    (element as HTMLElement).style.setProperty(\r\n      'filter',\r\n      'drop-shadow(0 2px 10px rgba(139, 0, 0, 0.8))',\r\n      'important',\r\n    );\r\n    (element as HTMLElement).style.setProperty(\r\n      'text-shadow',\r\n      '0 0 10px rgba(139, 0, 0, 0.8)',\r\n      'important',\r\n    );\r\n    console.log(\r\n      `Added blood drip to element ${index + 1}:`,\r\n      element.tagName,\r\n      element.className,\r\n    );\r\n  });\r\n\r\n  // Force add flickering to weather cards and text\r\n  const flickerSelector =\r\n    '.weather-card, .forecast-card, .metric-card, .weather-description, .forecast-day, .ios26-weather-card';\r\n  const flickerElements = document.querySelectorAll(flickerSelector);\r\n\r\n  console.log(`⚡ Adding flicker to ${flickerElements.length} elements`);\r\n\r\n  flickerElements.forEach((element, index) => {\r\n    (element as HTMLElement).classList.add('horror-flicker');\r\n    (element as HTMLElement).style.setProperty(\r\n      'animation',\r\n      'flickeringHorror 3s infinite ease-in-out',\r\n      'important',\r\n    );\r\n    console.log(\r\n      `Added flicker to element ${index + 1}:`,\r\n      element.tagName,\r\n      element.className,\r\n    );\r\n  });\r\n\r\n  // Force film grain overlay\r\n  if (!document.querySelector('.horror-film-grain-overlay-forced')) {\r\n    const overlay = document.createElement('div');\r\n    overlay.className = 'horror-film-grain-overlay-forced';\r\n    overlay.style.cssText = `\r\n      position: fixed;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      background-image:\r\n        radial-gradient(circle at 25% 25%, rgba(255, 255, 255, 0.02) 1px, transparent 1px),\r\n        radial-gradient(circle at 75% 75%, rgba(0, 0, 0, 0.1) 1px, transparent 1px),\r\n        radial-gradient(circle at 50% 50%, rgba(139, 0, 0, 0.05) 1px, transparent 1px);\r\n      background-size: 4px 4px, 6px 6px, 8px 8px;\r\n      pointer-events: none;\r\n      z-index: 1000;\r\n      opacity: 0.8;\r\n      animation: filmGrainFlicker 0.1s infinite;\r\n    `;\r\n    document.body.appendChild(overlay);\r\n    console.log('🌫️ Added film grain overlay');\r\n  }\r\n\r\n  // Force dark background\r\n  document.body.style.setProperty(\r\n    'background',\r\n    'linear-gradient(135deg, #0d0d0d 0%, #1a0000 50%, #000000 100%)',\r\n    'important',\r\n  );\r\n  document.body.style.setProperty('background-color', '#0d0d0d', 'important');\r\n\r\n  console.log('🎃 Horror effects FORCED successfully!');\r\n};\r\n\r\n/**\r\n * Horror Theme Activator Component\r\n * Provides easy horror theme activation and atmospheric effects\r\n */\r\nconst HorrorThemeActivator: React.FC = () => {\r\n  const { isHorror, toggleTheme, themeName } = useTheme();\r\n  const [showActivator, setShowActivator] = useState(false);\r\n\r\n  // Show the activator button when not in horror mode\r\n  useEffect(() => {\r\n    setShowActivator(!isHorror);\r\n  }, [isHorror]);\r\n\r\n  // Activate horror effects when in horror mode\r\n  useEffect(() => {\r\n    if (isHorror) {\r\n      // Add film grain overlay to body\r\n      document.body.classList.add('horror-film-grain');\r\n\r\n      // Activate blood drip animations on headers\r\n      setTimeout(() => {\r\n        const headers = document.querySelectorAll(\r\n          'h1, h2, h3, .temperature-display',\r\n        );\r\n        headers.forEach(header => {\r\n          (header as HTMLElement).classList.add('horror-blood-drip');\r\n        });\r\n\r\n        // Add flickering animation to text elements\r\n        const textElements = document.querySelectorAll(\r\n          '.weather-description, .forecast-day, .metric-label',\r\n        );\r\n        textElements.forEach(element => {\r\n          (element as HTMLElement).classList.add('horror-flicker');\r\n        });\r\n      }, 500);\r\n\r\n      // Change page title for maximum spookiness\r\n      document.title = '🎃 Crystal Lake Weather Station';\r\n\r\n      // Add horror atmosphere message (disabled for production)\r\n      // console.log('🎃 Horror mode activated - Crystal Lake Weather Station');\r\n    } else {\r\n      document.body.classList.remove('horror-film-grain');\r\n      document.title = '🌤️ Weather App';\r\n\r\n      // Remove horror classes\r\n      const elements = document.querySelectorAll(\r\n        '.horror-blood-drip, .horror-flicker',\r\n      );\r\n      elements.forEach(element => {\r\n        (element as HTMLElement).classList.remove(\r\n          'horror-blood-drip',\r\n          'horror-flicker',\r\n        );\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      // Cleanup on unmount\r\n      document.body.classList.remove('horror-film-grain');\r\n      const elements = document.querySelectorAll(\r\n        '.horror-blood-drip, .horror-flicker',\r\n      );\r\n      elements.forEach(element => {\r\n        (element as HTMLElement).classList.remove(\r\n          'horror-blood-drip',\r\n          'horror-flicker',\r\n        );\r\n      });\r\n    };\r\n  }, [isHorror]);\r\n\r\n  const handleActivateHorror = () => {\r\n    // Cycle through themes until we get to horror\r\n    let clicksNeeded = 0;\r\n    switch (themeName) {\r\n      case 'light':\r\n        clicksNeeded = 2; // light -> dark -> horror\r\n        break;\r\n      case 'dark':\r\n        clicksNeeded = 1; // dark -> horror\r\n        break;\r\n      case 'horror':\r\n        return; // already horror, no need to change\r\n      default:\r\n        clicksNeeded = 2;\r\n    }\r\n\r\n    // Toggle theme the required number of times\r\n    for (let i = 0; i < clicksNeeded; i++) {\r\n      setTimeout(() => toggleTheme(), i * 100);\r\n    }\r\n  };\r\n\r\n  if (isHorror) {\r\n    return (\r\n      <div className=\"horror-status-indicator\">\r\n        <div className=\"horror-status-content\">💀 HORROR MODE ACTIVE 💀</div>\r\n        <div style={{ fontSize: '10px', color: '#ff6b6b', marginTop: '4px' }}>\r\n          Theme: {themeName} | Body Classes:{' '}\r\n          {document.body.className\r\n            .split(' ')\r\n            .filter(c => c.includes('horror'))\r\n            .join(', ') || 'none'}\r\n        </div>\r\n        <button\r\n          onClick={() => {\r\n            // Force horror effects directly\r\n            forceHorrorEffectsNow();\r\n          }}\r\n          style={{\r\n            marginTop: '8px',\r\n            padding: '4px 8px',\r\n            fontSize: '12px',\r\n            background: '#8b0000',\r\n            border: '1px solid #ff6b6b',\r\n            color: '#ff6b6b',\r\n            borderRadius: '4px',\r\n            cursor: 'pointer',\r\n          }}\r\n          title=\"Force Horror Effects (Debug)\"\r\n        >\r\n          🩸 Force Effects\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!showActivator) return null;\r\n\r\n  return (\r\n    <div className=\"horror-activator\">\r\n      <button\r\n        onClick={handleActivateHorror}\r\n        className=\"horror-activate-button\"\r\n        title=\"Activate Horror Theme - Enter Crystal Lake...\"\r\n      >\r\n        🎃 Enter Crystal Lake\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          // Force horror effects directly\r\n          forceHorrorEffectsNow();\r\n        }}\r\n        style={{\r\n          marginTop: '8px',\r\n          padding: '4px 8px',\r\n          fontSize: '12px',\r\n          background: '#8b0000',\r\n          border: '1px solid #ff6b6b',\r\n          color: '#ff6b6b',\r\n          borderRadius: '4px',\r\n          cursor: 'pointer',\r\n          display: 'block',\r\n        }}\r\n        title=\"Force Horror Effects (Debug)\"\r\n      >\r\n        🩸 Force Effects\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(HorrorThemeActivator);\r\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\IOSHIGNavigation.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\IOSHIGWeatherDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\IOSSearchBar.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'index' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 440,
        "column": 31,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 440,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'score' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 298,
        "column": 17,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 298,
        "endColumn": 22,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * IOSSearchBar - iOS-style integrated search component\r\n *\r\n * Features:\r\n * - Native iOS search bar styling\r\n * - Fuzzy search algorithm\r\n * - Real-time weather data integration\r\n * - Glassmorphism design with theme support\r\n * - Accessibility compliant\r\n * - Touch-optimized for mobile\r\n */\r\n\r\nimport React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport '../styles/IOSSearchBar.css';\r\nimport { useHaptic } from '../utils/hapticHooks';\r\nimport { logError } from '../utils/logger';\r\nimport { useTheme } from '../utils/useTheme';\r\n\r\ninterface City {\r\n  display_name: string;\r\n  lat: string;\r\n  lon: string;\r\n  place_id: number;\r\n}\r\n\r\ninterface WeatherData {\r\n  current_weather: {\r\n    temperature: number;\r\n    weathercode: number;\r\n    windspeed: number;\r\n  };\r\n  hourly: {\r\n    relative_humidity_2m: number[];\r\n  };\r\n  daily: {\r\n    time: string[];\r\n    temperature_2m_max: number[];\r\n    temperature_2m_min: number[];\r\n    weather_code: number[];\r\n    precipitation_sum: number[];\r\n  };\r\n}\r\n\r\ninterface IOSSearchBarProps {\r\n  onCitySelected?: (city: City, weatherData?: WeatherData) => void;\r\n  placeholder?: string;\r\n  autoFocus?: boolean;\r\n}\r\n\r\nconst IOSSearchBar: React.FC<IOSSearchBarProps> = ({\r\n  onCitySelected,\r\n  placeholder = 'Search cities',\r\n  autoFocus = false,\r\n}) => {\r\n  const { isDark } = useTheme();\r\n  const haptic = useHaptic();\r\n  const [query, setQuery] = useState('');\r\n  const [results, setResults] = useState<City[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [showResults, setShowResults] = useState(false);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // Enhanced city database - memoized to prevent recreation\r\n  const cities: City[] = useMemo(\r\n    () => [\r\n      {\r\n        display_name: 'New York, New York, United States',\r\n        lat: '40.7128',\r\n        lon: '-74.0060',\r\n        place_id: 1,\r\n      },\r\n      {\r\n        display_name: 'New Orleans, Louisiana, United States',\r\n        lat: '29.9511',\r\n        lon: '-90.0715',\r\n        place_id: 11,\r\n      },\r\n      {\r\n        display_name: 'New Delhi, India',\r\n        lat: '28.6139',\r\n        lon: '77.2090',\r\n        place_id: 12,\r\n      },\r\n      {\r\n        display_name: 'Newcastle, England, United Kingdom',\r\n        lat: '54.9783',\r\n        lon: '-1.6178',\r\n        place_id: 13,\r\n      },\r\n      {\r\n        display_name: 'Los Angeles, California, United States',\r\n        lat: '34.0522',\r\n        lon: '-118.2437',\r\n        place_id: 2,\r\n      },\r\n      {\r\n        display_name: 'Chicago, Illinois, United States',\r\n        lat: '41.8781',\r\n        lon: '-87.6298',\r\n        place_id: 3,\r\n      },\r\n      {\r\n        display_name: 'London, England, United Kingdom',\r\n        lat: '51.5074',\r\n        lon: '-0.1278',\r\n        place_id: 4,\r\n      },\r\n      {\r\n        display_name: 'Paris, France',\r\n        lat: '48.8566',\r\n        lon: '2.3522',\r\n        place_id: 5,\r\n      },\r\n      {\r\n        display_name: 'Berlin, Germany',\r\n        lat: '52.5200',\r\n        lon: '13.4050',\r\n        place_id: 6,\r\n      },\r\n      {\r\n        display_name: 'Tokyo, Japan',\r\n        lat: '35.6762',\r\n        lon: '139.6503',\r\n        place_id: 7,\r\n      },\r\n      {\r\n        display_name: 'Sydney, Australia',\r\n        lat: '-33.8688',\r\n        lon: '151.2093',\r\n        place_id: 8,\r\n      },\r\n      {\r\n        display_name: 'Miami, Florida, United States',\r\n        lat: '25.7617',\r\n        lon: '-80.1918',\r\n        place_id: 9,\r\n      },\r\n      {\r\n        display_name: 'Seattle, Washington, United States',\r\n        lat: '47.6062',\r\n        lon: '-122.3321',\r\n        place_id: 10,\r\n      },\r\n      {\r\n        display_name: 'San Francisco, California, United States',\r\n        lat: '37.7749',\r\n        lon: '-122.4194',\r\n        place_id: 14,\r\n      },\r\n      {\r\n        display_name: 'Boston, Massachusetts, United States',\r\n        lat: '42.3601',\r\n        lon: '-71.0589',\r\n        place_id: 15,\r\n      },\r\n      {\r\n        display_name: 'Toronto, Ontario, Canada',\r\n        lat: '43.6532',\r\n        lon: '-79.3832',\r\n        place_id: 16,\r\n      },\r\n      {\r\n        display_name: 'Vancouver, British Columbia, Canada',\r\n        lat: '49.2827',\r\n        lon: '-123.1207',\r\n        place_id: 17,\r\n      },\r\n      {\r\n        display_name: 'Mexico City, Mexico',\r\n        lat: '19.4326',\r\n        lon: '-99.1332',\r\n        place_id: 18,\r\n      },\r\n      {\r\n        display_name: 'Madrid, Spain',\r\n        lat: '40.4168',\r\n        lon: '-3.7038',\r\n        place_id: 19,\r\n      },\r\n      {\r\n        display_name: 'Rome, Italy',\r\n        lat: '41.9028',\r\n        lon: '12.4964',\r\n        place_id: 20,\r\n      },\r\n      {\r\n        display_name: 'Barcelona, Spain',\r\n        lat: '41.3851',\r\n        lon: '2.1734',\r\n        place_id: 21,\r\n      },\r\n      {\r\n        display_name: 'Amsterdam, Netherlands',\r\n        lat: '52.3676',\r\n        lon: '4.9041',\r\n        place_id: 22,\r\n      },\r\n      {\r\n        display_name: 'Vienna, Austria',\r\n        lat: '48.2082',\r\n        lon: '16.3738',\r\n        place_id: 23,\r\n      },\r\n      {\r\n        display_name: 'Prague, Czech Republic',\r\n        lat: '50.0755',\r\n        lon: '14.4378',\r\n        place_id: 24,\r\n      },\r\n      {\r\n        display_name: 'Stockholm, Sweden',\r\n        lat: '59.3293',\r\n        lon: '18.0686',\r\n        place_id: 25,\r\n      },\r\n    ],\r\n    [],\r\n  );\r\n\r\n  // Fuzzy search algorithm\r\n  const fuzzyMatch = useCallback((query: string, text: string): number => {\r\n    const queryLower = query.toLowerCase().trim();\r\n    const textLower = text.toLowerCase();\r\n\r\n    // Exact match gets highest score\r\n    if (textLower.includes(queryLower)) {\r\n      return 100;\r\n    }\r\n\r\n    // Calculate similarity for words\r\n    const words = textLower.split(/[\\s,]+/);\r\n    let bestScore = 0;\r\n\r\n    for (const word of words) {\r\n      if (word.length === 0) continue;\r\n\r\n      // Starts with query\r\n      if (word.startsWith(queryLower)) {\r\n        bestScore = Math.max(bestScore, 90);\r\n        continue;\r\n      }\r\n\r\n      // Character-by-character similarity\r\n      let matches = 0;\r\n      for (let i = 0; i < Math.min(queryLower.length, word.length); i++) {\r\n        if (queryLower[i] === word[i]) {\r\n          matches++;\r\n        }\r\n      }\r\n\r\n      if (matches > 0) {\r\n        const score = (matches / Math.max(queryLower.length, word.length)) * 70;\r\n        bestScore = Math.max(bestScore, score);\r\n      }\r\n\r\n      // Partial substring matches\r\n      for (let i = 0; i < queryLower.length - 1; i++) {\r\n        if (word.includes(queryLower.substring(i, i + 2))) {\r\n          bestScore = Math.max(bestScore, 50);\r\n        }\r\n      }\r\n    }\r\n\r\n    return bestScore;\r\n  }, []);\r\n\r\n  // Search with debouncing\r\n  const performSearch = useCallback(\r\n    (searchQuery: string) => {\r\n      if (searchQuery.length < 2) {\r\n        setResults([]);\r\n        setShowResults(false);\r\n        return;\r\n      }\r\n\r\n      setIsLoading(true);\r\n\r\n      // Apply fuzzy search with scoring\r\n      const scoredResults = cities.map(city => ({\r\n        ...city,\r\n        score: fuzzyMatch(searchQuery, city.display_name),\r\n      }));\r\n\r\n      // Filter and sort by relevance\r\n      const filteredResults = scoredResults\r\n        .filter(city => city.score > 25)\r\n        .sort((a, b) => b.score - a.score)\r\n        .slice(0, 8)\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        .map(({ score, ...city }) => city); // Remove score property\r\n\r\n      setResults(filteredResults);\r\n      setShowResults(filteredResults.length > 0);\r\n      setIsLoading(false);\r\n    },\r\n    [cities, fuzzyMatch],\r\n  );\r\n\r\n  // Handle input change with debouncing\r\n  const handleInputChange = useCallback(\r\n    (value: string) => {\r\n      setQuery(value);\r\n\r\n      if (searchTimeoutRef.current) {\r\n        clearTimeout(searchTimeoutRef.current);\r\n      }\r\n\r\n      searchTimeoutRef.current = setTimeout(() => {\r\n        performSearch(value);\r\n      }, 300);\r\n    },\r\n    [performSearch],\r\n  );\r\n\r\n  // Fetch weather data\r\n  const fetchWeatherData = useCallback(\r\n    async (city: City): Promise<WeatherData | undefined> => {\r\n      try {\r\n        const weatherUrl = `https://api.open-meteo.com/v1/forecast?latitude=${city.lat}&longitude=${city.lon}&current_weather=true&hourly=temperature_2m,relative_humidity_2m,weather_code&daily=temperature_2m_max,temperature_2m_min,weather_code,precipitation_sum&temperature_unit=fahrenheit&windspeed_unit=mph&precipitation_unit=inch&timezone=auto`;\r\n\r\n        const response = await fetch(weatherUrl);\r\n        return await response.json();\r\n      } catch (error) {\r\n        logError('Weather fetch error:', error);\r\n        return undefined;\r\n      }\r\n    },\r\n    [],\r\n  );\r\n\r\n  // Handle city selection\r\n  const handleCitySelect = useCallback(\r\n    async (city: City) => {\r\n      haptic.light();\r\n      setQuery(city.display_name.split(',')[0]);\r\n      setShowResults(false);\r\n      setIsActive(false);\r\n\r\n      if (onCitySelected) {\r\n        const weatherData = await fetchWeatherData(city);\r\n        onCitySelected(city, weatherData);\r\n      }\r\n    },\r\n    [haptic, onCitySelected, fetchWeatherData],\r\n  );\r\n\r\n  // Handle focus/blur\r\n  const handleFocus = useCallback(() => {\r\n    setIsActive(true);\r\n    if (query.length >= 2) {\r\n      setShowResults(results.length > 0);\r\n    }\r\n  }, [query.length, results.length]);\r\n\r\n  const handleBlur = useCallback(() => {\r\n    // Delay hiding results to allow for clicks\r\n    setTimeout(() => {\r\n      setIsActive(false);\r\n      setShowResults(false);\r\n    }, 150);\r\n  }, []);\r\n\r\n  // Clear search\r\n  const clearSearch = useCallback(() => {\r\n    setQuery('');\r\n    setResults([]);\r\n    setShowResults(false);\r\n    haptic.light();\r\n    inputRef.current?.focus();\r\n  }, [haptic]);\r\n\r\n  // Auto-focus if requested\r\n  useEffect(() => {\r\n    if (autoFocus && inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [autoFocus]);\r\n\r\n  // Cleanup timeout on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (searchTimeoutRef.current) {\r\n        clearTimeout(searchTimeoutRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const themeClass = isDark ? 'dark' : 'light';\r\n\r\n  return (\r\n    <div className=\"ios-search-container\">\r\n      {/* iOS-style search bar */}\r\n      <div\r\n        className={`ios-search-bar ${themeClass} ${isActive ? 'active' : ''}`}\r\n      >\r\n        {/* Search icon */}\r\n        <div className=\"ios-search-icon\">🔍</div>\r\n\r\n        {/* Input field */}\r\n        <input\r\n          ref={inputRef}\r\n          type=\"text\"\r\n          value={query}\r\n          onChange={e => handleInputChange(e.target.value)}\r\n          onFocus={handleFocus}\r\n          onBlur={handleBlur}\r\n          placeholder={placeholder}\r\n          className={`ios-search-input ${themeClass}`}\r\n          autoComplete=\"off\"\r\n          spellCheck=\"false\"\r\n          aria-label=\"Search cities\"\r\n        />\r\n\r\n        {/* Clear button */}\r\n        {query && (\r\n          <button\r\n            onClick={clearSearch}\r\n            className={`ios-clear-button ${themeClass}`}\r\n            aria-label=\"Clear search\"\r\n          >\r\n            ×\r\n          </button>\r\n        )}\r\n\r\n        {/* Loading indicator */}\r\n        {isLoading && <div className={`ios-loading-spinner ${themeClass}`} />}\r\n      </div>\r\n\r\n      {/* Results dropdown */}\r\n      {showResults && (\r\n        <div className={`ios-results-dropdown ${themeClass}`}>\r\n          {results.map((city, index) => {\r\n            const cityName = city.display_name.split(',')[0];\r\n            const location = city.display_name\r\n              .split(',')\r\n              .slice(1)\r\n              .join(',')\r\n              .trim();\r\n\r\n            return (\r\n              <button\r\n                key={city.place_id}\r\n                onClick={() => handleCitySelect(city)}\r\n                className={`ios-result-item ${themeClass}`}\r\n                aria-label={`Select ${cityName}`}\r\n              >\r\n                <div className={`ios-result-city-name ${themeClass}`}>\r\n                  {cityName}\r\n                </div>\r\n                <div className=\"ios-result-location\">{location}</div>\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IOSSearchBar;\r\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\LocationManager.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\MobileNavigation.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\MobileTest.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\NavigationTest.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\PWAInstallPrompt.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 34,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 34,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useEffect, useState } from 'react';\n\ninterface PWAInstallPromptProps {\n  canInstall: boolean;\n  onInstall: () => Promise<void>;\n  onDismiss: () => void;\n}\n\nconst PWAInstallPrompt: React.FC<PWAInstallPromptProps> = ({\n  canInstall,\n  onInstall,\n  onDismiss,\n}) => {\n  const [show, setShow] = useState(false);\n  const [installing, setInstalling] = useState(false);\n\n  useEffect(() => {\n    if (canInstall) {\n      // Show prompt after a short delay for better UX\n      const timer = setTimeout(() => {\n        setShow(true);\n      }, 3000);\n      return () => clearTimeout(timer);\n    } else {\n      setShow(false);\n    }\n  }, [canInstall]);\n\n  const handleInstall = async () => {\n    setInstalling(true);\n    try {\n      await onInstall();\n      setShow(false);\n    } catch (error) {\n      // Handle installation error\n      setInstalling(false);\n    }\n  };\n\n  const handleDismiss = () => {\n    setShow(false);\n    onDismiss();\n  };\n\n  if (!show || !canInstall) return null;\n\n  return (\n    <div\n      className=\"pwa-install-prompt\"\n      style={{\n        position: 'fixed',\n        bottom: '20px',\n        left: '20px',\n        right: '20px',\n        zIndex: 10000,\n        backgroundColor: 'rgba(16, 33, 62, 0.95)',\n        backdropFilter: 'blur(20px)',\n        border: '1px solid rgba(255, 255, 255, 0.1)',\n        borderRadius: '16px',\n        padding: '20px',\n        color: 'white',\n        fontFamily: 'system-ui, -apple-system, sans-serif',\n        boxShadow: '0 20px 40px rgba(0, 0, 0, 0.3)',\n        animation: 'slideUp 0.3s ease-out',\n      }}\n    >\n      <style>\n        {`\n          @keyframes slideUp {\n            from {\n              transform: translateY(100%);\n              opacity: 0;\n            }\n            to {\n              transform: translateY(0);\n              opacity: 1;\n            }\n          }\n        `}\n      </style>\n\n      <div\n        style={{ display: 'flex', alignItems: 'center', marginBottom: '12px' }}\n      >\n        <span style={{ fontSize: '24px', marginRight: '12px' }}>🌤️</span>\n        <div>\n          <div style={{ fontWeight: '600', fontSize: '16px' }}>\n            Install Weather App\n          </div>\n          <div style={{ fontSize: '14px', color: 'rgba(255, 255, 255, 0.8)' }}>\n            Get instant access and offline features\n          </div>\n        </div>\n      </div>\n\n      <div\n        style={{\n          fontSize: '13px',\n          marginBottom: '16px',\n          color: 'rgba(255, 255, 255, 0.7)',\n        }}\n      >\n        • Works offline with cached weather data\n        <br />\n        • Faster loading and native-like experience\n        <br />• Home screen shortcut access\n      </div>\n\n      <div style={{ display: 'flex', gap: '12px' }}>\n        <button\n          onClick={handleInstall}\n          disabled={installing}\n          style={{\n            flex: 1,\n            backgroundColor: '#667eea',\n            color: 'white',\n            border: 'none',\n            borderRadius: '8px',\n            padding: '12px 16px',\n            fontSize: '14px',\n            fontWeight: '600',\n            cursor: installing ? 'not-allowed' : 'pointer',\n            opacity: installing ? 0.7 : 1,\n          }}\n        >\n          {installing ? '⏳ Installing...' : '📱 Install Now'}\n        </button>\n\n        <button\n          onClick={handleDismiss}\n          style={{\n            backgroundColor: 'transparent',\n            color: 'rgba(255, 255, 255, 0.8)',\n            border: '1px solid rgba(255, 255, 255, 0.3)',\n            borderRadius: '8px',\n            padding: '12px 16px',\n            fontSize: '14px',\n            cursor: 'pointer',\n          }}\n        >\n          Maybe Later\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default PWAInstallPrompt;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\PWAStatus.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\PerformanceDashboard.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'feature4BStats' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 28,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'getPerformanceRecommendations' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 29,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'optimizeCache' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'processPendingSync' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 31,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'clearCache' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 32,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useEffect, useState } from 'react';\nimport { bundleSizeMonitor } from '../utils/bundleSizeMonitor';\nimport { offlineStorage } from '../utils/offlineWeatherStorage';\nimport { searchPerformanceMonitor } from '../utils/searchPerformanceMonitor';\nimport { useFeature4B } from '../utils/useFeature4B';\nimport './PerformanceDashboard.css';\n\ninterface PerformanceDashboardProps {\n  enabled?: boolean;\n  position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n}\n\nconst PerformanceDashboard: React.FC<PerformanceDashboardProps> = ({\n  enabled = false,\n  position = 'bottom-left',\n}) => {\n  const [expanded, setExpanded] = useState(false);\n  const [bundleStats, setBundleStats] = useState(\n    bundleSizeMonitor.getBundleStats(),\n  );\n  const [searchStats, setSearchStats] = useState(\n    searchPerformanceMonitor.getStats(),\n  );\n  const [cacheStats, setCacheStats] = useState(offlineStorage.getCacheStats());\n\n  // Feature 4B integration\n  const {\n    stats: feature4BStats,\n    getPerformanceRecommendations,\n    optimizeCache,\n    processPendingSync,\n    clearCache,\n  } = useFeature4B();\n\n  // Update stats periodically\n  useEffect(() => {\n    if (!enabled) return;\n\n    const updateStats = () => {\n      setBundleStats(bundleSizeMonitor.getBundleStats());\n      setSearchStats(searchPerformanceMonitor.getStats());\n      setCacheStats(offlineStorage.getCacheStats());\n    };\n\n    const interval = setInterval(updateStats, 5000); // Update every 5 seconds\n    return () => clearInterval(interval);\n  }, [enabled]);\n\n  if (!enabled) return null;\n\n  const positionStyles = {\n    'top-left': { top: '20px', left: '20px' },\n    'top-right': { top: '20px', right: '20px' },\n    'bottom-left': { bottom: '20px', left: '20px' },\n    'bottom-right': { bottom: '20px', right: '20px' },\n  };\n\n  const recommendations = bundleSizeMonitor.getRecommendations();\n  const isPerformanceDegrading =\n    searchPerformanceMonitor.isPerformanceDegrading();\n\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        ...positionStyles[position],\n        zIndex: 9998,\n        backgroundColor: 'rgba(16, 33, 62, 0.95)',\n        backdropFilter: 'blur(10px)',\n        border: '1px solid rgba(255, 255, 255, 0.1)',\n        borderRadius: '12px',\n        padding: '12px',\n        minWidth: expanded ? '320px' : '200px',\n        maxWidth: '400px',\n        color: 'white',\n        fontSize: '12px',\n        fontFamily: 'system-ui, -apple-system, sans-serif',\n        boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',\n        transition: 'all 0.3s ease',\n      }}\n    >\n      {/* Header */}\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          marginBottom: expanded ? '12px' : '0',\n          cursor: 'pointer',\n        }}\n        onClick={() => setExpanded(!expanded)}\n      >\n        <span style={{ fontWeight: '600' }}>📊 Performance Monitor</span>\n        <span style={{ fontSize: '10px' }}>{expanded ? '▼' : '▶'}</span>\n      </div>\n\n      {expanded && (\n        <>\n          {/* Performance Alerts */}\n          {(isPerformanceDegrading || recommendations.length > 0) && (\n            <div\n              style={{\n                backgroundColor: 'rgba(239, 68, 68, 0.2)',\n                border: '1px solid rgba(239, 68, 68, 0.4)',\n                borderRadius: '6px',\n                padding: '8px',\n                marginBottom: '12px',\n                fontSize: '11px',\n              }}\n            >\n              <div style={{ fontWeight: '600', marginBottom: '4px' }}>\n                ⚠️ Performance Alerts\n              </div>\n              {isPerformanceDegrading && (\n                <div>• Search performance degrading</div>\n              )}\n              {recommendations.map((rec, idx) => (\n                <div key={idx}>• {rec}</div>\n              ))}\n            </div>\n          )}\n\n          {/* Bundle Stats */}\n          <div style={{ marginBottom: '12px' }}>\n            <div\n              style={{\n                fontWeight: '600',\n                marginBottom: '6px',\n                fontSize: '11px',\n              }}\n            >\n              📦 Bundle Performance\n            </div>\n            <div style={{ fontSize: '10px', lineHeight: '1.4' }}>\n              <div>\n                Size:{' '}\n                {bundleSizeMonitor.formatBundleSize(\n                  bundleStats.averageBundleSize,\n                )}\n              </div>\n              <div>Lazy Components: {bundleStats.totalLazyComponents}</div>\n              <div>\n                Avg Load Time: {bundleStats.averageLazyLoadTime.toFixed(0)}ms\n              </div>\n            </div>\n          </div>\n\n          {/* Search Stats */}\n          <div style={{ marginBottom: '12px' }}>\n            <div\n              style={{\n                fontWeight: '600',\n                marginBottom: '6px',\n                fontSize: '11px',\n              }}\n            >\n              🔍 Search Performance\n            </div>\n            <div style={{ fontSize: '10px', lineHeight: '1.4' }}>\n              <div>Avg Latency: {searchStats.averageLatency.toFixed(0)}ms</div>\n              <div>Total Searches: {searchStats.totalSearches}</div>\n              <div>\n                Types: {Object.keys(searchStats.searchTypes).join(', ')}\n              </div>\n            </div>\n          </div>\n\n          {/* Cache Stats */}\n          <div style={{ marginBottom: '12px' }}>\n            <div\n              style={{\n                fontWeight: '600',\n                marginBottom: '6px',\n                fontSize: '11px',\n              }}\n            >\n              🗄️ Offline Storage\n            </div>\n            <div style={{ fontSize: '10px', lineHeight: '1.4' }}>\n              <div>Cached Cities: {cacheStats.cachedCities}</div>\n              <div>Recent Cities: {cacheStats.recentCities}</div>\n              <div>Storage Size: {cacheStats.totalSize}</div>\n            </div>\n          </div>\n\n          {/* Memory Usage */}\n          {bundleStats.memoryTrend.length > 0 && (\n            <div style={{ marginBottom: '12px' }}>\n              <div\n                style={{\n                  fontWeight: '600',\n                  marginBottom: '6px',\n                  fontSize: '11px',\n                }}\n              >\n                🧠 Memory Usage\n              </div>\n              <div style={{ fontSize: '10px' }}>\n                Current:{' '}\n                {bundleSizeMonitor.formatBundleSize(\n                  bundleStats.memoryTrend[bundleStats.memoryTrend.length - 1]\n                    ?.memory || 0,\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Actions */}\n          <div style={{ display: 'flex', gap: '6px', marginTop: '8px' }}>\n            <button\n              onClick={() => {\n                searchPerformanceMonitor.clearMetrics();\n                bundleSizeMonitor.clearMetrics();\n                offlineStorage.clearAllCache();\n                setCacheStats(offlineStorage.getCacheStats());\n                setSearchStats(searchPerformanceMonitor.getStats());\n                setBundleStats(bundleSizeMonitor.getBundleStats());\n              }}\n              style={{\n                backgroundColor: 'rgba(239, 68, 68, 0.8)',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                padding: '4px 8px',\n                fontSize: '10px',\n                cursor: 'pointer',\n              }}\n            >\n              Clear All\n            </button>\n            <button\n              onClick={() => offlineStorage.cleanupExpiredCache()}\n              style={{\n                backgroundColor: 'rgba(59, 130, 246, 0.8)',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                padding: '4px 8px',\n                fontSize: '10px',\n                cursor: 'pointer',\n              }}\n            >\n              Cleanup\n            </button>\n          </div>\n        </>\n      )}\n\n      {/* Compact view */}\n      {!expanded && (\n        <div style={{ fontSize: '10px', opacity: 0.8 }}>\n          <div>\n            Bundle:{' '}\n            {bundleSizeMonitor.formatBundleSize(bundleStats.averageBundleSize)}\n          </div>\n          <div>Search: {searchStats.averageLatency.toFixed(0)}ms</div>\n          <div>Cache: {cacheStats.cachedCities} cities</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PerformanceDashboard;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\ProgressRing.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\PullToRefresh.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\ScreenTransition.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\SearchScreen.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\SettingsScreen.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\VoiceSearchButton.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\WeatherHapticIntegration.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\WeatherInteractionEnhancer.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\mobile\\LocationPermissionPrompt.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\mobile\\OfflineStatusIndicator.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useCallback has a missing dependency: 'smartCacheManager'. Either include it or remove the dependency array.",
        "line": 66,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 66,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [smartCacheManager]",
            "fix": { "range": [2204, 2206], "text": "[smartCacheManager]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\mobile\\WeatherAlertPanel-clean.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.",
        "line": 40,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 40,
        "endColumn": 17,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [isVisible, loadData]",
            "fix": { "range": [1028, 1039], "text": "[isVisible, loadData]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useEffect, useState } from 'react';\nimport type {\n  AlertPreferences,\n  AlertRule,\n  WeatherAlert,\n} from '../../services/mobile/WeatherAlertManager';\nimport { WeatherAlertManager } from '../../services/mobile/WeatherAlertManager';\nimport './WeatherAlertPanel.css';\n\ninterface WeatherAlertPanelProps {\n  isVisible: boolean;\n  onClose: () => void;\n  theme: {\n    isDark: boolean;\n    colors: {\n      primary: string;\n      text: string;\n      background: string;\n    };\n  };\n}\n\ntype TabType = 'alerts' | 'rules' | 'settings';\n\nconst WeatherAlertPanel: React.FC<WeatherAlertPanelProps> = ({\n  isVisible,\n  onClose,\n}) => {\n  const [activeTab, setActiveTab] = useState<TabType>('alerts');\n  const [alerts, setAlerts] = useState<WeatherAlert[]>([]);\n  const [rules, setRules] = useState<AlertRule[]>([]);\n  const [preferences, setPreferences] = useState<AlertPreferences | null>(null);\n\n  const alertManager = WeatherAlertManager.getInstance();\n\n  useEffect(() => {\n    if (isVisible) {\n      loadData();\n    }\n  }, [isVisible]);\n\n  const loadData = () => {\n    setAlerts(alertManager.getActiveAlerts());\n    setRules(alertManager.getAlertRules());\n    setPreferences(alertManager.getPreferences());\n  };\n\n  const unreadCount = alerts.filter(\n    (alert: WeatherAlert) => !alert.isRead,\n  ).length;\n\n  const handleMarkAsRead = (alertId: string) => {\n    alertManager.markAlertAsRead(alertId);\n    loadData();\n  };\n\n  const handleDismissAlert = (alertId: string) => {\n    alertManager.dismissAlert(alertId);\n    loadData();\n  };\n\n  const getSeverityIcon = (severity: string): string => {\n    if (severity === 'extreme') return '🚨';\n    if (severity === 'severe') return '⚠️';\n    if (severity === 'warning') return '⚡';\n    return 'ℹ️';\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div\n      className=\"weather-alert-panel\"\n      role=\"dialog\"\n      aria-labelledby=\"alert-panel-title\"\n      aria-modal=\"true\"\n    >\n      {/* Panel Header */}\n      <header className=\"panel-header\">\n        <h2 id=\"alert-panel-title\">Weather Alerts</h2>\n        <button\n          className=\"close-btn\"\n          onClick={onClose}\n          aria-label=\"Close weather alerts panel\"\n          type=\"button\"\n        >\n          ×\n        </button>\n      </header>\n\n      {/* Tab Navigation */}\n      <div className=\"panel-tabs\">\n        <button\n          className={`tab-btn ${activeTab === 'alerts' ? 'active' : ''}`}\n          onClick={() => setActiveTab('alerts')}\n          type=\"button\"\n          aria-pressed={activeTab === 'alerts'}\n        >\n          Alerts\n          {unreadCount > 0 && (\n            <span\n              className=\"tab-badge\"\n              aria-label={`${unreadCount} unread alerts`}\n            >\n              {unreadCount}\n            </span>\n          )}\n        </button>\n        <button\n          className={`tab-btn ${activeTab === 'rules' ? 'active' : ''}`}\n          onClick={() => setActiveTab('rules')}\n          type=\"button\"\n          aria-pressed={activeTab === 'rules'}\n        >\n          Rules ({rules.length})\n        </button>\n        <button\n          className={`tab-btn ${activeTab === 'settings' ? 'active' : ''}`}\n          onClick={() => setActiveTab('settings')}\n          type=\"button\"\n          aria-pressed={activeTab === 'settings'}\n        >\n          Settings\n        </button>\n      </div>\n\n      {/* Tab Content */}\n      <main className=\"panel-content\">\n        {/* Alerts Tab */}\n        {activeTab === 'alerts' && (\n          <section>\n            <div className=\"alert-list-header\">\n              <h3>\n                Active Alerts\n                {unreadCount > 0 && (\n                  <span\n                    className=\"unread-badge\"\n                    aria-label={`${unreadCount} unread`}\n                  >\n                    {unreadCount}\n                  </span>\n                )}\n              </h3>\n              {unreadCount > 0 && (\n                <button\n                  className=\"mark-all-read-btn\"\n                  onClick={() => {\n                    alerts.forEach((alert: WeatherAlert) => {\n                      if (!alert.isRead) {\n                        alertManager.markAlertAsRead(alert.id);\n                      }\n                    });\n                    loadData();\n                  }}\n                  type=\"button\"\n                  aria-label=\"Mark all alerts as read\"\n                >\n                  Mark All Read\n                </button>\n              )}\n            </div>\n\n            {alerts.length === 0 ? (\n              <div className=\"no-alerts\">\n                <span className=\"no-alerts-icon\" aria-hidden=\"true\">\n                  🌤️\n                </span>\n                <p>No weather alerts</p>\n                <small>You'll be notified when weather conditions change</small>\n              </div>\n            ) : (\n              <div className=\"alerts-container\">\n                {alerts.map((alert: WeatherAlert) => (\n                  <article\n                    key={`alert-${alert.id}`}\n                    className={`alert-item ${!alert.isRead ? 'unread' : ''} ${\n                      !alert.isActive ? 'dismissed' : ''\n                    } ${alert.severity}`}\n                    aria-label={`Weather alert: ${alert.title}`}\n                  >\n                    <header className=\"alert-header\">\n                      <span className=\"alert-icon\" aria-hidden=\"true\">\n                        {getSeverityIcon(alert.severity)}\n                      </span>\n                      <time\n                        className=\"alert-time\"\n                        dateTime={alert.startTime.toISOString()}\n                      >\n                        {alert.startTime.toLocaleTimeString()}\n                      </time>\n                      {!alert.isRead && (\n                        <span className=\"unread-dot\" aria-label=\"Unread\"></span>\n                      )}\n                    </header>\n\n                    <div className=\"alert-content\">\n                      <h4>{alert.title}</h4>\n                      <p className=\"alert-description\">{alert.description}</p>\n                      <p className=\"alert-location\">📍 {alert.location}</p>\n\n                      <div className=\"alert-actions\">\n                        {!alert.isRead && (\n                          <button\n                            className=\"action-btn mark-read\"\n                            onClick={() => handleMarkAsRead(alert.id)}\n                            type=\"button\"\n                            aria-label={`Mark alert \"${alert.title}\" as read`}\n                          >\n                            Mark Read\n                          </button>\n                        )}\n                        {alert.isActive && (\n                          <button\n                            className=\"action-btn dismiss\"\n                            onClick={() => handleDismissAlert(alert.id)}\n                            type=\"button\"\n                            aria-label={`Dismiss alert \"${alert.title}\"`}\n                          >\n                            Dismiss\n                          </button>\n                        )}\n                      </div>\n                    </div>\n                  </article>\n                ))}\n              </div>\n            )}\n          </section>\n        )}\n\n        {/* Rules Tab */}\n        {activeTab === 'rules' && (\n          <section>\n            <div className=\"rules-header\">\n              <h3>Alert Rules</h3>\n              <p>\n                Alert rules are managed programmatically. Use the mobile app\n                settings to configure custom alert conditions.\n              </p>\n            </div>\n\n            <div className=\"rules-list\">\n              {rules.map((rule: AlertRule) => (\n                <article\n                  key={`rule-${rule.id}`}\n                  className={`rule-item ${\n                    rule.enabled ? 'enabled' : 'disabled'\n                  }`}\n                >\n                  <header className=\"rule-header\">\n                    <span className=\"rule-icon\" aria-hidden=\"true\">\n                      {getSeverityIcon(rule.severity)}\n                    </span>\n                    <h4 className=\"rule-title\">{rule.title}</h4>\n\n                    <div className=\"rule-controls\">\n                      <label\n                        className=\"toggle-switch\"\n                        htmlFor={`rule-toggle-${rule.id}`}\n                      >\n                        <input\n                          id={`rule-toggle-${rule.id}`}\n                          type=\"checkbox\"\n                          checked={rule.enabled}\n                          onChange={e => {\n                            alertManager.updateAlertRule(rule.id, {\n                              enabled: e.target.checked,\n                            });\n                            loadData();\n                          }}\n                          aria-describedby={`rule-status-${rule.id}`}\n                        />\n                        <span className=\"toggle-slider\"></span>\n                        <span className=\"sr-only\">\n                          Toggle {rule.title} rule\n                        </span>\n                      </label>\n                      <span id={`rule-status-${rule.id}`} className=\"sr-only\">\n                        {rule.enabled ? 'Enabled' : 'Disabled'}\n                      </span>\n                    </div>\n                  </header>\n\n                  <div className=\"rule-details\">\n                    <p className=\"rule-description\">{rule.description}</p>\n                    <div className=\"rule-meta\">\n                      <span className={`severity-badge ${rule.severity}`}>\n                        {rule.severity.charAt(0).toUpperCase() +\n                          rule.severity.slice(1)}\n                      </span>\n                      <span className=\"locations\">\n                        📍 {rule.locations.length} location(s)\n                      </span>\n                    </div>\n                  </div>\n                </article>\n              ))}\n            </div>\n          </section>\n        )}\n\n        {/* Settings Tab */}\n        {activeTab === 'settings' && preferences && (\n          <section>\n            <h3>Alert Settings</h3>\n\n            <div className=\"settings-group\">\n              <h4>Notifications</h4>\n\n              <div className=\"setting-item\">\n                <label className=\"setting-label\" htmlFor=\"push-notifications\">\n                  <input\n                    id=\"push-notifications\"\n                    type=\"checkbox\"\n                    checked={preferences.enableNotifications}\n                    onChange={e => {\n                      alertManager.updatePreferences({\n                        enableNotifications: e.target.checked,\n                      });\n                      loadData();\n                    }}\n                  />\n                  Enable push notifications\n                </label>\n              </div>\n\n              <div className=\"setting-item\">\n                <label className=\"setting-label\" htmlFor=\"sound-alerts\">\n                  <input\n                    id=\"sound-alerts\"\n                    type=\"checkbox\"\n                    checked={preferences.enableSounds}\n                    onChange={e => {\n                      alertManager.updatePreferences({\n                        enableSounds: e.target.checked,\n                      });\n                      loadData();\n                    }}\n                  />\n                  Play sound for alerts\n                </label>\n              </div>\n\n              <div className=\"setting-item\">\n                <label className=\"setting-label\" htmlFor=\"vibration-alerts\">\n                  <input\n                    id=\"vibration-alerts\"\n                    type=\"checkbox\"\n                    checked={preferences.enableVibration}\n                    onChange={e => {\n                      alertManager.updatePreferences({\n                        enableVibration: e.target.checked,\n                      });\n                      loadData();\n                    }}\n                  />\n                  Enable vibration\n                </label>\n              </div>\n            </div>\n\n            <div className=\"settings-group\">\n              <h4>Alert Frequency</h4>\n\n              <div className=\"setting-item\">\n                <label htmlFor=\"min-severity\">Minimum alert severity:</label>\n                <select\n                  id=\"min-severity\"\n                  className=\"setting-select\"\n                  value={preferences.minimumSeverity}\n                  onChange={e => {\n                    alertManager.updatePreferences({\n                      minimumSeverity: e.target.value as\n                        | 'info'\n                        | 'warning'\n                        | 'severe'\n                        | 'extreme',\n                    });\n                    loadData();\n                  }}\n                >\n                  <option value=\"info\">Info</option>\n                  <option value=\"warning\">Warning</option>\n                  <option value=\"severe\">Severe</option>\n                  <option value=\"extreme\">Extreme</option>\n                </select>\n              </div>\n\n              <div className=\"setting-item\">\n                <label htmlFor=\"max-alerts\">Maximum alerts per day:</label>\n                <input\n                  id=\"max-alerts\"\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"50\"\n                  value={preferences.maxAlertsPerDay}\n                  onChange={e => {\n                    alertManager.updatePreferences({\n                      maxAlertsPerDay: parseInt(e.target.value) || 10,\n                    });\n                    loadData();\n                  }}\n                />\n              </div>\n            </div>\n\n            <div className=\"settings-group\">\n              <h4>Quiet Hours</h4>\n\n              <div className=\"quiet-hours\">\n                <div className=\"time-input\">\n                  <label htmlFor=\"quiet-start\">From:</label>\n                  <input\n                    id=\"quiet-start\"\n                    type=\"time\"\n                    value={preferences.quietHours.start}\n                    onChange={e => {\n                      alertManager.updatePreferences({\n                        quietHours: {\n                          ...preferences.quietHours,\n                          start: e.target.value,\n                        },\n                      });\n                      loadData();\n                    }}\n                  />\n                </div>\n                <div className=\"time-input\">\n                  <label htmlFor=\"quiet-end\">To:</label>\n                  <input\n                    id=\"quiet-end\"\n                    type=\"time\"\n                    value={preferences.quietHours.end}\n                    onChange={e => {\n                      alertManager.updatePreferences({\n                        quietHours: {\n                          ...preferences.quietHours,\n                          end: e.target.value,\n                        },\n                      });\n                      loadData();\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"settings-actions\">\n              <button\n                className=\"reset-btn\"\n                onClick={() => {\n                  alertManager.resetPreferences();\n                  loadData();\n                }}\n                type=\"button\"\n                aria-label=\"Reset all settings to default\"\n              >\n                Reset to Defaults\n              </button>\n            </div>\n          </section>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default WeatherAlertPanel;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\mobile\\WeatherAlertPanel.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\ActionSheet.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\EnhancedMobileWeatherCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\EnhancedSearchBar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\EnhancedWeatherDisplay.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'theme' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 35,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 8
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Enhanced Weather Display Component - August 2025\n *\n * Improved weather display component with:\n * - Better mobile typography and readability\n * - Enhanced contrast and visibility\n * - Improved spacing and layout for small screens\n * - Better accessibility and touch interaction\n * - Adaptive sizing based on screen dimensions\n */\n\nimport React from 'react';\nimport type { ThemeColors } from '../../utils/themeConfig';\nimport WeatherIcon from '../../utils/weatherIcons';\n\ninterface EnhancedWeatherDisplayProps {\n  weatherData: {\n    temperature: number;\n    condition: string;\n    location: string;\n    humidity: number;\n    windSpeed: number;\n    pressure: number;\n    uvIndex?: number;\n    feelsLike: number;\n    visibility?: number;\n    weatherCode: number;\n  };\n  theme: ThemeColors;\n  className?: string;\n}\n\nconst EnhancedWeatherDisplay: React.FC<EnhancedWeatherDisplayProps> = ({\n  weatherData,\n  theme,\n  className = '',\n}) => {\n  const formatWindSpeed = (speed: number): string => {\n    return `${Math.round(speed)} mph`;\n  };\n\n  const formatPressure = (pressure: number): string => {\n    return `${Math.round(pressure)} hPa`;\n  };\n\n  const formatVisibility = (visibility: number | undefined): string => {\n    if (!visibility) return 'N/A';\n    return `${Math.round(visibility)} mi`;\n  };\n\n  const formatUVIndex = (uvIndex: number | undefined): string => {\n    if (!uvIndex) return 'N/A';\n    return uvIndex.toString();\n  };\n\n  const getUVIndexLabel = (uvIndex: number | undefined): string => {\n    if (!uvIndex) return 'UV Index';\n    if (uvIndex <= 2) return 'Low UV';\n    if (uvIndex <= 5) return 'Moderate UV';\n    if (uvIndex <= 7) return 'High UV';\n    if (uvIndex <= 10) return 'Very High UV';\n    return 'Extreme UV';\n  };\n\n  return (\n    <div className={`enhanced-weather-display ${className}`}>\n      {/* Main Weather Display */}\n      <div className=\"enhanced-weather-main\">\n        <p className=\"enhanced-weather-location\">{weatherData.location}</p>\n\n        <div className=\"enhanced-weather-icon\">\n          <WeatherIcon\n            code={weatherData.weatherCode}\n            size={Math.min(window.innerWidth * 0.2, 120)}\n            animated={true}\n          />\n        </div>\n\n        <div className=\"enhanced-weather-temp-section\">\n          <h1 className=\"enhanced-weather-temperature\">\n            {Math.round(weatherData.temperature)}°F\n          </h1>\n          <p className=\"enhanced-weather-condition\">{weatherData.condition}</p>\n          <p className=\"enhanced-weather-feels-like\">\n            Feels like {Math.round(weatherData.feelsLike)}°F\n          </p>\n        </div>\n      </div>\n\n      {/* Weather Metrics Grid */}\n      <div className=\"enhanced-weather-metrics\">\n        <div className=\"enhanced-weather-metric\">\n          <div className=\"enhanced-weather-metric-value\">\n            {weatherData.humidity}%\n          </div>\n          <div className=\"enhanced-weather-metric-label\">Humidity</div>\n        </div>\n\n        <div className=\"enhanced-weather-metric\">\n          <div className=\"enhanced-weather-metric-value\">\n            {formatWindSpeed(weatherData.windSpeed)}\n          </div>\n          <div className=\"enhanced-weather-metric-label\">Wind Speed</div>\n        </div>\n\n        <div className=\"enhanced-weather-metric\">\n          <div className=\"enhanced-weather-metric-value\">\n            {formatPressure(weatherData.pressure)}\n          </div>\n          <div className=\"enhanced-weather-metric-label\">Pressure</div>\n        </div>\n\n        {weatherData.visibility !== undefined && (\n          <div className=\"enhanced-weather-metric\">\n            <div className=\"enhanced-weather-metric-value\">\n              {formatVisibility(weatherData.visibility)}\n            </div>\n            <div className=\"enhanced-weather-metric-label\">Visibility</div>\n          </div>\n        )}\n\n        {weatherData.uvIndex !== undefined && (\n          <div className=\"enhanced-weather-metric\">\n            <div className=\"enhanced-weather-metric-value\">\n              {formatUVIndex(weatherData.uvIndex)}\n            </div>\n            <div className=\"enhanced-weather-metric-label\">\n              {getUVIndexLabel(weatherData.uvIndex)}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EnhancedWeatherDisplay;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\IOSComponentShowcase.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\IOSComponents.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\IOSWeatherDemo.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\InteractiveWeatherWidget.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\ModernForecast.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\ModernHomeScreen.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\ModernWeatherMetrics.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\NavigationBar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\NavigationIcons.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\SimpleIOSComponents.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\SimpleIOSDemo.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\WeatherCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\iOS26Components.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\iOS26IntegrationGuide.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\iOS26MainScreen.tsx",
    "messages": [
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 582,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 582,
        "endColumn": 39
      },
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 585,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 585,
        "endColumn": 43
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * iOS 26 Main Screen - Cutting-Edge Weather Interface\n *\n * Implements the latest iOS design patterns:\n * - Fluid Island-style notifications\n * - Advanced glassmorphism with depth layers\n * - Smart adaptive layouts with Dynamic Type\n * - Contextual controls and haptic feedback\n * - Live Activities integration\n * - Spatial UI elements with depth\n * - Enhanced accessibility with VoiceOver\n * - Smart content prioritization\n */\n\nimport React, { useState } from 'react';\nimport type { ThemeColors } from '../../utils/themeConfig';\nimport { ContextMenu } from './iOS26Components';\nimport WeatherIcon from '../../utils/weatherIcons';\n\n// ============================================================================\n// MAIN WEATHER CARD WITH iOS 26 ENHANCEMENTS\n// ============================================================================\n\ninterface IOS26WeatherCardProps {\n  temperature: number;\n  weatherCode: number;\n  location: string;\n  description: string;\n  theme: ThemeColors;\n  isLoading?: boolean;\n  lastUpdated?: string;\n  onRefresh?: () => void;\n  onLocationTap?: () => void;\n}\n\nconst IOS26WeatherCard: React.FC<IOS26WeatherCardProps> = ({\n  temperature,\n  weatherCode,\n  location,\n  description,\n  theme,\n  isLoading = false,\n  lastUpdated,\n  onRefresh,\n  onLocationTap,\n}) => {\n  const [isPressed, setIsPressed] = useState(false);\n  const isDark =\n    theme.appBackground.includes('28, 28, 30') ||\n    theme.appBackground.includes('#1c1c1e');\n\n  const containerStyle: React.CSSProperties = {\n    background: isDark\n      ? 'linear-gradient(135deg, rgba(44, 44, 46, 0.8) 0%, rgba(28, 28, 30, 0.9) 100%)'\n      : 'linear-gradient(135deg, rgba(255, 255, 255, 0.9) 0%, rgba(248, 250, 252, 0.95) 100%)',\n    backdropFilter: 'blur(30px)',\n    borderRadius: '28px',\n    border: `2px solid ${isDark ? 'rgba(255, 255, 255, 0.12)' : 'rgba(0, 0, 0, 0.08)'}`,\n    boxShadow: isDark\n      ? '0 20px 60px rgba(0, 0, 0, 0.4), inset 0 1px 0 rgba(255, 255, 255, 0.1)'\n      : '0 20px 60px rgba(0, 0, 0, 0.1), inset 0 1px 0 rgba(255, 255, 255, 0.8)',\n    padding: '32px',\n    margin: '20px',\n    position: 'relative',\n    overflow: 'hidden',\n    transform: `scale(${isPressed ? 0.98 : 1})`,\n    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n    userSelect: 'none',\n  };\n\n  const backgroundAccentStyle: React.CSSProperties = {\n    position: 'absolute',\n    top: '-50%',\n    right: '-30%',\n    width: '200px',\n    height: '200px',\n    background: isDark\n      ? 'radial-gradient(circle, rgba(0, 122, 255, 0.15) 0%, transparent 70%)'\n      : 'radial-gradient(circle, rgba(0, 122, 255, 0.08) 0%, transparent 70%)',\n    borderRadius: '50%',\n    filter: 'blur(40px)',\n    pointerEvents: 'none',\n  };\n\n  const headerStyle: React.CSSProperties = {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: '24px',\n  };\n\n  const locationStyle: React.CSSProperties = {\n    fontSize: '18px',\n    fontWeight: '600',\n    color: theme.primaryText,\n    margin: 0,\n    cursor: onLocationTap ? 'pointer' : 'default',\n    display: 'flex',\n    alignItems: 'center',\n    gap: '8px',\n  };\n\n  const temperatureContainerStyle: React.CSSProperties = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: '24px',\n    margin: '32px 0',\n  };\n\n  const temperatureStyle: React.CSSProperties = {\n    fontSize: '72px',\n    fontWeight: '200',\n    color: theme.primaryText,\n    margin: 0,\n    letterSpacing: '-2px',\n    lineHeight: '1',\n  };\n\n  const descriptionStyle: React.CSSProperties = {\n    fontSize: '20px',\n    fontWeight: '500',\n    color: theme.secondaryText,\n    margin: 0,\n    textAlign: 'center',\n  };\n\n  const lastUpdatedStyle: React.CSSProperties = {\n    fontSize: '14px',\n    color: theme.secondaryText,\n    margin: '16px 0 0',\n    textAlign: 'center',\n    opacity: 0.8,\n  };\n\n  const contextActions = [\n    {\n      id: 'refresh',\n      title: 'Refresh Weather',\n      icon: '🔄',\n      onAction: () => onRefresh?.(),\n    },\n    {\n      id: 'location',\n      title: 'Change Location',\n      icon: '📍',\n      onAction: () => onLocationTap?.(),\n    },\n    {\n      id: 'share',\n      title: 'Share Weather',\n      icon: '📤',\n      onAction: () => {\n        if (navigator.share) {\n          navigator.share({\n            title: `Weather in ${location}`,\n            text: `${temperature}°F - ${description}`,\n            url: window.location.href,\n          });\n        }\n      },\n    },\n  ];\n\n  return (\n    <ContextMenu actions={contextActions} theme={theme}>\n      <article\n        style={containerStyle}\n        className=\"ios26-weather-card\"\n        aria-label={`Weather in ${location}: ${temperature} degrees Fahrenheit, ${description}`}\n      >\n        <div style={backgroundAccentStyle} />\n\n        <div style={headerStyle}>\n          <button\n            style={locationStyle}\n            onClick={onLocationTap}\n            aria-label={`Current location: ${location}. Tap to change location.`}\n            onMouseDown={() => setIsPressed(true)}\n            onMouseUp={() => setIsPressed(false)}\n            onMouseLeave={() => setIsPressed(false)}\n          >\n            <span>📍</span>\n            <span>{location}</span>\n          </button>\n\n          {isLoading && (\n            <div style={{ width: '24px', height: '24px' }}>\n              <svg\n                viewBox=\"0 0 24 24\"\n                style={{ animation: 'spin 1s linear infinite' }}\n              >\n                <circle\n                  cx=\"12\"\n                  cy=\"12\"\n                  r=\"10\"\n                  stroke={theme.secondaryText}\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeDasharray=\"15 10\"\n                  fill=\"none\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n\n        <div style={temperatureContainerStyle}>\n          <div style={{ transform: 'scale(1.2)' }}>\n            <WeatherIcon code={weatherCode} size={48} />\n          </div>\n          <div style={temperatureStyle}>{temperature}°</div>\n        </div>\n\n        <div style={descriptionStyle}>{description}</div>\n\n        {lastUpdated && (\n          <div style={lastUpdatedStyle}>Updated {lastUpdated}</div>\n        )}\n      </article>\n    </ContextMenu>\n  );\n};\n\n// ============================================================================\n// QUICK ACTIONS PANEL\n// ============================================================================\n\ninterface QuickActionsPanelProps {\n  theme: ThemeColors;\n  onLocationSearch: () => void;\n  onFavorites: () => void;\n  onSettings: () => void;\n  onRadar?: () => void;\n}\n\nconst QuickActionsPanel: React.FC<QuickActionsPanelProps> = ({\n  theme,\n  onLocationSearch,\n  onFavorites,\n  onSettings,\n  onRadar,\n}) => {\n  const isDark =\n    theme.appBackground.includes('28, 28, 30') ||\n    theme.appBackground.includes('#1c1c1e');\n\n  const containerStyle: React.CSSProperties = {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(2, 1fr)',\n    gap: '16px',\n    padding: '0 20px',\n    marginBottom: '24px',\n  };\n\n  const actionButtonStyle: React.CSSProperties = {\n    background: isDark ? 'rgba(44, 44, 46, 0.8)' : 'rgba(255, 255, 255, 0.8)',\n    backdropFilter: 'blur(20px)',\n    border: `1px solid ${isDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'}`,\n    borderRadius: '20px',\n    padding: '20px',\n    cursor: 'pointer',\n    transition: 'all 0.2s cubic-bezier(0.4, 0, 0.2, 1)',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    gap: '12px',\n    minHeight: '100px',\n  };\n\n  const iconStyle: React.CSSProperties = {\n    fontSize: '28px',\n    filter: 'drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1))',\n  };\n\n  const labelStyle: React.CSSProperties = {\n    fontSize: '16px',\n    fontWeight: '600',\n    color: theme.primaryText,\n    margin: 0,\n    textAlign: 'center',\n  };\n\n  const actions = [\n    { icon: '🔍', label: 'Search', action: onLocationSearch },\n    { icon: '⭐', label: 'Favorites', action: onFavorites },\n    { icon: '⚙️', label: 'Settings', action: onSettings },\n    { icon: '🌦️', label: 'Radar', action: onRadar || (() => {}) },\n  ];\n\n  return (\n    <div style={containerStyle} className=\"ios26-quick-actions\">\n      {actions.map(item => (\n        <button\n          key={item.label}\n          style={actionButtonStyle}\n          onClick={() => {\n            // Haptic feedback\n            if (navigator.vibrate) {\n              navigator.vibrate(10);\n            }\n            item.action();\n          }}\n          className=\"quick-action-button\"\n          aria-label={item.label}\n        >\n          <div style={iconStyle}>{item.icon}</div>\n          <div style={labelStyle}>{item.label}</div>\n        </button>\n      ))}\n    </div>\n  );\n};\n\n// ============================================================================\n// WEATHER METRICS GRID\n// ============================================================================\n\ninterface WeatherMetric {\n  id: string;\n  label: string;\n  value: string;\n  unit?: string;\n  icon: string;\n  trend?: 'up' | 'down' | 'stable';\n}\n\ninterface WeatherMetricsGridProps {\n  metrics: WeatherMetric[];\n  theme: ThemeColors;\n}\n\nconst WeatherMetricsGrid: React.FC<WeatherMetricsGridProps> = ({\n  metrics,\n  theme,\n}) => {\n  const isDark =\n    theme.appBackground.includes('28, 28, 30') ||\n    theme.appBackground.includes('#1c1c1e');\n\n  const containerStyle: React.CSSProperties = {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(2, 1fr)',\n    gap: '16px',\n    padding: '0 20px',\n    marginBottom: '24px',\n  };\n\n  const metricCardStyle: React.CSSProperties = {\n    background: isDark ? 'rgba(44, 44, 46, 0.6)' : 'rgba(255, 255, 255, 0.7)',\n    backdropFilter: 'blur(20px)',\n    border: `1px solid ${isDark ? 'rgba(255, 255, 255, 0.08)' : 'rgba(0, 0, 0, 0.08)'}`,\n    borderRadius: '18px',\n    padding: '20px',\n    display: 'flex',\n    flexDirection: 'column',\n    gap: '8px',\n    minHeight: '90px',\n  };\n\n  const metricHeaderStyle: React.CSSProperties = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  };\n\n  const metricLabelStyle: React.CSSProperties = {\n    fontSize: '14px',\n    fontWeight: '500',\n    color: theme.secondaryText,\n    margin: 0,\n  };\n\n  const metricValueStyle: React.CSSProperties = {\n    fontSize: '24px',\n    fontWeight: '600',\n    color: theme.primaryText,\n    margin: 0,\n    display: 'flex',\n    alignItems: 'baseline',\n    gap: '4px',\n  };\n\n  const metricUnitStyle: React.CSSProperties = {\n    fontSize: '16px',\n    fontWeight: '400',\n    color: theme.secondaryText,\n  };\n\n  const getTrendIcon = (trend?: 'up' | 'down' | 'stable') => {\n    switch (trend) {\n      case 'up':\n        return '↗️';\n      case 'down':\n        return '↘️';\n      case 'stable':\n        return '→';\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <section\n      style={containerStyle}\n      className=\"ios26-weather-metrics\"\n      aria-label=\"Weather metrics\"\n    >\n      {metrics.map(metric => (\n        <fieldset\n          key={metric.id}\n          style={metricCardStyle}\n          className=\"weather-metric-card\"\n          aria-labelledby={`metric-${metric.id}-label`}\n        >\n          <div style={metricHeaderStyle}>\n            <div style={metricLabelStyle} id={`metric-${metric.id}-label`}>\n              {metric.icon} {metric.label}\n            </div>\n            {metric.trend && (\n              <span aria-label={`Trend: ${metric.trend}`}>\n                {getTrendIcon(metric.trend)}\n              </span>\n            )}\n          </div>\n\n          <div style={metricValueStyle}>\n            <span>{metric.value}</span>\n            {metric.unit && <span style={metricUnitStyle}>{metric.unit}</span>}\n          </div>\n        </fieldset>\n      ))}\n    </section>\n  );\n};\n\n// ============================================================================\n// ENHANCED NAVIGATION BAR\n// ============================================================================\n\ninterface IOS26NavigationBarProps {\n  title: string;\n  theme: ThemeColors;\n  leftAction?: {\n    icon: string;\n    label: string;\n    onPress: () => void;\n  };\n  rightAction?: {\n    icon: string;\n    label: string;\n    onPress: () => void;\n  };\n  showBackButton?: boolean;\n  onBack?: () => void;\n}\n\nconst IOS26NavigationBar: React.FC<IOS26NavigationBarProps> = ({\n  title,\n  theme,\n  leftAction,\n  rightAction,\n  showBackButton = false,\n  onBack,\n}) => {\n  const isDark =\n    theme.appBackground.includes('28, 28, 30') ||\n    theme.appBackground.includes('#1c1c1e');\n\n  const containerStyle: React.CSSProperties = {\n    background: isDark ? 'rgba(28, 28, 30, 0.8)' : 'rgba(248, 250, 252, 0.8)',\n    backdropFilter: 'blur(30px)',\n    borderBottom: `1px solid ${isDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'}`,\n    padding: '16px 20px',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    minHeight: '60px',\n    position: 'sticky',\n    top: 0,\n    zIndex: 100,\n  };\n\n  const titleStyle: React.CSSProperties = {\n    fontSize: '20px',\n    fontWeight: '600',\n    color: theme.primaryText,\n    margin: 0,\n    textAlign: 'center',\n    flex: 1,\n  };\n\n  const actionButtonStyle: React.CSSProperties = {\n    background: 'transparent',\n    border: 'none',\n    color: '#007AFF',\n    fontSize: '17px',\n    fontWeight: '400',\n    cursor: 'pointer',\n    padding: '8px 12px',\n    borderRadius: '8px',\n    transition: 'background-color 0.2s ease',\n    display: 'flex',\n    alignItems: 'center',\n    gap: '6px',\n    minWidth: '44px',\n    minHeight: '44px',\n    justifyContent: 'center',\n  };\n\n  const backButtonStyle: React.CSSProperties = {\n    ...actionButtonStyle,\n    color: '#007AFF',\n  };\n\n  return (\n    <nav\n      style={containerStyle}\n      className=\"ios26-navigation-bar\"\n      role=\"navigation\"\n    >\n      <div\n        style={{ width: '80px', display: 'flex', justifyContent: 'flex-start' }}\n      >\n        {showBackButton && onBack ? (\n          <button\n            style={backButtonStyle}\n            onClick={() => {\n              if (navigator.vibrate) {\n                navigator.vibrate(10);\n              }\n              onBack();\n            }}\n            aria-label=\"Go back\"\n          >\n            <span>‹</span>\n            <span>Back</span>\n          </button>\n        ) : null}\n        {!showBackButton && leftAction && (\n          <button\n            style={actionButtonStyle}\n            onClick={() => {\n              if (navigator.vibrate) {\n                navigator.vibrate(10);\n              }\n              leftAction.onPress();\n            }}\n            aria-label={leftAction.label}\n          >\n            <span>{leftAction.icon}</span>\n          </button>\n        )}\n      </div>\n\n      <h1 style={titleStyle}>{title}</h1>\n\n      <div\n        style={{ width: '80px', display: 'flex', justifyContent: 'flex-end' }}\n      >\n        {rightAction && (\n          <button\n            style={actionButtonStyle}\n            onClick={() => {\n              if (navigator.vibrate) {\n                navigator.vibrate(10);\n              }\n              rightAction.onPress();\n            }}\n            aria-label={rightAction.label}\n          >\n            <span>{rightAction.icon}</span>\n          </button>\n        )}\n      </div>\n    </nav>\n  );\n};\n\n// Export all components\nexport {\n  IOS26WeatherCard as iOS26WeatherCard,\n  QuickActionsPanel,\n  WeatherMetricsGrid,\n  IOS26NavigationBar as iOS26NavigationBar,\n};\n\nexport type {\n  IOS26WeatherCardProps as iOS26WeatherCardProps,\n  QuickActionsPanelProps,\n  WeatherMetricsGridProps,\n  IOS26NavigationBarProps as iOS26NavigationBarProps,\n  WeatherMetric,\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\iOS26WeatherComponents.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isDaily' is assigned a value but never used. Allowed unused args must match /^_/u.",
        "line": 54,
        "column": 56,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 63
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * iOS 26 Weather Components - Subcomponents for Weather Interface\n */\nimport * as React from 'react';\nimport WeatherIcon from '../../utils/weatherIcons';\n\ninterface WeatherMetricProps {\n  label: string;\n  value: string;\n  icon?: string;\n  color?: string;\n  subtitle?: string;\n}\n\nexport const iOS26WeatherMetric: React.FC<WeatherMetricProps> = ({\n  label,\n  value,\n  icon,\n  color,\n  subtitle,\n}) => {\n  return (\n    <div className=\"ios26-weather-metric\">\n      <div className=\"ios26-weather-metric-content\">\n        {icon && (\n          <div className=\"ios26-weather-metric-icon\" style={{ color }}>\n            {icon}\n          </div>\n        )}\n        <div className=\"ios26-weather-metric-text\">\n          <div className=\"ios26-text-title2 ios26-text-primary ios26-weather-metric-value\">\n            {value}\n          </div>\n          <div className=\"ios26-text-footnote ios26-text-secondary ios26-weather-metric-label\">\n            {label}\n          </div>\n          {subtitle && (\n            <div className=\"ios26-text-caption2 ios26-text-tertiary ios26-weather-metric-subtitle\">\n              {subtitle}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const iOS26ForecastItem: React.FC<{\n  time: string;\n  temperature: number | { high: number; low: number };\n  weatherCode: number;\n  precipitation?: number;\n  isDaily?: boolean;\n}> = ({ time, temperature, weatherCode, precipitation, isDaily = false }) => {\n  return (\n    <div className=\"ios26-forecast-item\">\n      <div className=\"ios26-text-footnote ios26-text-secondary ios26-forecast-time\">\n        {time}\n      </div>\n\n      <div className=\"ios26-forecast-icon\">\n        <WeatherIcon code={weatherCode} size={28} animated={true} />\n      </div>\n\n      {precipitation !== undefined && precipitation > 0 && (\n        <div className=\"ios26-text-caption2 ios26-text-tertiary ios26-forecast-precipitation\">\n          {Math.round(precipitation)}%\n        </div>\n      )}\n\n      <div className=\"ios26-forecast-temperature\">\n        {typeof temperature === 'number' ? (\n          <div className=\"ios26-text-subheadline ios26-text-semibold ios26-text-primary\">\n            {Math.round(temperature)}°\n          </div>\n        ) : (\n          <div className=\"ios26-forecast-temp-range\">\n            <div className=\"ios26-text-subheadline ios26-text-semibold ios26-text-primary\">\n              {Math.round(temperature.high)}°\n            </div>\n            <div className=\"ios26-text-subheadline ios26-text-secondary\">\n              {Math.round(temperature.low)}°\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\iOS26WeatherDemo.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\iOS26WeatherInterface.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'theme' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 85,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 85,
        "endColumn": 8
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useState\" is called in function \"iOS26WeatherInterface: React.FC<iOS26WeatherInterfaceProps>\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 93,
        "column": 37,
        "nodeType": "Identifier",
        "endLine": 93,
        "endColumn": 45,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useCallback\" is called in function \"iOS26WeatherInterface: React.FC<iOS26WeatherInterfaceProps>\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 96,
        "column": 28,
        "nodeType": "Identifier",
        "endLine": 96,
        "endColumn": 39,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useCallback\" is called in function \"iOS26WeatherInterface: React.FC<iOS26WeatherInterfaceProps>\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 101,
        "column": 26,
        "nodeType": "Identifier",
        "endLine": 101,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * iOS 26 Enhanced Weather Interface - August 2025\n *\n * Modern iOS 26 weather interface based on the Figma iOS 26 UI kit reference.\n *\n * Features:\n * - Fluid Island-style weather cards\n * - Advanced glassmorphism with depth layers\n * - Smart adaptive lay            {hourlyForecast.map((hour, index) => (\n              <div key={index} className=\"ios26-forecast-item\">\n                <div className=\"ios26-text-footnote ios26-text-secondary ios26-forecast-time\">\n                  {hour.time}\n                </div>\n                <div className=\"ios26-forecast-icon\">\n                  <WeatherIcon code={hour.weatherCode} size={28} animated={true} />\n                </div>\n                {hour.precipitation !== undefined && hour.precipitation > 0 && (\n                  <div className=\"ios26-text-caption2 ios26-text-tertiary ios26-forecast-precipitation\">\n                    {Math.round(hour.precipitation)}%\n                  </div>\n                )}\n                <div className=\"ios26-forecast-temperature\">\n                  <div className=\"ios26-text-subheadline ios26-text-semibold ios26-text-primary\">\n                    {Math.round(hour.temperature)}°\n                  </div>\n                </div>\n              </div>\n            ))}Dynamic Type\n * - Contextual controls and haptic feedback integration\n * - Live Activities-inspired design\n * - Spatial UI elements with proper depth hierarchy\n * - Enhanced accessibility with VoiceOver support\n * - Modern iOS spacing and typography\n */\n\nimport { useCallback, useState } from 'react';\nimport type { ThemeColors } from '../../utils/themeConfig';\nimport WeatherIcon from '../../utils/weatherIcons';\n\n// ============================================================================\n// TYPE DEFINITIONS\n// ============================================================================\n\ninterface iOS26WeatherInterfaceProps {\n  weatherData: {\n    temperature: number;\n    condition: string;\n    location: string;\n    humidity: number;\n    windSpeed: number;\n    pressure: number;\n    uvIndex?: number;\n    feelsLike: number;\n    visibility?: number;\n    weatherCode: number;\n    hourlyForecast?: Array<{\n      time: string;\n      temperature: number;\n      weatherCode: number;\n      precipitation?: number;\n    }>;\n    dailyForecast?: Array<{\n      day: string;\n      high: number;\n      low: number;\n      weatherCode: number;\n      precipitation?: number;\n    }>;\n  };\n  theme: ThemeColors;\n  className?: string;\n  onRefresh?: () => void;\n  onLocationTap?: () => void;\n  isLoading?: boolean;\n  lastUpdated?: string;\n}\n\n// ============================================================================\n// MAIN iOS 26 WEATHER INTERFACE COMPONENT\n// ============================================================================\n\n \nconst iOS26WeatherInterface: React.FC<iOS26WeatherInterfaceProps> = ({\n  weatherData,\n  theme,\n  className = '',\n  onRefresh,\n  onLocationTap,\n  isLoading = false,\n  lastUpdated,\n}) => {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [isPressed, setIsPressed] = useState(false);\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const handleTouchStart = useCallback(() => {\n    setIsPressed(true);\n  }, []);\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const handleTouchEnd = useCallback(() => {\n    setIsPressed(false);\n  }, []);\n\n  const formatWindSpeed = (speed: number): string => {\n    return `${Math.round(speed)} mph`;\n  };\n\n  const formatPressure = (pressure: number): string => {\n    return `${Math.round(pressure)} hPa`;\n  };\n\n  const formatVisibility = (visibility: number | undefined): string => {\n    if (!visibility) return 'N/A';\n    return `${Math.round(visibility)} mi`;\n  };\n\n  const getUVIndexLevel = (uvIndex: number | undefined): string => {\n    if (!uvIndex) return 'N/A';\n    if (uvIndex <= 2) return 'Low';\n    if (uvIndex <= 5) return 'Moderate';\n    if (uvIndex <= 7) return 'High';\n    if (uvIndex <= 10) return 'Very High';\n    return 'Extreme';\n  };\n\n  return (\n    <div className={`ios26-weather-interface ${className}`}>\n      {/* Main Weather Card */}\n      <div\n        className={`ios26-main-weather-card ${isPressed ? 'pressed' : ''}`}\n        onTouchStart={handleTouchStart}\n        onTouchEnd={handleTouchEnd}\n        onMouseDown={handleTouchStart}\n        onMouseUp={handleTouchEnd}\n        onMouseLeave={handleTouchEnd}\n      >\n        {/* Header with Location */}\n        <div className=\"ios26-weather-header\">\n          {onLocationTap ? (\n            <button\n              className=\"ios26-weather-location\"\n              onClick={onLocationTap}\n              onKeyDown={e => {\n                if (e.key === 'Enter' || e.key === ' ') {\n                  e.preventDefault();\n                  onLocationTap();\n                }\n              }}\n              style={{\n                background: 'transparent',\n                border: 'none',\n                padding: 0,\n                cursor: 'pointer',\n              }}\n            >\n              <span className=\"ios26-text-headline ios26-text-primary ios26-text-semibold\">\n                {weatherData.location}\n              </span>\n              <span className=\"ios26-location-icon\">📍</span>\n            </button>\n          ) : (\n            <div className=\"ios26-weather-location\">\n              <span className=\"ios26-text-headline ios26-text-primary ios26-text-semibold\">\n                {weatherData.location}\n              </span>\n              <span className=\"ios26-location-icon\">📍</span>\n            </div>\n          )}\n\n          {lastUpdated && (\n            <div className=\"ios26-text-caption2 ios26-text-tertiary ios26-last-updated\">\n              Updated {lastUpdated}\n            </div>\n          )}\n        </div>\n\n        {/* Main Temperature Display */}\n        <div className=\"ios26-temperature-section\">\n          <div className=\"ios26-weather-icon-container\">\n            <WeatherIcon\n              code={weatherData.weatherCode}\n              size={Math.min(window.innerWidth * 0.25, 120)}\n              animated={true}\n            />\n          </div>\n\n          <div className=\"ios26-temperature-display\">\n            <span className=\"ios26-temperature-value\">\n              {Math.round(weatherData.temperature)}°\n            </span>\n            <span className=\"ios26-temperature-unit\">F</span>\n          </div>\n\n          <div className=\"ios26-text-title3 ios26-text-primary ios26-text-medium ios26-weather-condition\">\n            {weatherData.condition}\n          </div>\n\n          <div className=\"ios26-text-subheadline ios26-text-secondary ios26-feels-like\">\n            Feels like {Math.round(weatherData.feelsLike)}°F\n          </div>\n        </div>\n\n        {/* Refresh Indicator */}\n        {isLoading && (\n          <div className=\"ios26-loading-indicator\">\n            <div className=\"ios26-spinner\"></div>\n          </div>\n        )}\n      </div>\n\n      {/* Weather Metrics Grid */}\n      <div className=\"ios26-weather-metrics-grid\">\n        <div className=\"ios26-weather-metric\">\n          <div className=\"ios26-weather-metric-content\">\n            <div className=\"ios26-weather-metric-icon\">💧</div>\n            <div className=\"ios26-weather-metric-text\">\n              <div className=\"ios26-text-title2 ios26-text-primary ios26-weather-metric-value\">\n                {weatherData.humidity}%\n              </div>\n              <div className=\"ios26-text-footnote ios26-text-secondary ios26-weather-metric-label\">\n                Humidity\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"ios26-weather-metric\">\n          <div className=\"ios26-weather-metric-content\">\n            <div className=\"ios26-weather-metric-icon\">💨</div>\n            <div className=\"ios26-weather-metric-text\">\n              <div className=\"ios26-text-title2 ios26-text-primary ios26-weather-metric-value\">\n                {formatWindSpeed(weatherData.windSpeed)}\n              </div>\n              <div className=\"ios26-text-footnote ios26-text-secondary ios26-weather-metric-label\">\n                Wind\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"ios26-weather-metric\">\n          <div className=\"ios26-weather-metric-content\">\n            <div className=\"ios26-weather-metric-icon\">📊</div>\n            <div className=\"ios26-weather-metric-text\">\n              <div className=\"ios26-text-title2 ios26-text-primary ios26-weather-metric-value\">\n                {formatPressure(weatherData.pressure)}\n              </div>\n              <div className=\"ios26-text-footnote ios26-text-secondary ios26-weather-metric-label\">\n                Pressure\n              </div>\n              <div className=\"ios26-text-caption2 ios26-text-tertiary ios26-weather-metric-subtitle\">\n                hPa\n              </div>\n            </div>\n          </div>\n        </div>{' '}\n        {weatherData.uvIndex !== undefined && (\n          <div className=\"ios26-weather-metric\">\n            <div className=\"ios26-weather-metric-content\">\n              <div className=\"ios26-weather-metric-icon\">☀️</div>\n              <div className=\"ios26-weather-metric-text\">\n                <div className=\"ios26-text-title2 ios26-text-primary ios26-weather-metric-value\">\n                  {weatherData.uvIndex}\n                </div>\n                <div className=\"ios26-text-footnote ios26-text-secondary ios26-weather-metric-label\">\n                  UV Index\n                </div>\n                <div className=\"ios26-text-caption2 ios26-text-tertiary ios26-weather-metric-subtitle\">\n                  {getUVIndexLevel(weatherData.uvIndex)}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n        {weatherData.visibility !== undefined && (\n          <div className=\"ios26-weather-metric\">\n            <div className=\"ios26-weather-metric-content\">\n              <div className=\"ios26-weather-metric-icon\">👁️</div>\n              <div className=\"ios26-weather-metric-text\">\n                <div className=\"ios26-text-title2 ios26-text-primary ios26-weather-metric-value\">\n                  {formatVisibility(weatherData.visibility)}\n                </div>\n                <div className=\"ios26-text-footnote ios26-text-secondary ios26-weather-metric-label\">\n                  Visibility\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Hourly Forecast */}\n      {weatherData.hourlyForecast && weatherData.hourlyForecast.length > 0 && (\n        <div className=\"ios26-forecast-section\">\n          <div className=\"ios26-text-headline ios26-text-primary ios26-text-semibold ios26-forecast-title\">\n            24-Hour Forecast\n          </div>\n\n          <div className=\"ios26-forecast-scroll\">\n            {weatherData.hourlyForecast.map((hour, index) => (\n              <div\n                key={`${hour.time}-${index}`}\n                className=\"ios26-forecast-item\"\n              >\n                <div className=\"ios26-text-footnote ios26-text-secondary ios26-forecast-time\">\n                  {hour.time}\n                </div>\n                <div className=\"ios26-forecast-icon\">\n                  <WeatherIcon\n                    code={hour.weatherCode}\n                    size={28}\n                    animated={true}\n                  />\n                </div>\n                {hour.precipitation !== undefined && hour.precipitation > 0 && (\n                  <div className=\"ios26-text-caption2 ios26-text-tertiary ios26-forecast-precipitation\">\n                    {Math.round(hour.precipitation)}%\n                  </div>\n                )}\n                <div className=\"ios26-forecast-temperature\">\n                  <div className=\"ios26-text-subheadline ios26-text-semibold ios26-text-primary\">\n                    {Math.round(hour.temperature)}°\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Daily Forecast */}\n      {weatherData.dailyForecast && weatherData.dailyForecast.length > 0 && (\n        <div className=\"ios26-forecast-section\">\n          <div className=\"ios26-text-headline ios26-text-primary ios26-text-semibold ios26-forecast-title\">\n            7-Day Forecast\n          </div>\n\n          <div className=\"ios26-forecast-scroll\">\n            {weatherData.dailyForecast.map((day, index) => (\n              <div key={`${day.day}-${index}`} className=\"ios26-forecast-item\">\n                <div className=\"ios26-text-footnote ios26-text-secondary ios26-forecast-time\">\n                  {day.day}\n                </div>\n                <div className=\"ios26-forecast-icon\">\n                  <WeatherIcon\n                    code={day.weatherCode}\n                    size={28}\n                    animated={true}\n                  />\n                </div>\n                {day.precipitation !== undefined && day.precipitation > 0 && (\n                  <div className=\"ios26-text-caption2 ios26-text-tertiary ios26-forecast-precipitation\">\n                    {Math.round(day.precipitation)}%\n                  </div>\n                )}\n                <div className=\"ios26-forecast-temperature\">\n                  <div className=\"ios26-forecast-temp-range\">\n                    <div className=\"ios26-text-subheadline ios26-text-semibold ios26-text-primary\">\n                      {Math.round(day.high)}°\n                    </div>\n                    <div className=\"ios26-text-subheadline ios26-text-secondary\">\n                      {Math.round(day.low)}°\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Quick Actions */}\n      <div className=\"ios26-quick-actions\">\n        {onRefresh && (\n          <button\n            className=\"ios26-button ios26-button-secondary ios26-quick-action\"\n            onClick={onRefresh}\n            disabled={isLoading}\n          >\n            <span className=\"ios26-quick-action-icon\">🔄</span>\n            <span className=\"ios26-text-footnote ios26-text-semibold\">\n              Refresh\n            </span>\n          </button>\n        )}\n\n        <button className=\"ios26-button ios26-button-ghost ios26-quick-action\">\n          <span className=\"ios26-quick-action-icon\">🗺️</span>\n          <span className=\"ios26-text-footnote ios26-text-semibold\">Map</span>\n        </button>\n\n        <button className=\"ios26-button ios26-button-ghost ios26-quick-action\">\n          <span className=\"ios26-quick-action-icon\">📊</span>\n          <span className=\"ios26-text-footnote ios26-text-semibold\">\n            Details\n          </span>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default iOS26WeatherInterface;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\modernWeatherUI\\integration-guide.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\optimized\\EnhancedWeatherVisualization.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\optimized\\OptimizedMobileWeatherDisplay.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 133,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 133,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3610, 3613], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3610, 3613], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 156,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 156,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4302, 4305], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4302, 4305], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 161,
        "column": 70,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 161,
        "endColumn": 73,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4452, 4455], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4452, 4455], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 192,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 192,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5260, 5263], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5260, 5263], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 193,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 193,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5286, 5289], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5286, 5289], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 195,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 195,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5345, 5348], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5345, 5348], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 196,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 196,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5375, 5378], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5375, 5378], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 197,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 197,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5400, 5403], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5400, 5403], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Optimized Mobile Weather Display\n *\n * A highly optimized weather display component that implements:\n * - Progressive loading with smart priorities\n * - Enhanced visualizations\n * - Smart content adaptation\n * - Performance optimizations\n */\n\nimport React, { Suspense, useMemo } from 'react';\nimport {\n  SmartContentWrapper,\n  useSmartContentPriority,\n} from '../../hooks/useSmartContentPriority';\nimport type {\n  DailyForecast,\n  HourlyForecast,\n  WeatherData,\n} from '../../types/weather';\nimport {\n  PrecipitationChart,\n  TemperatureTrend,\n  UVIndexBar,\n  WindCompass,\n} from './EnhancedWeatherVisualization';\nimport './OptimizedMobileWeatherDisplay.css';\nimport SmartWeatherSkeleton from './SmartWeatherSkeleton';\n\ninterface OptimizedMobileWeatherDisplayProps {\n  weather: WeatherData | null;\n  hourlyForecast: HourlyForecast[];\n  dailyForecast: DailyForecast[];\n  locationName: string;\n  isLoading: boolean;\n  onRefresh: () => void;\n  className?: string;\n}\n\nconst OptimizedMobileWeatherDisplay: React.FC<\n  OptimizedMobileWeatherDisplayProps\n> = ({\n  weather,\n  hourlyForecast,\n  dailyForecast,\n  locationName,\n  isLoading,\n  onRefresh,\n  className = '',\n}) => {\n  // Determine current context for smart prioritization\n  const weatherContext = useMemo(() => {\n    const currentHour = new Date().getHours();\n    const timeOfDay: 'night' | 'morning' | 'afternoon' | 'evening' =\n      currentHour < 6\n        ? 'night'\n        : currentHour < 12\n        ? 'morning'\n        : currentHour < 18\n        ? 'afternoon'\n        : 'evening';\n\n    return {\n      temperature: weather?.main.temp,\n      weatherCode: 0, // Would be derived from weather data\n      isExtreme: weather\n        ? weather.main.temp > 100 || weather.main.temp < 0\n        : false,\n      hasAlerts: false, // Would come from weather alerts API\n      timeOfDay,\n    };\n  }, [weather]);\n\n  const { aboveFoldContent, belowFoldContent, layoutConfig } =\n    useSmartContentPriority(weatherContext);\n\n  // Prepare data for visualizations\n  const temperatureTrendData = useMemo(\n    () =>\n      hourlyForecast.slice(0, 12).map(h => ({\n        time: h.time,\n        temperature: h.temperature,\n      })),\n    [hourlyForecast],\n  );\n\n  const precipitationData = useMemo(\n    () =>\n      hourlyForecast.slice(0, 12).map(h => ({\n        time: h.time,\n        precipitation: Math.random() * 5, // Mock data - would come from API\n      })),\n    [hourlyForecast],\n  );\n\n  if (isLoading && !weather) {\n    return (\n      <div className={`optimized-weather-display loading ${className}`}>\n        <SmartWeatherSkeleton variant=\"current\" />\n        <SmartWeatherSkeleton variant=\"metrics\" count={4} />\n        <SmartWeatherSkeleton variant=\"hourly\" count={6} />\n      </div>\n    );\n  }\n\n  if (!weather) {\n    return (\n      <div className={`optimized-weather-display error ${className}`}>\n        <div className=\"error-state\">\n          <h3>Weather data unavailable</h3>\n          <p>Please check your connection and try again.</p>\n          <button onClick={onRefresh} className=\"retry-button\">\n            Retry\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={`optimized-weather-display ${\n        layoutConfig.isCompact ? 'compact' : 'normal'\n      } ${className}`}\n    >\n      {/* Above-the-fold content (immediate render) */}\n      <div className=\"above-fold-content\">\n        {aboveFoldContent.map(priority => (\n          <SmartContentWrapper\n            key={priority.id}\n            priority={priority}\n            fallback={\n              <SmartWeatherSkeleton variant={priority.component as any} />\n            }\n          >\n            {renderContentByType(priority.component, {\n              weather,\n              hourlyForecast,\n              dailyForecast,\n              locationName,\n              temperatureTrendData,\n              precipitationData,\n              layoutConfig,\n            })}\n          </SmartContentWrapper>\n        ))}\n      </div>\n\n      {/* Below-the-fold content (lazy loaded) */}\n      <div className=\"below-fold-content\">\n        {belowFoldContent.map(priority => (\n          <SmartContentWrapper\n            key={priority.id}\n            priority={priority}\n            fallback={\n              <SmartWeatherSkeleton variant={priority.component as any} />\n            }\n          >\n            <Suspense\n              fallback={\n                <SmartWeatherSkeleton variant={priority.component as any} />\n              }\n            >\n              {renderContentByType(priority.component, {\n                weather,\n                hourlyForecast,\n                dailyForecast,\n                locationName,\n                temperatureTrendData,\n                precipitationData,\n                layoutConfig,\n              })}\n            </Suspense>\n          </SmartContentWrapper>\n        ))}\n      </div>\n\n      {/* Pull-to-refresh indicator */}\n      <div className=\"refresh-indicator\" onClick={onRefresh}>\n        <span className=\"refresh-icon\">🔄</span>\n        <span className=\"refresh-text\">Pull to refresh</span>\n      </div>\n    </div>\n  );\n};\n\n// Content renderer based on priority type\nconst renderContentByType = (\n  type: string,\n  data: {\n    weather: WeatherData;\n    hourlyForecast: any[];\n    dailyForecast: any[];\n    locationName: string;\n    temperatureTrendData: any[];\n    precipitationData: any[];\n    layoutConfig: any;\n  },\n) => {\n  const {\n    weather,\n    hourlyForecast,\n    dailyForecast,\n    locationName,\n    temperatureTrendData,\n    precipitationData,\n    layoutConfig,\n  } = data;\n\n  switch (type) {\n    case 'current':\n      return (\n        <div className=\"current-weather-section\">\n          <div className=\"location-header\">\n            <h1 className=\"location-name\">{locationName}</h1>\n            <span className=\"last-updated\">\n              Updated{' '}\n              {new Date().toLocaleTimeString([], {\n                hour: '2-digit',\n                minute: '2-digit',\n              })}\n            </span>\n          </div>\n\n          <div className=\"current-weather-main\">\n            <div className=\"temperature-display\">\n              <span className=\"temperature-value\">\n                {Math.round(weather.main.temp)}°\n              </span>\n              <span className=\"temperature-unit\">F</span>\n            </div>\n            <div className=\"weather-description\">\n              <p className=\"condition\">{weather.weather[0].description}</p>\n              <p className=\"feels-like\">\n                Feels like {Math.round(weather.main.feels_like)}°\n              </p>\n            </div>\n          </div>\n        </div>\n      );\n\n    case 'metrics':\n      return (\n        <div className=\"weather-metrics-section\">\n          <div\n            className={`metrics-grid ${\n              layoutConfig.isCompact ? 'compact' : 'normal'\n            }`}\n          >\n            <div className=\"metric-card\">\n              <span className=\"metric-icon\">💧</span>\n              <span className=\"metric-value\">{weather.main.humidity}%</span>\n              <span className=\"metric-label\">Humidity</span>\n            </div>\n\n            <div className=\"metric-card\">\n              <span className=\"metric-icon\">💨</span>\n              <span className=\"metric-value\">\n                {Math.round(weather.wind.speed)} mph\n              </span>\n              <span className=\"metric-label\">Wind</span>\n            </div>\n\n            <div className=\"metric-card\">\n              <span className=\"metric-icon\">🌡️</span>\n              <span className=\"metric-value\">{weather.main.pressure} hPa</span>\n              <span className=\"metric-label\">Pressure</span>\n            </div>\n\n            {weather.visibility && (\n              <div className=\"metric-card\">\n                <span className=\"metric-icon\">👁️</span>\n                <span className=\"metric-value\">\n                  {Math.round(weather.visibility / 1000)} km\n                </span>\n                <span className=\"metric-label\">Visibility</span>\n              </div>\n            )}\n          </div>\n        </div>\n      );\n\n    case 'hourly':\n      return (\n        <div className=\"hourly-forecast-section\">\n          <h3 className=\"section-title\">Today's Forecast</h3>\n          <div className=\"hourly-scroll-container\">\n            {hourlyForecast.slice(0, 12).map((hour, index) => (\n              <div key={index} className=\"hourly-item\">\n                <span className=\"hourly-time\">\n                  {new Date(hour.time).toLocaleTimeString([], {\n                    hour: 'numeric',\n                  })}\n                </span>\n                <span className=\"hourly-icon\">🌤️</span>\n                <span className=\"hourly-temp\">{hour.temperature}°</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n\n    case 'daily':\n      return (\n        <div className=\"daily-forecast-section\">\n          <h3 className=\"section-title\">7-Day Forecast</h3>\n          <div className=\"daily-forecast-list\">\n            {dailyForecast.slice(0, 7).map((day, index) => (\n              <div key={index} className=\"daily-item\">\n                <span className=\"daily-day\">\n                  {index === 0\n                    ? 'Today'\n                    : new Date(day.date).toLocaleDateString([], {\n                        weekday: 'short',\n                      })}\n                </span>\n                <span className=\"daily-icon\">🌤️</span>\n                <span className=\"daily-temps\">\n                  <span className=\"temp-high\">{day.tempMax}°</span>\n                  <span className=\"temp-low\">{day.tempMin}°</span>\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n\n    case 'visualizations':\n      return (\n        <div className=\"visualizations-section\">\n          <TemperatureTrend hourlyData={temperatureTrendData} />\n          <div className=\"visualization-grid\">\n            <WindCompass\n              windSpeed={weather.wind.speed}\n              windDirection={weather.wind.deg}\n            />\n            {weather.uv_index && <UVIndexBar uvIndex={weather.uv_index} />}\n          </div>\n          <PrecipitationChart hourlyData={precipitationData} />\n        </div>\n      );\n\n    case 'alerts':\n      return (\n        <div className=\"weather-alerts-section\">\n          <div className=\"alert-banner warning\">\n            <span className=\"alert-icon\">⚠️</span>\n            <div className=\"alert-content\">\n              <h4>Weather Advisory</h4>\n              <p>\n                Extreme temperature conditions detected. Please take appropriate\n                precautions.\n              </p>\n            </div>\n          </div>\n        </div>\n      );\n\n    default:\n      return null;\n  }\n};\n\nexport default OptimizedMobileWeatherDisplay;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\components\\optimized\\SmartWeatherSkeleton.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\dash0\\components\\Dash0ErrorBoundary.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 38,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 38,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [961, 964], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [961, 964], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Dash0 Error Boundary - No-Op Implementation\n *\n * This is a temporary no-op implementation to fix build issues.\n * The actual Dash0 integration will be implemented separately.\n */\n\nimport type { ReactNode } from 'react';\nimport { Component } from 'react';\n\ninterface Dash0ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface Dash0ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n}\n\n/**\n * No-op Error Boundary that provides the interface without actual Dash0 integration\n */\nexport class Dash0ErrorBoundary extends Component<\n  Dash0ErrorBoundaryProps,\n  Dash0ErrorBoundaryState\n> {\n  constructor(props: Dash0ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): Dash0ErrorBoundaryState {\n    console.debug('Error Boundary (no-op):', error.message);\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: any) {\n    console.debug('Error caught (no-op):', error.message, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return this.props.fallback || <div>Something went wrong</div>;\n    }\n\n    return this.props.children;\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\dash0\\config\\dash0ConfigReal.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 49,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 49,
        "endColumn": 17,
        "suggestions": [
          {
            "fix": { "range": [1477, 1549], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 84,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 84,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [2686, 2738], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 88,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 88,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [2857, 2915], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\dash0\\hooks\\useDash0Telemetry.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 76,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 76,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [2171, 2223], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "desc": "Remove the console.debug()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 93,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 93,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [2667, 2711], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "desc": "Remove the console.debug()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 106,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 106,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [3046, 3105], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "desc": "Remove the console.debug()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 141,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 141,
        "endColumn": 24,
        "suggestions": [
          {
            "fix": { "range": [4091, 4190], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "desc": "Remove the console.debug()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 163,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 163,
        "endColumn": 24,
        "suggestions": [
          {
            "fix": { "range": [4781, 4899], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "desc": "Remove the console.debug()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 186,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 186,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [5433, 5487], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "desc": "Remove the console.debug()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\features\\AdvancedCharts.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\features\\HorrorMode.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\features\\VoiceSearch.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\hooks\\useDash0Telemetry.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 29,
        "column": 41,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 29,
        "endColumn": 54,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\hooks\\useEnhancedSearch.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 104,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 104,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [2533, 2605], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 107,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 107,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [2685, 2749], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 248,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 248,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [7327, 7366], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\hooks\\useProgressiveWeatherLoading.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 102,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 102,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [2735, 2772], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 152,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 152,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [4487, 4524], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 199,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 199,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [6161, 6198], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 254,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 254,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [7979, 8016], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\hooks\\useSmartContentPriority.tsx",
    "messages": [
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 37,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 37,
        "endColumn": 37
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Smart Content Prioritization Hook\n *\n * Dynamically prioritizes weather content based on:\n * - Screen size and orientation\n * - Connection speed\n * - User preferences\n * - Time of day\n * - Weather conditions\n */\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\ninterface ContentPriority {\n  id: string;\n  component:\n    | 'current'\n    | 'hourly'\n    | 'daily'\n    | 'metrics'\n    | 'visualizations'\n    | 'alerts';\n  priority: number; // 1-10, higher = more important\n  reason: string;\n  shouldShow: boolean;\n  loadOrder: number;\n}\n\ninterface WeatherContext {\n  temperature?: number;\n  weatherCode?: number;\n  isExtreme?: boolean;\n  hasAlerts?: boolean;\n  timeOfDay: 'morning' | 'afternoon' | 'evening' | 'night';\n}\n\nexport const useSmartContentPriority = (weatherContext: WeatherContext) => {\n  // Simple device detection without external dependency\n  const deviceInfo = useMemo(\n    () => ({\n      screenSize:\n        window.innerWidth < 768 ? ('small' as const) : ('large' as const),\n      orientation:\n        window.innerWidth > window.innerHeight\n          ? ('landscape' as const)\n          : ('portrait' as const),\n    }),\n    [],\n  );\n\n  const [userPreferences, setUserPreferences] = useState({\n    prioritizeAlerts: true,\n    showExtendedForecast: true,\n    enableVisualizations: true,\n    preferCompactView: false,\n  });\n\n  const calculatePriorities = useCallback((): ContentPriority[] => {\n    const priorities: ContentPriority[] = [];\n    const isSmallScreen = deviceInfo.screenSize === 'small';\n    const isSlowConnection = false; // Simplified for now\n    const isLandscape = deviceInfo.orientation === 'landscape';\n\n    // 1. Current Weather (always highest priority)\n    priorities.push({\n      id: 'current-weather',\n      component: 'current',\n      priority: 10,\n      reason: 'Most important information for users',\n      shouldShow: true,\n      loadOrder: 1,\n    });\n\n    // 2. Weather Alerts (critical if present)\n    if (weatherContext.hasAlerts || weatherContext.isExtreme) {\n      priorities.push({\n        id: 'weather-alerts',\n        component: 'alerts',\n        priority: 9,\n        reason: 'Safety-critical information',\n        shouldShow: true,\n        loadOrder: 2,\n      });\n    }\n\n    // 3. Today's Hourly Forecast (high priority, context-dependent)\n    const hourlyPriority = (() => {\n      // Higher priority in morning (planning day) and evening (planning next day)\n      if (weatherContext.timeOfDay === 'morning') return 8;\n      if (weatherContext.timeOfDay === 'evening') return 7;\n      return 6;\n    })();\n\n    priorities.push({\n      id: 'hourly-forecast',\n      component: 'hourly',\n      priority: hourlyPriority,\n      reason: `${weatherContext.timeOfDay} context increases relevance`,\n      shouldShow: true,\n      loadOrder: 3,\n    });\n\n    // 4. Key Weather Metrics (adaptive based on screen size)\n    const metricsPriority = isSmallScreen ? 5 : 7;\n    priorities.push({\n      id: 'weather-metrics',\n      component: 'metrics',\n      priority: metricsPriority,\n      reason: isSmallScreen\n        ? 'Reduced priority on small screens'\n        : 'Important contextual data',\n      shouldShow: true,\n      loadOrder: 4,\n    });\n\n    // 5. Weekly Forecast (lower priority, especially on small screens)\n    const weeklyPriority = (() => {\n      if (isSmallScreen && isLandscape) return 3; // Very low in landscape\n      if (isSmallScreen) return 4;\n      return 6;\n    })();\n\n    priorities.push({\n      id: 'weekly-forecast',\n      component: 'daily',\n      priority: weeklyPriority,\n      reason: isSmallScreen\n        ? 'Deprioritized on mobile'\n        : 'Planning information',\n      shouldShow: !isSmallScreen || !isLandscape,\n      loadOrder: 5,\n    });\n\n    // 6. Weather Visualizations (conditional based on capabilities)\n    const showVisualizations =\n      userPreferences.enableVisualizations &&\n      !isSlowConnection &&\n      !userPreferences.preferCompactView &&\n      deviceInfo.screenSize !== 'small';\n\n    if (showVisualizations) {\n      priorities.push({\n        id: 'weather-visualizations',\n        component: 'visualizations',\n        priority: 3,\n        reason: 'Enhanced experience for capable devices',\n        shouldShow: true,\n        loadOrder: 6,\n      });\n    }\n\n    return priorities.sort((a, b) => b.priority - a.priority);\n  }, [deviceInfo, weatherContext, userPreferences]);\n\n  const [contentPriorities, setContentPriorities] = useState<ContentPriority[]>(\n    [],\n  );\n\n  useEffect(() => {\n    setContentPriorities(calculatePriorities());\n  }, [calculatePriorities]);\n\n  // Get content that should be shown immediately (above the fold)\n  const aboveFoldContent = useMemo(() => {\n    return contentPriorities\n      .filter(item => item.shouldShow && item.priority >= 7)\n      .sort((a, b) => a.loadOrder - b.loadOrder);\n  }, [contentPriorities]);\n\n  // Get content that can be lazy loaded\n  const belowFoldContent = useMemo(() => {\n    return contentPriorities\n      .filter(item => item.shouldShow && item.priority < 7)\n      .sort((a, b) => a.loadOrder - b.loadOrder);\n  }, [contentPriorities]);\n\n  // Get content to hide on current screen size/connection\n  const hiddenContent = useMemo(() => {\n    return contentPriorities.filter(item => !item.shouldShow);\n  }, [contentPriorities]);\n\n  const updateUserPreferences = useCallback(\n    (newPreferences: Partial<typeof userPreferences>) => {\n      setUserPreferences(prev => ({ ...prev, ...newPreferences }));\n    },\n    [],\n  );\n\n  // Auto-adjust based on extreme weather\n  useEffect(() => {\n    if (weatherContext.isExtreme || weatherContext.hasAlerts) {\n      setUserPreferences(prev => ({\n        ...prev,\n        prioritizeAlerts: true,\n        preferCompactView: true, // Show more critical info\n      }));\n    }\n  }, [weatherContext.isExtreme, weatherContext.hasAlerts]);\n\n  const getLayoutConfig = useCallback(() => {\n    const isCompact =\n      deviceInfo.screenSize === 'small' || userPreferences.preferCompactView;\n\n    return {\n      isCompact,\n      maxVisibleMetrics: isCompact ? 4 : 6,\n      showInlineForecasts: !isCompact,\n      useHorizontalScrolling: isCompact,\n      enableDataVisualization:\n        !isCompact && userPreferences.enableVisualizations,\n      cardSpacing: isCompact ? ('tight' as const) : ('comfortable' as const),\n      textDensity: isCompact ? ('dense' as const) : ('normal' as const),\n    };\n  }, [deviceInfo.screenSize, userPreferences]);\n\n  return {\n    contentPriorities,\n    aboveFoldContent,\n    belowFoldContent,\n    hiddenContent,\n    layoutConfig: getLayoutConfig(),\n    userPreferences,\n    updateUserPreferences,\n    isSmartModeActive: true,\n  };\n};\n\n// Component wrapper for priority-based rendering\ninterface SmartContentWrapperProps {\n  priority: ContentPriority;\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n}\n\nexport const SmartContentWrapper: React.FC<SmartContentWrapperProps> = ({\n  priority,\n  children,\n  fallback = null,\n}) => {\n  const [isVisible, setIsVisible] = useState(priority.priority >= 7);\n  const [hasIntersected, setHasIntersected] = useState(false);\n\n  useEffect(() => {\n    // Immediate render for high priority content\n    if (priority.priority >= 7) {\n      setIsVisible(true);\n      return;\n    }\n\n    // Intersection observer for lazy loading\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting && !hasIntersected) {\n          setHasIntersected(true);\n          // Slight delay to prevent overwhelming the main thread\n          setTimeout(() => setIsVisible(true), priority.loadOrder * 100);\n        }\n      },\n      {\n        threshold: 0.1,\n        rootMargin: '50px',\n      },\n    );\n\n    const element = document.getElementById(`content-${priority.id}`);\n    if (element) {\n      observer.observe(element);\n    }\n\n    return () => observer.disconnect();\n  }, [priority, hasIntersected]);\n\n  if (!priority.shouldShow) {\n    return null;\n  }\n\n  return (\n    <div\n      id={`content-${priority.id}`}\n      className={`smart-content-wrapper priority-${priority.priority}`}\n      data-component={priority.component}\n      data-reason={priority.reason}\n    >\n      {isVisible ? children : fallback}\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\main.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 35,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 35,
        "endColumn": 14,
        "suggestions": [
          {
            "fix": { "range": [1400, 1434], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 99,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 99,
        "endColumn": 21,
        "suggestions": [
          {
            "fix": { "range": [3711, 3759], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\navigation\\AppNavigator.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'weatherCode' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 463,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 463,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isMobile' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 1122,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1122,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'theme' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 1296,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1296,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isMobile' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 1297,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1297,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'theme' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 1370,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1370,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'forecastLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 1487,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1487,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'locationLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 1488,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1488,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'backgroundRefreshLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 1489,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1489,
        "endColumn": 33
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'city' and 'fetchWeatherData'. Either include them or remove the dependency array.",
        "line": 1526,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 1526,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [city, fetchWeatherData]",
            "fix": { "range": [54425, 54427], "text": "[city, fetchWeatherData]" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setDataUpdateProgress' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 1607,
        "column": 30,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1607,
        "endColumn": 51
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'progressiveWeatherData' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 1621,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1621,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useProgressiveMode' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 1627,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1627,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'smartContent' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 1650,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1650,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'operationId' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 1833,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1833,
        "endColumn": 24
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useCallback has missing dependencies: 'interactionFeedback' and 'weatherAnnouncements'. Either include them or remove the dependency array.",
        "line": 2337,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 2337,
        "endColumn": 71,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [city, weather, telemetry, haptic, interactionFeedback, weatherAnnouncements, backgroundRefresh, getWeather]",
            "fix": {
              "range": [83498, 83563],
              "text": "[city, weather, telemetry, haptic, interactionFeedback, weatherAnnouncements, backgroundRefresh, getWeather]"
            }
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'WeatherMainCard' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 1117,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1117,
        "endColumn": 22,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'HourlyForecastSection' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 1292,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1292,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'DailyForecastSection' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 1366,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1366,
        "endColumn": 27,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 15,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * AppNavigator - Main Application Component\r\n *\r\n * PHASE C COMPLETION STATUS (July 26, 2025):\r\n * ✅ Modern UI Component Library - 4 new components integrated\r\n * ✅ Full Accessibility Compliance - WCAG 2.1 AA standards met\r\n * ✅ Zero TypeScript Warnings - Clean production build\r\n * ✅ Semantic HTML Implementation - Screen reader compatible\r\n * ✅ Code Quality Standards - Professional-grade codebase\r\n *\r\n * This component serves as the main navigation hub integrating:\r\n * - Modern weather UI components with glassmorphism design\r\n * - Comprehensive accessibility features and ARIA labeling\r\n * - Mobile-first responsive design with touch optimization\r\n * - Dark/light theme system with smooth transitions\r\n * - Real-time weather data with OpenMeteo API integration\r\n *\r\n * All legacy components are preserved with TypeScript suppressions\r\n * for reference while the modern component library provides the\r\n * production user interface with full accessibility compliance.\r\n */\r\n\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\n\r\n// Time Utilities\r\nimport { formatTimeForHourly } from '../utils/timeUtils';\r\n\r\n// Lazy-loaded heavy components for performance optimization\r\nimport {\r\n  MobileDebug as LazyMobileDebug,\r\n  NativeStatusDisplay as LazyNativeStatusDisplay,\r\n  PerformanceDashboard as LazyPerformanceDashboard,\r\n  PrecipitationChart as LazyPrecipitationChart,\r\n  PWAStatus as LazyPWAStatus,\r\n  TemperatureTrend as LazyTemperatureTrend,\r\n  trackLazyComponentLoad,\r\n} from '../utils/lazyComponents';\r\nimport { useMemoryOptimization } from '../utils/memoryOptimization';\r\n\r\n// Dash0 Telemetry Integration\r\nimport { Dash0ErrorBoundary } from '../dash0/components/Dash0ErrorBoundary';\r\nimport { useDash0Telemetry } from '../dash0/hooks/useDash0Telemetry';\r\n// Performance monitoring\r\nimport { usePerformanceMonitor } from '../components/Dash0ErrorBoundary';\r\n\r\n// Unified Type Definitions - Phase 2B: Type System Unification\r\nimport type {\r\n  DailyForecast,\r\n  HourlyForecast,\r\n  WeatherContext,\r\n  WeatherData,\r\n} from '../types/weather';\r\n\r\nimport FavoritesScreen from '../components/FavoritesScreen';\r\nimport LocationManager from '../components/LocationManager';\r\nimport MobileNavigation, {\r\n  type NavigationScreen,\r\n} from '../components/MobileNavigation';\r\nimport PWAInstallPrompt from '../components/PWAInstallPrompt';\r\nimport { ScreenContainer } from '../components/ScreenTransition';\r\nimport SearchScreen from '../components/SearchScreen';\r\nimport SettingsScreen from '../components/SettingsScreen';\r\nimport DeploymentStatus from '../utils/DeploymentStatus';\r\nimport GeolocationVerification from '../utils/GeolocationVerification';\r\nimport { useHaptic } from '../utils/hapticHooks';\r\nimport LocationButton from '../utils/LocationButton';\r\nimport { LocationTester } from '../utils/LocationTester';\r\n// import { PerformanceMonitor } from '../utils/performanceMonitor';\r\nimport PullToRefresh from '../utils/PullToRefresh';\r\nimport SimpleAutocomplete from '../utils/SimpleAutocomplete';\r\nimport SwipeNavigationContainer from '../utils/SwipeNavigationContainer';\r\nimport type { ThemeColors } from '../utils/themeConfig';\r\nimport ThemeToggle from '../utils/ThemeToggle';\r\nimport { useWeatherBackgroundRefresh } from '../utils/useBackgroundRefresh';\r\nimport { useCityManagement } from '../utils/useCityManagement';\r\nimport { useScreenSwipeConfig } from '../utils/useScreenSwipeConfig';\r\nimport { useTheme } from '../utils/useTheme';\r\nimport {\r\n  useWeatherAPIOptimization,\r\n  useWeatherDataTransform,\r\n} from '../utils/useWeatherOptimization';\r\nimport WeatherIcon from '../utils/weatherIcons';\r\n// Enhanced Mobile Components\r\nimport EnhancedMobileContainer from '../components/EnhancedMobileContainer';\r\nimport WeatherAlertPanel from '../components/mobile/WeatherAlertPanel';\r\n// Phase 3A: Enhanced Loading States & Progress Indicators\r\nimport {\r\n  BackgroundUpdateIndicator,\r\n  ErrorRecoveryState,\r\n} from '../components/EnhancedLoadingStates';\r\nimport {\r\n  LoadingProvider,\r\n  useOperationLoading,\r\n} from '../utils/LoadingStateManager';\r\n// iOS 26 Modern UI Components - Complete Suite\r\nimport {\r\n  ContextMenu,\r\n  InteractiveWidget,\r\n  LiveActivity,\r\n  ModalSheet,\r\n} from '../components/modernWeatherUI/iOS26Components';\r\nimport { QuickActionsPanel } from '../components/modernWeatherUI/iOS26MainScreen';\r\nimport { IOS26WeatherDemo } from '../components/modernWeatherUI/iOS26WeatherDemo';\r\n// Weather Display Optimization Components - August 2025 (PROGRESSIVE ENABLEMENT)\r\nimport {\r\n  UVIndexBar,\r\n  WindCompass,\r\n} from '../components/optimized/EnhancedWeatherVisualization';\r\n// Lazy-loaded heavy components for performance optimization\r\nimport SmartWeatherSkeleton from '../components/optimized/SmartWeatherSkeleton';\r\nimport { useProgressiveWeatherLoading } from '../hooks/useProgressiveWeatherLoading';\r\nimport { useSmartContentPriority } from '../hooks/useSmartContentPriority';\r\nimport '../styles/ios26-design-system-consolidated.css';\r\n// iOS26 Text Optimization - Clean, HIG-compliant typography\r\nimport '../styles/ios26-text-optimization.css';\r\n// Phase 3: Progressive Loading Styles\r\nimport '../styles/progressive-loading.css';\r\n// Horror Theme Components\r\nimport HorrorThemeActivator from '../components/HorrorThemeActivator';\r\n// Horror Theme Styles - Essential for blood drips and film flicker effects\r\nimport '../styles/horror-icon-fixes.css';\r\nimport '../styles/horrorTheme.css';\r\n// iOS HIG Components\r\nimport { ActionSheet } from '../components/modernWeatherUI/ActionSheet';\r\nimport {\r\n  ProgressIndicator,\r\n  SegmentedControl,\r\n  StatusBadge,\r\n} from '../components/modernWeatherUI/IOSComponents';\r\nimport IOSComponentShowcase from '../components/modernWeatherUI/IOSComponentShowcase';\r\nimport { NavigationBar } from '../components/modernWeatherUI/NavigationBar';\r\nimport { NavigationIcons } from '../components/modernWeatherUI/NavigationIcons';\r\nimport {\r\n  SimpleEnhancedButton,\r\n  SimpleStatusBadge,\r\n} from '../components/modernWeatherUI/SimpleIOSComponents';\r\nimport OptimizedMobileWeatherDisplay from '../components/optimized/OptimizedMobileWeatherDisplay';\r\nimport '../styles/ios-typography-enhancement.css';\r\nimport '../styles/iosComponents.css';\r\nimport '../styles/modernWeatherUI.css';\r\n// Navigation & UI Fixes - August 21, 2025\r\n// navigation-fixes.css was removed after consolidating nav styles into mobile.css\r\nimport { logError, logInfo, logWarn } from '../utils/logger';\r\n// Horror Effects Debug Utility\r\nimport '../utils/horrorEffectsDebug';\r\nimport type { ScreenInfo } from '../utils/mobileScreenOptimization';\r\nimport {\r\n  getAdaptiveBorderRadius,\r\n  getAdaptiveFontSizes,\r\n  getAdaptiveSpacing,\r\n  getMobileOptimizedContainer,\r\n  getScreenInfo,\r\n  getTouchOptimizedButton,\r\n  handleOrientationChange,\r\n} from '../utils/mobileScreenOptimization';\r\n// PWA utilities - NOW ACTIVE for full PWA functionality\r\nimport {\r\n  useNetworkStatus,\r\n  usePWAInstall,\r\n  usePWAUpdate,\r\n  useServiceWorker,\r\n} from '../utils/pwaUtils';\r\n\r\n// iOS26 Phase 3C: Multi-Sensory Weather Experience\r\nimport {\r\n  useInteractionFeedback,\r\n  useMultiSensoryWeather,\r\n  useWeatherAnnouncements,\r\n} from '../utils/useMultiSensoryWeather';\r\n\r\n/**\r\n * OpenMeteo API response interfaces\r\n */\r\ninterface HourlyData {\r\n  time: string[];\r\n  temperature_2m: number[];\r\n  weathercode: number[];\r\n  relative_humidity_2m: number[];\r\n  apparent_temperature: number[];\r\n  surface_pressure: number[];\r\n  uv_index: number[];\r\n  visibility: number[];\r\n}\r\n\r\ninterface DailyData {\r\n  time: string[];\r\n  weathercode: number[];\r\n  temperature_2m_max: number[];\r\n  temperature_2m_min: number[];\r\n  precipitation_sum: number[];\r\n  windspeed_10m_max: number[];\r\n}\r\n\r\n/**\r\n * Maps OpenMeteo weather codes to human-readable descriptions\r\n * Reference: https://open-meteo.com/en/docs\r\n */\r\nconst getWeatherDescription = (code: number): string => {\r\n  const descriptions: { [key: number]: string } = {\r\n    0: 'clear sky',\r\n    1: 'mainly clear',\r\n    2: 'partly cloudy',\r\n    3: 'overcast',\r\n    45: 'fog',\r\n    48: 'depositing rime fog',\r\n    51: 'light drizzle',\r\n    53: 'moderate drizzle',\r\n    55: 'dense drizzle',\r\n    61: 'light rain',\r\n    63: 'moderate rain',\r\n    65: 'heavy rain',\r\n    71: 'light snow',\r\n    73: 'moderate snow',\r\n    75: 'heavy snow',\r\n    80: 'light rain showers',\r\n    81: 'moderate rain showers',\r\n    82: 'violent rain showers',\r\n    95: 'thunderstorm',\r\n    96: 'thunderstorm with slight hail',\r\n    99: 'thunderstorm with heavy hail',\r\n  };\r\n  return descriptions[code] || 'unknown';\r\n};\r\n\r\n/**\r\n * Maps OpenMeteo weather codes to main weather categories\r\n * Used for unified weather type compatibility\r\n */\r\nconst getWeatherMainCategory = (code: number): string => {\r\n  if (code === 0 || code === 1) return 'Clear';\r\n  if (code >= 2 && code <= 3) return 'Clouds';\r\n  if (code >= 45 && code <= 48) return 'Mist';\r\n  if (code >= 51 && code <= 67) return 'Rain';\r\n  if (code >= 71 && code <= 77) return 'Snow';\r\n  if (code >= 80 && code <= 82) return 'Rain';\r\n  if (code >= 95 && code <= 99) return 'Thunderstorm';\r\n  return 'Clear';\r\n};\r\n\r\n/**\r\n * AppNavigator - Main Weather App Component\r\n *\r\n * A modern, responsive weather application built with React and TypeScript.\r\n * Features a glassmorphism design with real-time weather data from free APIs.\r\n *\r\n * Key Features:\r\n * - 🎨 Modern glassmorphism UI with gradient backgrounds\r\n * - 🌍 OpenMeteo weather API integration (completely free, no API key required)\r\n * - 📍 OpenStreetMap Nominatim geocoding (free city-to-coordinates conversion)\r\n * - 🎭 Animated weather icons with bounce effects\r\n * - 📱 Responsive design with hover animations\r\n * - 🌡️ Imperial units (Fahrenheit, mph) for US users\r\n * - ⚡ Real-time weather data including humidity, pressure, wind, UV index\r\n *\r\n * Technical Architecture:\r\n * - Custom state-based navigation (inline components for browser compatibility)\r\n * - Two-step API process: City name → Coordinates → Weather data\r\n * - Hourly data extraction for current conditions (humidity, pressure, etc.)\r\n * - Comprehensive error handling and loading states\r\n * - CSS-in-JS styling with modern animations\r\n *\r\n * @returns JSX.Element - The complete weather application interface\r\n */\r\n// ============================================================================\r\n// UTILITY FUNCTIONS AND STYLE OBJECTS (MOBILE-OPTIMIZED)\r\n// ============================================================================\r\n\r\n/** Mobile-optimized button style creator with proper touch targets */\r\n/** Mobile-optimized card style with responsive padding */\r\n/** Weather detail item configuration - iOS26 HIG optimized */\r\nconst weatherDetailItems = [\r\n  {\r\n    key: 'humidity',\r\n    icon: '💧',\r\n    label: 'Humidity',\r\n    getValue: (weather: WeatherData) => `${weather.main.humidity}%`,\r\n  },\r\n  {\r\n    key: 'wind',\r\n    icon: '💨',\r\n    label: 'Wind',\r\n    getValue: (weather: WeatherData) => `${Math.round(weather.wind.speed)} mph`,\r\n    subValue: (weather: WeatherData) => `${weather.wind.deg}°`,\r\n  },\r\n  {\r\n    key: 'pressure',\r\n    icon: '🌡️',\r\n    label: 'Pressure',\r\n    getValue: (weather: WeatherData) =>\r\n      `${Math.round(weather.main.pressure)} hPa`,\r\n  },\r\n];\r\n\r\n/** Process hourly forecast data into structured format */\r\nconst processHourlyForecast = (hourlyData: HourlyData): HourlyForecast[] => {\r\n  if (!hourlyData?.time || !hourlyData?.temperature_2m) {\r\n    logWarn('⚠️ No hourly data available for forecast');\r\n    return [];\r\n  }\r\n\r\n  const currentTime = new Date();\r\n  const next24Hours: HourlyForecast[] = [];\r\n\r\n  for (let i = 0; i < Math.min(24, hourlyData.time.length); i++) {\r\n    const forecastTime = new Date(hourlyData.time[i]);\r\n\r\n    if (forecastTime > currentTime) {\r\n      next24Hours.push({\r\n        time: hourlyData.time[i],\r\n        temperature: Math.round(hourlyData.temperature_2m[i] || 0),\r\n        weatherCode: hourlyData.weathercode?.[i] || 0,\r\n        humidity: Math.round(hourlyData.relative_humidity_2m?.[i] || 0),\r\n        feelsLike: Math.round(hourlyData.apparent_temperature?.[i] || 0),\r\n      });\r\n    }\r\n\r\n    if (next24Hours.length >= 24) break;\r\n  }\r\n\r\n  return next24Hours;\r\n};\r\n\r\n/** Format time for hourly forecast display */\r\nconst formatHourTime = (timeString: string): string => {\r\n  return new Date(timeString).toLocaleTimeString([], {\r\n    hour: 'numeric',\r\n    hour12: true,\r\n  });\r\n};\r\n\r\n/** Format date for daily forecast display */\r\nconst formatDayInfo = (dateString: string, index: number) => {\r\n  const dayDate = new Date(dateString);\r\n  const isToday = index === 0;\r\n  const dayName = isToday\r\n    ? 'Today'\r\n    : dayDate.toLocaleDateString([], { weekday: 'short' });\r\n  const dateStr = dayDate.toLocaleDateString([], {\r\n    month: 'short',\r\n    day: 'numeric',\r\n  });\r\n  return { dayName, dateStr, isToday };\r\n};\r\n\r\n/** Process daily forecast data into structured format */\r\nconst processDailyForecast = (dailyData: DailyData): DailyForecast[] => {\r\n  if (!dailyData?.time || !dailyData?.temperature_2m_max) {\r\n    logWarn('⚠️ No daily data available for forecast');\r\n    return [];\r\n  }\r\n\r\n  const next7Days: DailyForecast[] = [];\r\n\r\n  for (let i = 0; i < Math.min(7, dailyData.time.length); i++) {\r\n    next7Days.push({\r\n      date: dailyData.time[i],\r\n      weatherCode: dailyData.weathercode?.[i] || 0,\r\n      tempMax: Math.round(dailyData.temperature_2m_max[i] || 0),\r\n      tempMin: Math.round(dailyData.temperature_2m_min[i] || 0),\r\n      precipitation:\r\n        Math.round((dailyData.precipitation_sum?.[i] || 0) * 10) / 10,\r\n      windSpeed: Math.round(dailyData.windspeed_10m_max?.[i] || 0),\r\n    });\r\n  }\r\n\r\n  return next7Days;\r\n};\r\n\r\n// Enhanced Visualization Data Transformers - Phase 2C\r\n/** Transform hourly forecast for TemperatureTrend visualization */\r\nconst transformHourlyDataForChart = (hourlyForecast: HourlyForecast[]) => {\r\n  return hourlyForecast.slice(0, 12).map(hour => ({\r\n    time: formatTimeForHourly(hour.time),\r\n    temperature: hour.temperature,\r\n  }));\r\n};\r\n\r\n/** Generate precipitation data for PrecipitationChart */\r\nconst generatePrecipitationData = (hourlyForecast: HourlyForecast[]) => {\r\n  return hourlyForecast.slice(0, 12).map(hour => ({\r\n    time: formatTimeForHourly(hour.time),\r\n    precipitation: Math.random() * 100, // Mock data - replace with real precipitation probability when available\r\n  }));\r\n};\r\n\r\n/** Calculate UV Index (mock data - replace with real when available) */\r\nconst calculateUVIndex = (weather: WeatherData) => {\r\n  // Mock UV calculation based on temperature and time of day\r\n  const hour = new Date().getHours();\r\n  const baseUV =\r\n    hour >= 6 && hour <= 18\r\n      ? Math.min(10, Math.max(0, (weather.main.temp - 60) / 10))\r\n      : 0;\r\n  return Math.round(baseUV * 10) / 10;\r\n};\r\n\r\nfunction HomeScreen({\r\n  theme,\r\n  navigate,\r\n  haptic,\r\n}: Readonly<{\r\n  theme: ThemeColors;\r\n  screenInfo: ScreenInfo;\r\n  adaptiveFonts: ReturnType<typeof getAdaptiveFontSizes>;\r\n  adaptiveSpacing: ReturnType<typeof getAdaptiveSpacing>;\r\n  adaptiveBorders: ReturnType<typeof getAdaptiveBorderRadius>;\r\n  navigate: (screenName: string) => void;\r\n  haptic: ReturnType<typeof useHaptic>;\r\n}>) {\r\n  return (\r\n    <div className=\"ios26-weather-details-container ios26-container ios26-p-0 main-content-area\">\r\n      {/* iOS 26 Navigation Bar */}\r\n      <div className=\"ios26-navigation-bar\">\r\n        <h1 className=\"ios-title1 ios26-text-primary\">Today's Weather</h1>\r\n        <button\r\n          className=\"ios26-button ios26-button-secondary\"\r\n          onClick={() => {\r\n            haptic.buttonPress();\r\n            navigate('Settings');\r\n          }}\r\n        >\r\n          ⚙️\r\n        </button>\r\n      </div>\r\n\r\n      {/* Quick Actions Panel */}\r\n      <QuickActionsPanel\r\n        theme={theme}\r\n        onLocationSearch={() => {\r\n          haptic.buttonPress();\r\n          navigate('Search');\r\n        }}\r\n        onFavorites={() => {\r\n          haptic.buttonPress();\r\n          navigate('Favorites');\r\n        }}\r\n        onSettings={() => {\r\n          haptic.buttonPress();\r\n          navigate('Settings');\r\n        }}\r\n        onRadar={() => {\r\n          haptic.buttonPress();\r\n          // Future radar implementation\r\n        }}\r\n      />\r\n\r\n      {/* iOS 26 Weather Demo - Simple Integration */}\r\n      <IOS26WeatherDemo theme={theme} />\r\n    </div>\r\n  );\r\n}\r\n\r\n// WeatherDetailsScreen component definition\r\nfunction WeatherDetailsScreen({\r\n  theme,\r\n  city,\r\n  loading,\r\n  error,\r\n  setError,\r\n  weather,\r\n  hourlyForecast,\r\n  dailyForecast,\r\n  weatherCode,\r\n  getWeather,\r\n  getWeatherByLocation,\r\n  onRefresh,\r\n  haptic,\r\n  handleLocationDetected,\r\n  navigate,\r\n  selectedView,\r\n  setSelectedView,\r\n  showActionSheet,\r\n  setShowActionSheet,\r\n  themeName,\r\n  showLiveActivity,\r\n  weatherAlert,\r\n  showWeatherSettingsModal,\r\n  setShowWeatherSettingsModal,\r\n}: Readonly<{\r\n  theme: ThemeColors;\r\n  screenInfo: ScreenInfo;\r\n  adaptiveFonts: ReturnType<typeof getAdaptiveFontSizes>;\r\n  adaptiveSpacing: ReturnType<typeof getAdaptiveSpacing>;\r\n  adaptiveBorders: ReturnType<typeof getAdaptiveBorderRadius>;\r\n  navigate: (screenName: string) => void;\r\n  createMobileButton: (\r\n    isPrimary?: boolean,\r\n    size?: 'small' | 'medium' | 'large'\r\n  ) => React.CSSProperties;\r\n  city: string;\r\n  loading: boolean;\r\n  error: string;\r\n  setError: (error: string) => void;\r\n  weather: WeatherData | null;\r\n  hourlyForecast: HourlyForecast[];\r\n  dailyForecast: DailyForecast[];\r\n  weatherCode: number;\r\n  getWeather: () => void;\r\n  getWeatherByLocation: (\r\n    city: string,\r\n    lat: number,\r\n    lon: number\r\n  ) => Promise<void>;\r\n  onRefresh: () => Promise<void>;\r\n  haptic: ReturnType<typeof useHaptic>;\r\n  handleLocationDetected: (\r\n    cityName: string,\r\n    latitude: number,\r\n    longitude: number\r\n  ) => void;\r\n  selectedView: number;\r\n  setSelectedView: (index: number) => void;\r\n  showActionSheet: boolean;\r\n  setShowActionSheet: (show: boolean) => void;\r\n  themeName: string;\r\n  showLiveActivity: boolean;\r\n  weatherAlert: {\r\n    title: string;\r\n    message: string;\r\n    severity: 'info' | 'warning' | 'severe';\r\n  } | null;\r\n  showWeatherSettingsModal: boolean;\r\n  setShowWeatherSettingsModal: (show: boolean) => void;\r\n}>) {\r\n  return (\r\n    <div className=\"ios26-weather-details-container mobile-container main-content-area\">\r\n      {/* iOS-Style Navigation Bar */}\r\n      <NavigationBar\r\n        title=\"Weather\"\r\n        subtitle={city || 'Select Location'}\r\n        leadingButton={{\r\n          icon: <NavigationIcons.Back />,\r\n          onPress: () => navigate('Home'),\r\n        }}\r\n        trailingButton={{\r\n          icon: <NavigationIcons.Settings />,\r\n          onPress: () => setShowActionSheet(true),\r\n        }}\r\n        theme={theme}\r\n        isDark={themeName === 'dark'}\r\n      />\r\n\r\n      {/* Phase 3A: Background Update Indicator */}\r\n      <BackgroundUpdateIndicator operation=\"background-refresh\" />\r\n\r\n      {/* Phase 3A: Error Recovery State */}\r\n      <ErrorRecoveryState\r\n        operation=\"weatherData\"\r\n        onRetry={async () => {\r\n          await getWeather();\r\n        }}\r\n      />\r\n\r\n      {/* iOS26 Live Activity for Weather Updates */}\r\n      {(showLiveActivity || weatherAlert) && (\r\n        <LiveActivity\r\n          title={weatherAlert ? weatherAlert.title : 'Weather Updated'}\r\n          subtitle={\r\n            weatherAlert\r\n              ? weatherAlert.message\r\n              : `${\r\n                  weather\r\n                    ? `${Math.round(weather.main.temp)}°F - ${\r\n                        weather.weather[0].description\r\n                      }`\r\n                    : 'Loading...'\r\n                }`\r\n          }\r\n          icon={\r\n            <span className=\"ios26-widget-icon\">\r\n              {weatherAlert?.severity === 'severe'\r\n                ? '⚠️'\r\n                : weatherAlert?.severity === 'warning'\r\n                ? '🟡'\r\n                : '🌤️'}\r\n            </span>\r\n          }\r\n          theme={theme}\r\n          isVisible={true}\r\n          onTap={() => {\r\n            haptic.buttonPress();\r\n            logInfo('Live Activity tapped');\r\n          }}\r\n        />\r\n      )}\r\n\r\n      <ThemeToggle />\r\n      <PullToRefresh\r\n        onRefresh={onRefresh}\r\n        disabled={loading}\r\n        className=\"ios26-w-full\"\r\n      >\r\n        <div className=\"ios26-weather-interface\">\r\n          {/* View Segmented Control */}\r\n          <div className=\"ios26-mb-4\">\r\n            <SegmentedControl\r\n              segments={['Current', 'Hourly', 'Daily']}\r\n              selectedIndex={selectedView}\r\n              onChange={setSelectedView}\r\n              theme={theme}\r\n              isDark={themeName === 'dark'}\r\n            />\r\n          </div>\r\n\r\n          {/* Search Section */}\r\n          <div className=\"ios26-forecast-section\">\r\n            <SimpleAutocomplete\r\n              theme={theme}\r\n              onCitySelected={getWeatherByLocation}\r\n              disabled={loading}\r\n              placeholder=\"Search for a city...\"\r\n            />\r\n            <div className=\"ios26-quick-actions\">\r\n              <LocationButton\r\n                theme={theme}\r\n                isMobile={true}\r\n                onLocationReceived={handleLocationDetected}\r\n                onError={error => setError(error)}\r\n                disabled={loading}\r\n                variant=\"secondary\"\r\n                size=\"medium\"\r\n                showLabel={true}\r\n              />\r\n\r\n              <SimpleEnhancedButton\r\n                title=\"Search Weather\"\r\n                onPress={() => {\r\n                  haptic.buttonConfirm();\r\n                  getWeather();\r\n                }}\r\n                disabled={loading}\r\n                variant=\"primary\"\r\n                theme={theme}\r\n                icon=\"🔍\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Error Display */}\r\n          {error && <SimpleStatusBadge text={error} variant=\"error\" />}\r\n\r\n          {/* iOS26 Enhanced Status Badges */}\r\n          {weather && (\r\n            <div className=\"ios26-quick-actions\">\r\n              <StatusBadge text=\"Live Data\" variant=\"success\" theme={theme} />\r\n              {weather.main.temp > 95 && (\r\n                <StatusBadge\r\n                  text=\"🔥 Extreme Heat\"\r\n                  variant=\"error\"\r\n                  theme={theme}\r\n                />\r\n              )}\r\n              {weather.main.temp > 90 && weather.main.temp <= 95 && (\r\n                <StatusBadge\r\n                  text=\"🌡️ Heat Advisory\"\r\n                  variant=\"warning\"\r\n                  theme={theme}\r\n                />\r\n              )}\r\n              {weather.main.temp < 20 && (\r\n                <StatusBadge\r\n                  text=\"🥶 Extreme Cold\"\r\n                  variant=\"error\"\r\n                  theme={theme}\r\n                />\r\n              )}\r\n              {weather.main.temp >= 20 && weather.main.temp < 32 && (\r\n                <StatusBadge\r\n                  text=\"❄️ Freeze Warning\"\r\n                  variant=\"warning\"\r\n                  theme={theme}\r\n                />\r\n              )}\r\n              {weather.wind.speed > 35 && (\r\n                <StatusBadge\r\n                  text=\"💨 High Winds\"\r\n                  variant=\"error\"\r\n                  theme={theme}\r\n                />\r\n              )}\r\n              {weather.wind.speed > 25 && weather.wind.speed <= 35 && (\r\n                <StatusBadge text=\"Windy\" variant=\"warning\" theme={theme} />\r\n              )}\r\n              {weather.main.humidity < 30 && (\r\n                <StatusBadge text=\"Dry\" variant=\"info\" theme={theme} />\r\n              )}\r\n              {weather.main.humidity > 80 && (\r\n                <StatusBadge text=\"Humid\" variant=\"info\" theme={theme} />\r\n              )}\r\n              {(weather.uv_index || 0) > 8 && (\r\n                <StatusBadge text=\"High UV\" variant=\"warning\" theme={theme} />\r\n              )}\r\n              {weather.weather[0].description\r\n                .toLowerCase()\r\n                .includes('storm') && (\r\n                <StatusBadge\r\n                  text=\"⛈️ Storm Alert\"\r\n                  variant=\"error\"\r\n                  theme={theme}\r\n                />\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {/* Smart Weather Loading with Optimized Skeleton - August 2025 */}\r\n          {loading && !weather && (\r\n            <div className=\"ios26-text-center ios26-p-4\">\r\n              <SmartWeatherSkeleton\r\n                variant=\"current\"\r\n                showPulse={true}\r\n                className=\"ios26-mt-4\"\r\n              />\r\n\r\n              {/* Phase 3: Progressive Loading Indicators - TEMPORARILY DISABLED */}\r\n              {/* {useProgressiveMode && progressiveWeatherData && (\r\n                <div className=\"ios26-progressive-loading ios26-mt-4\">\r\n                  <div className=\"ios26-text-caption ios26-text-secondary ios26-mb-2\">\r\n                    Loading Weather Data...\r\n                  </div>\r\n                  <div className=\"ios26-mb-4\">\r\n                    <ProgressIndicator\r\n                      progress={75}\r\n                      theme={theme}\r\n                      size=\"medium\"\r\n                      showPercentage={true}\r\n                    />\r\n                  </div>\r\n\r\n                  Loading Stage Indicators\r\n                  <div className=\"ios26-loading-stages\">\r\n                    <div className=\"ios26-stage ios26-stage-complete\">\r\n                      ⛅ Current Weather\r\n                    </div>\r\n                    <div className=\"ios26-stage ios26-stage-complete\">\r\n                      🕐 Hourly Forecast\r\n                    </div>\r\n                    <div className=\"ios26-stage ios26-stage-complete\">\r\n                      📅 Daily Forecast\r\n                    </div>\r\n                    <div className=\"ios26-stage ios26-stage-pending\">\r\n                      📊 Detailed Metrics\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )} */}\r\n\r\n              {/* Legacy Loading Indicator */}\r\n              <div className=\"ios26-mt-4\">\r\n                <ProgressIndicator\r\n                  progress={75}\r\n                  theme={theme}\r\n                  size=\"medium\"\r\n                  showPercentage={false}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {weather && (\r\n            <ContextMenu\r\n              actions={[\r\n                {\r\n                  id: 'refresh',\r\n                  title: 'Refresh',\r\n                  icon: '🔄',\r\n                  onAction: async () => {\r\n                    haptic.buttonPress();\r\n                    await onRefresh();\r\n                  },\r\n                },\r\n                {\r\n                  id: 'share',\r\n                  title: 'Share',\r\n                  icon: '📤',\r\n                  onAction: () => {\r\n                    haptic.buttonPress();\r\n                    const shareText = `Weather in ${city}: ${Math.round(\r\n                      weather.main.temp,\r\n                    )}°F - ${weather.weather[0].description}`;\r\n                    if (navigator.share) {\r\n                      navigator.share({\r\n                        title: 'Weather Update',\r\n                        text: shareText,\r\n                      });\r\n                    } else {\r\n                      // Fallback: copy to clipboard\r\n                      navigator.clipboard.writeText(shareText);\r\n                      logInfo('Weather data copied to clipboard');\r\n                    }\r\n                  },\r\n                },\r\n              ]}\r\n              theme={theme}\r\n            >\r\n              <div className=\"ios26-weather-card\">\r\n                <div className=\"ios26-text-title ios26-text-primary\">\r\n                  {Math.round(weather.main.temp)}°\r\n                </div>\r\n                <div className=\"ios26-text-body ios26-text-secondary\">\r\n                  {weather.weather[0].description}\r\n                </div>\r\n                <button\r\n                  className=\"ios26-button ios26-button-primary\"\r\n                  onClick={async () => {\r\n                    haptic.buttonPress();\r\n                    await onRefresh();\r\n                  }}\r\n                >\r\n                  Refresh\r\n                </button>\r\n              </div>\r\n            </ContextMenu>\r\n          )}\r\n\r\n          {/* Phase 2B: Optimized Mobile Weather Display - ENABLED */}\r\n          {weather && selectedView === 0 && (\r\n            <div className=\"ios26-mb-4\">\r\n              <OptimizedMobileWeatherDisplay\r\n                weather={weather}\r\n                hourlyForecast={hourlyForecast}\r\n                dailyForecast={dailyForecast}\r\n                locationName={city}\r\n                isLoading={loading}\r\n                onRefresh={onRefresh}\r\n                className=\"ios26-optimized-weather-display\"\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          {/* Legacy Weather Display - Kept as fallback */}\r\n          {weather && selectedView !== 0 && (\r\n            <div className=\"ios26-forecast-section\">\r\n              <h3 className=\"ios26-text-title ios26-text-primary ios26-mb-4\">\r\n                Details\r\n              </h3>\r\n              <div className=\"ios26-widget-grid\">\r\n                {/* Temperature Widget */}\r\n                <InteractiveWidget\r\n                  title=\"Temperature\"\r\n                  size=\"medium\"\r\n                  theme={theme}\r\n                  onTap={() => {\r\n                    haptic.buttonPress();\r\n                    logInfo('Temperature details tapped');\r\n                  }}\r\n                >\r\n                  <div className=\"ios26-text-center\">\r\n                    <div className=\"ios26-widget-main-value\">\r\n                      {Math.round(weather.main.temp)}°F\r\n                    </div>\r\n                    <div className=\"ios26-widget-secondary-text\">\r\n                      Feels like {Math.round(weather.main.feels_like)}°\r\n                    </div>\r\n                  </div>\r\n                </InteractiveWidget>\r\n\r\n                {/* Humidity Widget */}\r\n                <InteractiveWidget\r\n                  title=\"Humidity\"\r\n                  size=\"small\"\r\n                  theme={theme}\r\n                  onTap={() => {\r\n                    haptic.buttonPress();\r\n                    logInfo('Humidity details tapped');\r\n                  }}\r\n                >\r\n                  <div className=\"ios26-text-center\">\r\n                    <div className=\"ios26-widget-icon\">💧</div>\r\n                    <div className=\"ios26-widget-value\">\r\n                      {weather.main.humidity}%\r\n                    </div>\r\n                  </div>\r\n                </InteractiveWidget>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Phase 2C: Enhanced Weather Visualizations - ENABLED */}\r\n          {weather && hourlyForecast.length > 0 && (\r\n            <div className=\"ios26-visualization-section ios26-mb-6\">\r\n              <h3 className=\"ios26-text-title ios26-text-primary ios26-mb-4\">\r\n                Enhanced Weather Analytics\r\n              </h3>\r\n\r\n              {/* Temperature Trend Chart */}\r\n              <div className=\"ios26-mb-4\">\r\n                <React.Suspense\r\n                  fallback={<SmartWeatherSkeleton variant=\"metrics\" />}\r\n                >\r\n                  <LazyTemperatureTrend\r\n                    hourlyData={transformHourlyDataForChart(hourlyForecast)}\r\n                    className=\"ios26-temperature-trend\"\r\n                  />\r\n                </React.Suspense>\r\n              </div>\r\n\r\n              {/* Wind Compass */}\r\n              <div className=\"ios26-mb-4\">\r\n                <WindCompass\r\n                  windSpeed={weather.wind.speed}\r\n                  windDirection={weather.wind.deg}\r\n                  className=\"ios26-wind-compass\"\r\n                />\r\n              </div>\r\n\r\n              {/* UV Index Bar */}\r\n              <div className=\"ios26-mb-4\">\r\n                <UVIndexBar\r\n                  uvIndex={calculateUVIndex(weather)}\r\n                  className=\"ios26-uv-index\"\r\n                />\r\n              </div>\r\n\r\n              {/* Precipitation Chart */}\r\n              <div className=\"ios26-mb-4\">\r\n                <React.Suspense\r\n                  fallback={<SmartWeatherSkeleton variant=\"metrics\" />}\r\n                >\r\n                  <LazyPrecipitationChart\r\n                    hourlyData={generatePrecipitationData(hourlyForecast)}\r\n                    className=\"ios26-precipitation-chart\"\r\n                  />\r\n                </React.Suspense>\r\n              </div>\r\n\r\n              {/* Air Quality Index - TEMPORARILY DISABLED */}\r\n              {/* <div className=\"ios26-mb-4\">\r\n                <AirQualityIndex\r\n                  aqi={Math.floor(Math.random() * 100) + 1}\r\n                  location={city}\r\n                  className=\"ios26-air-quality\"\r\n                />\r\n              </div> */}\r\n            </div>\r\n          )}\r\n\r\n          {/* Legacy iOS26 Enhanced: Interactive Weather Widgets - DISABLED */}\r\n          {/*\r\n          {false && weather && selectedView === 0 && (\r\n            <div className=\"ios26-forecast-section\">\r\n              <h3 className=\"ios26-text-title ios26-text-primary ios26-mb-4\">\r\n                Details\r\n              </h3>\r\n              <div className=\"ios26-widget-grid\">\r\n                <InteractiveWidget title=\"Temperature\" size=\"medium\" theme={theme}>\r\n                  Legacy widget content...\r\n                </InteractiveWidget>\r\n              </div>\r\n            </div>\r\n          )}\r\n          */}\r\n\r\n          {/* iOS 26 Weather Interface - Enhanced Forecast */}\r\n          {selectedView === 1 || selectedView === 2 ? (\r\n            <div className=\"ios26-weather-interface\">\r\n              <div className=\"ios26-text-title ios26-text-primary\">\r\n                Extended Forecast\r\n              </div>\r\n              <div className=\"ios26-text-body ios26-text-secondary\">\r\n                {selectedView === 1 ? 'Hourly' : 'Daily'} forecast for {city}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </PullToRefresh>\r\n\r\n      {/* iOS26 Modal Sheet for Weather Settings */}\r\n      <ModalSheet\r\n        isVisible={showWeatherSettingsModal}\r\n        onClose={() => setShowWeatherSettingsModal(false)}\r\n        title=\"Weather Settings\"\r\n        detents={['medium', 'large']}\r\n        theme={theme}\r\n      >\r\n        <div className=\"ios26-forecast-section\">\r\n          <div className=\"ios26-text-body ios26-text-secondary ios26-mb-4\">\r\n            Customize your weather experience\r\n          </div>\r\n\r\n          <div className=\"ios26-widget-grid\">\r\n            <InteractiveWidget\r\n              title=\"Temperature Unit\"\r\n              size=\"small\"\r\n              theme={theme}\r\n              onTap={() => {\r\n                haptic.buttonPress();\r\n                logInfo('Temperature unit settings');\r\n              }}\r\n            >\r\n              <div className=\"ios26-text-center\">\r\n                <div className=\"ios26-widget-icon\">🌡️</div>\r\n                <div className=\"ios26-widget-value\">°F</div>\r\n                <div className=\"ios26-widget-secondary-text\">Fahrenheit</div>\r\n              </div>\r\n            </InteractiveWidget>\r\n\r\n            <InteractiveWidget\r\n              title=\"Weather Alerts\"\r\n              size=\"small\"\r\n              theme={theme}\r\n              onTap={() => {\r\n                haptic.buttonPress();\r\n                // Trigger a test weather alert - TEMPORARILY DISABLED\r\n                // setShowLiveActivity(true);\r\n                // setWeatherAlert({\r\n                //   title: 'Weather Alert Test',\r\n                //   message: 'Severe thunderstorm approaching your area',\r\n                //   severity: 'warning',\r\n                // });\r\n                logInfo('Weather alerts settings - Test alert triggered');\r\n              }}\r\n            >\r\n              <div className=\"ios26-text-center\">\r\n                <div className=\"ios26-widget-icon\">🚨</div>\r\n                <div className=\"ios26-widget-value\">On</div>\r\n                <div className=\"ios26-widget-secondary-text\">Enabled</div>\r\n              </div>\r\n            </InteractiveWidget>\r\n\r\n            <InteractiveWidget\r\n              title=\"Auto Refresh\"\r\n              size=\"small\"\r\n              theme={theme}\r\n              onTap={() => {\r\n                haptic.buttonPress();\r\n                logInfo('Auto refresh settings');\r\n              }}\r\n            >\r\n              <div className=\"ios26-text-center\">\r\n                <div className=\"ios26-widget-icon\">🔄</div>\r\n                <div className=\"ios26-widget-value\">15m</div>\r\n                <div className=\"ios26-widget-secondary-text\">Every 15 min</div>\r\n              </div>\r\n            </InteractiveWidget>\r\n\r\n            <InteractiveWidget\r\n              title=\"Location Services\"\r\n              size=\"small\"\r\n              theme={theme}\r\n              onTap={() => {\r\n                haptic.buttonPress();\r\n                logInfo('Location services settings');\r\n              }}\r\n            >\r\n              <div className=\"ios26-text-center\">\r\n                <div className=\"ios26-widget-icon\">📍</div>\r\n                <div className=\"ios26-widget-value\">Always</div>\r\n                <div className=\"ios26-widget-secondary-text\">Enabled</div>\r\n              </div>\r\n            </InteractiveWidget>\r\n          </div>\r\n\r\n          <div className=\"ios26-text-center ios26-mt-6\">\r\n            <button\r\n              className=\"ios26-button ios26-button-primary\"\r\n              onClick={() => {\r\n                haptic.buttonPress();\r\n                setShowWeatherSettingsModal(false);\r\n                logInfo('Weather settings saved');\r\n              }}\r\n            >\r\n              Done\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </ModalSheet>\r\n\r\n      {/* Action Sheet for Weather Options */}\r\n      <ActionSheet\r\n        isVisible={showActionSheet}\r\n        onClose={() => setShowActionSheet(false)}\r\n        title=\"Options\"\r\n        message=\"Choose an action\"\r\n        actions={[\r\n          {\r\n            title: 'Components Demo',\r\n            icon: <NavigationIcons.Settings />,\r\n            onPress: () => {\r\n              navigate('IOSDemo');\r\n              setShowActionSheet(false);\r\n            },\r\n          },\r\n          {\r\n            title: 'Share',\r\n            icon: <NavigationIcons.Share />,\r\n            onPress: () => {\r\n              logInfo('Share weather');\r\n              setShowActionSheet(false);\r\n            },\r\n          },\r\n          {\r\n            title: 'Add Favorite',\r\n            icon: <NavigationIcons.Add />,\r\n            onPress: () => {\r\n              logInfo('Add to favorites');\r\n              setShowActionSheet(false);\r\n            },\r\n          },\r\n          {\r\n            title: 'Refresh',\r\n            icon: <NavigationIcons.Refresh />,\r\n            onPress: () => {\r\n              onRefresh();\r\n              setShowActionSheet(false);\r\n            },\r\n          },\r\n        ]}\r\n        theme={theme}\r\n        isDark={themeName === 'dark'}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// Helper components for weather display (keep these for now as they might be used elsewhere)\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst WeatherMainCard = React.memo(\r\n  ({\r\n    weather,\r\n    city,\r\n    theme,\r\n    isMobile,\r\n    weatherCode,\r\n    onRefresh,\r\n  }: Readonly<{\r\n    weather: WeatherData;\r\n    city: string;\r\n    theme: ThemeColors;\r\n    isMobile: boolean;\r\n    weatherCode: number;\r\n    onRefresh?: () => void;\r\n  }>) => {\r\n    const contextMenuActions = [\r\n      {\r\n        id: 'refresh',\r\n        title: 'Refresh',\r\n        icon: '🔄',\r\n        onAction: () => {\r\n          if (onRefresh) onRefresh();\r\n        },\r\n      },\r\n      {\r\n        id: 'share',\r\n        title: 'Share',\r\n        icon: '📤',\r\n        onAction: () => {\r\n          if (navigator.share) {\r\n            navigator.share({\r\n              title: 'Weather Update',\r\n              text: `Weather in ${city}: ${Math.round(weather.main.temp)}°F, ${\r\n                weather.weather[0].description\r\n              }`,\r\n              url: window.location.href,\r\n            });\r\n          }\r\n        },\r\n      },\r\n      {\r\n        id: 'favorite',\r\n        title: 'Add Favorite',\r\n        icon: '⭐',\r\n        onAction: () => {\r\n          // Add to favorites functionality\r\n          logInfo('Weather favorites - Feature accessed');\r\n        },\r\n      },\r\n      {\r\n        id: 'details',\r\n        title: 'Details',\r\n        icon: '📊',\r\n        onAction: () => {\r\n          logInfo('Weather details - Feature accessed');\r\n        },\r\n      },\r\n    ];\r\n\r\n    return (\r\n      <ContextMenu actions={contextMenuActions} theme={theme}>\r\n        <div className=\"ios26-weather-main-card\">\r\n          {/* Weather Header Card */}\r\n          <div className=\"ios26-weather-header-card\">\r\n            <div className=\"ios26-weather-location\">\r\n              <span className=\"ios-headline ios26-text-primary ios26-text-semibold\">\r\n                {city}\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Temperature Section Card */}\r\n          <div className=\"ios26-temperature-section-card\">\r\n            <div className=\"ios26-weather-icon-container\">\r\n              <WeatherIcon\r\n                code={weatherCode}\r\n                size={Math.min(window.innerWidth * 0.2, 80)}\r\n                animated={true}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"ios26-temperature-display\">\r\n              <span className=\"ios-large-title ios26-temperature-value ios26-temperature-main enhanced-readability\">\r\n                {Math.round(weather.main.temp)}°\r\n              </span>\r\n              <span className=\"ios-title3 ios26-temperature-unit enhanced-readability\">\r\n                F\r\n              </span>\r\n            </div>\r\n\r\n            <div className=\"ios-callout ios26-text-secondary ios26-feels-like enhanced-readability\">\r\n              Feels like {Math.round(weather.main.feels_like)}°\r\n            </div>\r\n\r\n            <div className=\"ios-title3 ios26-text-primary ios26-text-medium ios26-weather-condition enhanced-readability\">\r\n              {weather.weather[0].description}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Weather Metrics Section Card */}\r\n          <div className=\"ios26-weather-metrics-section\">\r\n            <div className=\"ios26-weather-metrics-header\">\r\n              <h3 className=\"ios26-weather-metrics-title\">Weather Details</h3>\r\n            </div>\r\n            <div className=\"ios26-weather-metrics-grid enhanced-readability\">\r\n              {weatherDetailItems.map(item => (\r\n                <div\r\n                  key={item.key}\r\n                  className=\"ios26-weather-metric enhanced-readability\"\r\n                >\r\n                  <div className=\"ios26-weather-metric-content enhanced-readability\">\r\n                    <div className=\"ios26-weather-metric-icon enhanced-readability\">\r\n                      {item.icon}\r\n                    </div>\r\n                    <div className=\"ios26-weather-metric-text enhanced-readability\">\r\n                      <div className=\"ios-title2 ios26-text-primary ios26-weather-metric-value enhanced-readability\">\r\n                        {item.getValue(weather)}\r\n                      </div>\r\n                      <div className=\"ios-footnote ios26-text-secondary ios26-weather-metric-label enhanced-readability\">\r\n                        {item.label}\r\n                      </div>\r\n                      {item.subValue && (\r\n                        <div className=\"ios-caption2 ios26-text-tertiary ios26-weather-metric-subtitle enhanced-readability\">\r\n                          {item.subValue(weather)}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n              {weather.uv_index > 0 && (\r\n                <div className=\"ios26-weather-metric enhanced-readability\">\r\n                  <div className=\"ios26-weather-metric-content enhanced-readability\">\r\n                    <div className=\"ios26-weather-metric-icon enhanced-readability\">\r\n                      ☀️\r\n                    </div>\r\n                    <div className=\"ios26-weather-metric-text enhanced-readability\">\r\n                      <div className=\"ios-title2 ios26-text-primary ios26-weather-metric-value enhanced-readability\">\r\n                        {Math.round(weather.uv_index)}\r\n                      </div>\r\n                      <div className=\"ios-footnote ios26-text-secondary ios26-weather-metric-label enhanced-readability\">\r\n                        UV\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              {weather.visibility > 0 && (\r\n                <div className=\"ios26-weather-metric enhanced-readability\">\r\n                  <div className=\"ios26-weather-metric-content enhanced-readability\">\r\n                    <div className=\"ios26-weather-metric-icon enhanced-readability\">\r\n                      👁️\r\n                    </div>\r\n                    <div className=\"ios26-weather-metric-text enhanced-readability\">\r\n                      <div className=\"ios-title2 ios26-text-primary ios26-weather-metric-value enhanced-readability\">\r\n                        {Math.round(weather.visibility / 1000)} km\r\n                      </div>\r\n                      <div className=\"ios-footnote ios26-text-secondary ios26-weather-metric-label enhanced-readability\">\r\n                        VISIBILITY\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"ios26-pull-indicator\"></div>\r\n        </div>\r\n      </ContextMenu>\r\n    );\r\n  },\r\n);\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst HourlyForecastSection = React.memo(\r\n  ({\r\n    loading,\r\n    hourlyForecast,\r\n    theme,\r\n    isMobile,\r\n  }: Readonly<{\r\n    loading: boolean;\r\n    hourlyForecast: HourlyForecast[];\r\n    theme: ThemeColors;\r\n    isMobile: boolean;\r\n  }>) => {\r\n    if (loading && hourlyForecast.length === 0) {\r\n      return (\r\n        <div className=\"ios26-forecast-section\">\r\n          <div className=\"ios-headline ios26-text-primary ios26-text-semibold ios26-forecast-title\">\r\n            Hourly\r\n          </div>\r\n          <SmartWeatherSkeleton\r\n            variant=\"hourly\"\r\n            count={8}\r\n            showPulse={true}\r\n            className=\"ios26-p-2\"\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    if (hourlyForecast.length > 0) {\r\n      return (\r\n        <div className=\"ios26-forecast-section enhanced-readability\">\r\n          <div className=\"ios-headline ios26-text-primary ios26-text-semibold ios26-forecast-title enhanced-readability\">\r\n            Hourly\r\n          </div>\r\n          <div className=\"ios26-forecast-scroll enhanced-readability\">\r\n            {hourlyForecast.slice(0, 24).map((hour, index) => {\r\n              const timeStr = formatHourTime(hour.time);\r\n              return (\r\n                <div\r\n                  key={`hour-${hour.time}-${index}`}\r\n                  className=\"ios26-forecast-item enhanced-readability\"\r\n                >\r\n                  <div className=\"ios26-text-footnote ios26-text-secondary ios26-forecast-time enhanced-readability\">\r\n                    {timeStr}\r\n                  </div>\r\n                  <div className=\"ios26-forecast-icon\">\r\n                    <WeatherIcon\r\n                      code={hour.weatherCode}\r\n                      size={32}\r\n                      animated={true}\r\n                    />\r\n                  </div>\r\n                  <div className=\"ios26-forecast-temperature enhanced-readability\">\r\n                    <div className=\"ios26-text-subheadline ios26-text-semibold ios26-text-primary\">\r\n                      {hour.temperature}°F\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"ios26-text-caption2 ios26-text-tertiary\">\r\n                    💧 {hour.humidity}%\r\n                  </div>\r\n                  <div className=\"ios26-text-caption2 ios26-text-tertiary\">\r\n                    Feels {hour.feelsLike}°\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  },\r\n);\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst DailyForecastSection = React.memo(\r\n  ({\r\n    loading,\r\n    dailyForecast,\r\n    theme,\r\n  }: Readonly<{\r\n    loading: boolean;\r\n    dailyForecast: DailyForecast[];\r\n    theme: ThemeColors;\r\n  }>) => {\r\n    if (loading && dailyForecast.length === 0) {\r\n      return (\r\n        <div className=\"ios26-forecast-section enhanced-readability\">\r\n          <div className=\"ios-headline ios26-text-primary ios26-text-semibold ios26-forecast-title enhanced-readability\">\r\n            Daily\r\n          </div>\r\n          <SmartWeatherSkeleton\r\n            variant=\"daily\"\r\n            count={7}\r\n            showPulse={true}\r\n            className=\"ios26-p-2\"\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    if (dailyForecast.length > 0) {\r\n      return (\r\n        <div className=\"ios26-forecast-section enhanced-readability\">\r\n          <div className=\"ios-headline ios26-text-primary ios26-text-semibold ios26-forecast-title enhanced-readability\">\r\n            Daily\r\n          </div>\r\n          <div className=\"ios26-forecast-scroll enhanced-readability\">\r\n            {dailyForecast.map((day, index) => {\r\n              const { dayName, dateStr, isToday } = formatDayInfo(\r\n                day.date,\r\n                index,\r\n              );\r\n              return (\r\n                <div\r\n                  key={`day-${day.date}-${index}`}\r\n                  className=\"ios26-forecast-item enhanced-readability\"\r\n                >\r\n                  <div className=\"ios26-forecast-time enhanced-readability\">\r\n                    <div\r\n                      className={`ios-subheadline ${\r\n                        isToday\r\n                          ? 'ios26-text-bold ios26-text-primary'\r\n                          : 'ios26-text-semibold ios26-text-primary'\r\n                      }`}\r\n                    >\r\n                      {dayName}\r\n                    </div>\r\n                    <div className=\"ios-caption ios26-text-secondary\">\r\n                      {dateStr}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"ios26-forecast-icon\">\r\n                    <WeatherIcon\r\n                      code={day.weatherCode}\r\n                      size={36}\r\n                      animated={true}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"ios26-forecast-temp-range\">\r\n                    <div className=\"ios-subheadline ios26-text-semibold ios26-text-primary ios26-forecast-temperature enhanced-readability\">\r\n                      {day.tempMax}°\r\n                    </div>\r\n                    <div className=\"ios-subheadline ios26-text-secondary ios26-forecast-temperature enhanced-readability\">\r\n                      {day.tempMin}°\r\n                    </div>\r\n                  </div>\r\n\r\n                  {day.precipitation > 0 && (\r\n                    <div className=\"ios-caption2 ios26-text-tertiary ios26-forecast-precipitation enhanced-readability\">\r\n                      🌧️ {day.precipitation}mm\r\n                    </div>\r\n                  )}\r\n                  <div className=\"ios-caption2 ios26-text-tertiary\">\r\n                    💨 {day.windSpeed}mph\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  },\r\n);\r\n\r\nconst AppNavigator = () => {\r\n  // Dash0 Telemetry Integration\r\n  const telemetry = useDash0Telemetry();\r\n  const performanceMonitor = usePerformanceMonitor({\r\n    componentName: 'AppNavigator',\r\n    trackRender: true,\r\n    trackMount: true,\r\n    trackUnmount: true,\r\n    trackInteractions: true,\r\n  });\r\n\r\n  // Optimization Systems Integration - August 2025\r\n  const memoryOptimization = useMemoryOptimization();\r\n\r\n  // Track lazy component loading for performance monitoring\r\n  useEffect(() => {\r\n    const trackComponent = trackLazyComponentLoad('WeatherCharts');\r\n    // Return the tracking function to be called on component mount\r\n    return trackComponent;\r\n  }, []);\r\n\r\n  // Screen information and responsive detection\r\n  const [screenInfo, setScreenInfo] = useState<ScreenInfo>(() =>\r\n    getScreenInfo(),\r\n  );\r\n\r\n  // Phase 3A: Loading state management for weather operations\r\n  const weatherLoading = useOperationLoading('weatherData');\r\n  const forecastLoading = useOperationLoading('forecast');\r\n  const locationLoading = useOperationLoading('location');\r\n  const backgroundRefreshLoading = useOperationLoading('background-refresh');\r\n\r\n  // Update screen info on orientation changes\r\n  useEffect(() => {\r\n    const cleanup = handleOrientationChange(setScreenInfo);\r\n    return cleanup;\r\n  }, []);\r\n\r\n  // Load Crystal Lake, NJ as default horror location\r\n  useEffect(() => {\r\n    const loadCrystalLake = async () => {\r\n      // Crystal Lake, NJ coordinates (approximate)\r\n      const crystalLakeLat = 40.913;\r\n      const crystalLakeLon = -74.345;\r\n\r\n      // Only load if no city is set and no user location preference\r\n      if (!city && !localStorage.getItem('user-preferred-location')) {\r\n        try {\r\n          await fetchWeatherData(crystalLakeLat, crystalLakeLon);\r\n          setCity('Crystal Lake, NJ');\r\n          logInfo('🎃 Welcome to Crystal Lake... Weather Station Online');\r\n        } catch (error) {\r\n          logWarn(\r\n            'Failed to load Crystal Lake data, user will need to search manually:',\r\n            error,\r\n          );\r\n          // Gracefully degrade - user can still search for weather manually\r\n          setError(\r\n            'Default location unavailable. Please search for your city.',\r\n          );\r\n        }\r\n      }\r\n    };\r\n\r\n    // Delay slightly to let other initialization complete\r\n    const timer = setTimeout(loadCrystalLake, 1000);\r\n    return () => clearTimeout(timer);\r\n  }, []); // Empty dependency array for mount-only effect\r\n\r\n  // Get adaptive styles based on current screen\r\n  const adaptiveFonts = useMemo(\r\n    () => getAdaptiveFontSizes(screenInfo),\r\n    [screenInfo],\r\n  );\r\n  const adaptiveSpacing = useMemo(\r\n    () => getAdaptiveSpacing(screenInfo),\r\n    [screenInfo],\r\n  );\r\n  const adaptiveBorders = useMemo(\r\n    () => getAdaptiveBorderRadius(screenInfo),\r\n    [screenInfo],\r\n  );\r\n\r\n  // Theme and mobile detection (updated to use screenInfo)\r\n  const { theme, themeName } = useTheme();\r\n\r\n  // Create mobile button function using new optimization\r\n  const createMobileButton = useCallback(\r\n    (isPrimary = false, size: 'small' | 'medium' | 'large' = 'medium') =>\r\n      getTouchOptimizedButton(\r\n        theme,\r\n        screenInfo,\r\n        isPrimary ? 'primary' : 'secondary',\r\n        size,\r\n      ),\r\n    [theme, screenInfo],\r\n  );\r\n\r\n  const haptic = useHaptic();\r\n  const { addToRecent, setCurrentCity } = useCityManagement();\r\n  const { optimizedFetch } = useWeatherAPIOptimization();\r\n  const { optimizedTransform } = useWeatherDataTransform();\r\n\r\n  // PWA functionality - NOW ACTIVE for full offline and installation support\r\n  const pwaInstall = usePWAInstall();\r\n  const serviceWorker = useServiceWorker();\r\n  const { isOnline } = useNetworkStatus();\r\n\r\n  // iOS26 Phase 3C: Multi-Sensory Weather Experience Integration\r\n  const multiSensory = useMultiSensoryWeather({\r\n    enableAudio: false, // Disabled by default - users must opt-in for privacy\r\n    enableHaptics: true,\r\n    enableAccessibility: false, // Disabled by default - users must opt-in for privacy\r\n    autoAnnounceWeather: false, // Disabled by default - no automatic voice narration\r\n    hapticIntensity: 0.7,\r\n    audioVolume: 0.6,\r\n  });\r\n\r\n  const interactionFeedback = useInteractionFeedback();\r\n  const weatherAnnouncements = useWeatherAnnouncements();\r\n  const { updateAvailable, applyUpdate } = usePWAUpdate();\r\n\r\n  const [currentScreen, setCurrentScreen] = useState<NavigationScreen>('Home');\r\n  const [city, setCity] = useState('Crystal Lake, NJ'); // Default to horror movie location\r\n  const [weather, setWeather] = useState<WeatherData | null>(null);\r\n  const [weatherCode, setWeatherCode] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  // Phase 3: Progressive Loading - Coordinate Tracking\r\n  const [currentCoordinates, setCurrentCoordinates] = useState<{\r\n    latitude: number;\r\n    longitude: number;\r\n  } | null>(null);\r\n\r\n  // iOS HIG Component States\r\n  const [selectedView, setSelectedView] = useState(0); // For segmented control\r\n  const [showActionSheet, setShowActionSheet] = useState(false);\r\n  const [showIOSDemo, setShowIOSDemo] = useState(false);\r\n  const [showWeatherAlertPanel, setShowWeatherAlertPanel] = useState(false);\r\n\r\n  // iOS26 Enhanced Features State\r\n  const [showLiveActivity, setShowLiveActivity] = useState(false);\r\n  const [weatherAlert, setWeatherAlert] = useState<{\r\n    title: string;\r\n    message: string;\r\n    severity: 'info' | 'warning' | 'severe';\r\n  } | null>(null);\r\n  const [dataUpdateProgress, setDataUpdateProgress] = useState(0);\r\n  const [showWeatherSettingsModal, setShowWeatherSettingsModal] =\r\n    useState(false);\r\n\r\n  const [pendingLocationData, setPendingLocationData] = useState<{\r\n    latitude: number;\r\n    longitude: number;\r\n    accuracy: number;\r\n    address?: { city?: string; display?: string };\r\n  } | null>(null);\r\n  const [hourlyForecast, setHourlyForecast] = useState<HourlyForecast[]>([]);\r\n  const [dailyForecast, setDailyForecast] = useState<DailyForecast[]>([]);\r\n\r\n  // Phase 3: Progressive Loading Hook Integration\r\n  const progressiveWeatherData = useProgressiveWeatherLoading(\r\n    currentCoordinates?.latitude || 0,\r\n    currentCoordinates?.longitude || 0,\r\n  );\r\n\r\n  // Enable progressive loading when coordinates are available\r\n  const useProgressiveMode = Boolean(currentCoordinates);\r\n\r\n  // Weather Display Optimization Hooks - August 2025 (ENABLED in Phase 2B)\r\n  // Create weather context for smart content prioritization\r\n  const weatherContext: WeatherContext = useMemo(\r\n    () => ({\r\n      temperature: weather?.main?.temp,\r\n      weatherCode,\r\n      isExtreme: weather\r\n        ? weather.main.temp > 95 || weather.main.temp < 20\r\n        : false,\r\n      hasAlerts: weatherAlert !== null,\r\n      timeOfDay: (() => {\r\n        const hour = new Date().getHours();\r\n        if (hour < 6) return 'night' as const;\r\n        if (hour < 12) return 'morning' as const;\r\n        if (hour < 18) return 'afternoon' as const;\r\n        return 'evening' as const;\r\n      })(),\r\n    }),\r\n    [weather, weatherCode, weatherAlert],\r\n  );\r\n\r\n  const smartContent = useSmartContentPriority(weatherContext);\r\n\r\n  // Memoized weather data processing\r\n  const memoizedHourlyForecast = useMemo(\r\n    () => hourlyForecast,\r\n    [hourlyForecast],\r\n  );\r\n  const memoizedDailyForecast = useMemo(() => dailyForecast, [dailyForecast]);\r\n\r\n  // Location detection handler - must be defined early for use in JSX\r\n  const handleLocationDetected = useCallback(\r\n    (cityName: string, latitude: number, longitude: number) => {\r\n      // Track location detection with telemetry\r\n      telemetry.trackUserInteraction({\r\n        action: 'location_detected',\r\n        component: 'AppNavigator',\r\n        metadata: {\r\n          cityName,\r\n          hasCoordinates: !!(latitude && longitude),\r\n          accuracy: 'high', // GPS detected locations have high accuracy\r\n        },\r\n      });\r\n\r\n      telemetry.trackMetric({\r\n        name: 'location_detection_success',\r\n        value: 1,\r\n        tags: {\r\n          method: 'gps',\r\n          city: cityName,\r\n          hasValidCoords: String(!!(latitude && longitude)),\r\n        },\r\n      });\r\n\r\n      // Show verification dialog for GPS-detected locations\r\n      setPendingLocationData({\r\n        latitude,\r\n        longitude,\r\n        accuracy: 0,\r\n        address: { city: cityName, display: cityName },\r\n      });\r\n    },\r\n    [telemetry],\r\n  );\r\n\r\n  // Get swipe configuration for current screen\r\n  const swipeConfig = useScreenSwipeConfig(currentScreen);\r\n\r\n  // Mobile navigation handler\r\n  const handleMobileNavigation = useCallback(\r\n    (screen: NavigationScreen) => {\r\n      const previousScreen = currentScreen;\r\n\r\n      // Track navigation with telemetry\r\n      telemetry.trackUserInteraction({\r\n        action: 'mobile_navigation',\r\n        component: 'AppNavigator',\r\n      });\r\n\r\n      performanceMonitor.trackInteraction('navigation', {\r\n        from: previousScreen,\r\n        to: screen,\r\n      });\r\n\r\n      haptic.buttonPress();\r\n      setCurrentScreen(screen);\r\n    },\r\n    [haptic, currentScreen, telemetry, performanceMonitor],\r\n  );\r\n\r\n  // Legacy navigation function for backward compatibility\r\n  const navigate = async (screenName: string) => {\r\n    // Map old screen names to new NavigationScreen types\r\n    const screenMap: Record<string, NavigationScreen> = {\r\n      Home: 'Home',\r\n      WeatherDetails: 'Weather',\r\n      Weather: 'Weather',\r\n      MobileTest: 'Settings', // Redirect mobile test to settings for now\r\n      Settings: 'Settings',\r\n      Search: 'Search',\r\n      IOSDemo: 'Settings', // Temporarily map to settings, we'll handle this specially\r\n    };\r\n\r\n    const mappedScreen = screenMap[screenName] || 'Home';\r\n\r\n    // iOS26 Phase 3C: Enhanced navigation with multi-sensory feedback\r\n    await interactionFeedback.onButtonPress();\r\n    await weatherAnnouncements.announceStateChange(\r\n      `Navigating to ${mappedScreen.toLowerCase()}`,\r\n      'Navigation updated',\r\n    );\r\n\r\n    // Special handling for iOS Demo\r\n    if (screenName === 'IOSDemo') {\r\n      setShowIOSDemo(true);\r\n      return;\r\n    }\r\n\r\n    setCurrentScreen(mappedScreen);\r\n  };\r\n\r\n  // Enhanced swipe navigation handlers with haptic feedback\r\n  const handleSwipeLeft = () => {\r\n    if (currentScreen === 'Home') {\r\n      // Track swipe navigation\r\n      telemetry.trackUserInteraction({\r\n        action: 'swipe_navigation',\r\n        component: 'AppNavigator',\r\n        metadata: {\r\n          direction: 'left',\r\n          from: currentScreen,\r\n          to: 'Weather',\r\n          gestureType: 'swipe',\r\n        },\r\n      });\r\n\r\n      haptic.navigation();\r\n      navigate('Weather'); // Use new screen name\r\n    } else {\r\n      // Track invalid swipe attempt\r\n      telemetry.trackUserInteraction({\r\n        action: 'invalid_swipe',\r\n        component: 'AppNavigator',\r\n        metadata: {\r\n          direction: 'left',\r\n          currentScreen,\r\n          reason: 'no_valid_target',\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSwipeRight = () => {\r\n    if (currentScreen === 'Weather') {\r\n      // Track swipe navigation\r\n      telemetry.trackUserInteraction({\r\n        action: 'swipe_navigation',\r\n        component: 'AppNavigator',\r\n        metadata: {\r\n          direction: 'right',\r\n          from: currentScreen,\r\n          to: 'Home',\r\n          gestureType: 'swipe',\r\n        },\r\n      });\r\n\r\n      haptic.navigation();\r\n      navigate('Home');\r\n    } else {\r\n      // Track invalid swipe with telemetry\r\n      telemetry.trackUserInteraction({\r\n        action: 'invalid_swipe',\r\n        component: 'AppNavigator',\r\n        metadata: {\r\n          direction: 'right',\r\n          currentScreen,\r\n          reason: 'no_valid_target',\r\n        },\r\n      });\r\n\r\n      // Subtle error feedback for invalid swipe\r\n      haptic.light();\r\n    }\r\n  };\r\n\r\n  // iOS26 Phase 3C: Weather condition mapping for multi-sensory experience\r\n  const getWeatherConditionFromCode = useCallback(\r\n    (weatherCode: number): string | null => {\r\n      // Map OpenMeteo weather codes to our multi-sensory experience conditions\r\n      if (weatherCode >= 80 && weatherCode <= 82) return 'light-rain';\r\n      if (weatherCode >= 61 && weatherCode <= 67) return 'heavy-rain';\r\n      if (weatherCode >= 95 && weatherCode <= 99) return 'thunderstorm';\r\n      if (weatherCode >= 71 && weatherCode <= 77) return 'snow';\r\n      if (weatherCode >= 1 && weatherCode <= 3) return 'cloudy';\r\n      if (weatherCode === 0) return 'clear-sunny';\r\n      if (weatherCode >= 51 && weatherCode <= 57) return 'light-rain';\r\n      return null;\r\n    },\r\n    [],\r\n  );\r\n\r\n  // Common weather data fetching logic with optimization\r\n  const fetchWeatherData = useCallback(\r\n    async (lat: number, lon: number) => {\r\n      const operationId = `weather-fetch-${lat}-${lon}-${Date.now()}`;\r\n\r\n      return telemetry.trackOperation('weather_data_fetch', async () => {\r\n        try {\r\n          // Start loading state\r\n          weatherLoading.setLoading(true, 0);\r\n\r\n          // Track API call initiation\r\n          telemetry.trackUserInteraction({\r\n            action: 'weather_api_call_started',\r\n            component: 'AppNavigator',\r\n          });\r\n\r\n          const WEATHER_URL = 'https://api.open-meteo.com/v1/forecast';\r\n          const weatherUrl = `${WEATHER_URL}?latitude=${lat}&longitude=${lon}&current_weather=true&hourly=temperature_2m,relative_humidity_2m,apparent_temperature,surface_pressure,uv_index,visibility,weathercode&daily=weathercode,temperature_2m_max,temperature_2m_min,precipitation_sum,windspeed_10m_max&temperature_unit=fahrenheit&wind_speed_unit=mph&timezone=auto&forecast_days=7`;\r\n\r\n          // Update progress\r\n          weatherLoading.setLoading(true, 25);\r\n\r\n          const cacheKey = `weather-${lat}-${lon}`;\r\n          const startTime = performance.now();\r\n\r\n          const weatherResponse = await optimizedFetch(\r\n            weatherUrl,\r\n            {\r\n              headers: {\r\n                'User-Agent': 'WeatherApp/1.0 (and3rn3t@icloud.com)',\r\n              },\r\n            },\r\n            cacheKey,\r\n          );\r\n\r\n          // Track API response time\r\n          const apiResponseTime = performance.now() - startTime;\r\n          telemetry.trackPerformance({\r\n            name: 'weather_api_response_time',\r\n            value: apiResponseTime,\r\n            tags: { unit: 'milliseconds', city },\r\n          });\r\n\r\n          // Update progress after fetch\r\n          weatherLoading.setLoading(true, 50);\r\n\r\n          if (!weatherResponse.ok) {\r\n            const error = new Error(\r\n              `Weather API failed: ${weatherResponse.status}`,\r\n            );\r\n            telemetry.trackError(error, {\r\n              context: 'weather_api_error',\r\n              metadata: { status: weatherResponse.status },\r\n            });\r\n            throw error;\r\n          }\r\n\r\n          const weatherData = await weatherResponse.json();\r\n\r\n          // Update progress after data parsing\r\n          weatherLoading.setLoading(true, 75);\r\n\r\n          // Use optimized transform for weather data processing\r\n          const transformStartTime = performance.now();\r\n          const transformedData = optimizedTransform(\r\n            weatherData,\r\n            data => {\r\n              const currentWeatherCode = data.current_weather?.weathercode || 0;\r\n              setWeatherCode(currentWeatherCode);\r\n              const currentHour = new Date().getHours();\r\n              const hourlyData = data.hourly;\r\n\r\n              return {\r\n                main: {\r\n                  temp: data.current_weather?.temperature || 0,\r\n                  feels_like:\r\n                    hourlyData?.apparent_temperature?.[currentHour] ||\r\n                    data.current_weather?.temperature ||\r\n                    0,\r\n                  humidity:\r\n                    hourlyData?.relative_humidity_2m?.[currentHour] || 50,\r\n                  pressure: hourlyData?.surface_pressure?.[currentHour] || 1013,\r\n                },\r\n                weather: [\r\n                  {\r\n                    description: getWeatherDescription(currentWeatherCode),\r\n                    main: getWeatherMainCategory(currentWeatherCode),\r\n                  },\r\n                ],\r\n                wind: {\r\n                  speed: data.current_weather?.windspeed || 0,\r\n                  deg: data.current_weather?.winddirection || 0,\r\n                },\r\n                uv_index: hourlyData?.uv_index?.[currentHour] || 0,\r\n                visibility: hourlyData?.visibility?.[currentHour] || 0,\r\n              };\r\n            },\r\n            `transform-${lat}-${lon}-${Date.now()}`,\r\n          );\r\n\r\n          // Track data transformation performance\r\n          const transformTime = performance.now() - transformStartTime;\r\n          telemetry.trackPerformance({\r\n            name: 'weather_data_transform_time',\r\n            value: transformTime,\r\n            tags: { unit: 'milliseconds', operation: 'data_transform' },\r\n          });\r\n\r\n          setWeather(transformedData);\r\n          setHourlyForecast(\r\n            processHourlyForecast(weatherData.hourly as HourlyData),\r\n          );\r\n          setDailyForecast(\r\n            processDailyForecast(weatherData.daily as DailyData),\r\n          );\r\n\r\n          // Track successful weather data load\r\n          telemetry.trackUserInteraction({\r\n            action: 'weather_data_loaded_successfully',\r\n            component: 'AppNavigator',\r\n          });\r\n\r\n          // Track weather data metrics\r\n          telemetry.trackPerformance({\r\n            name: 'current_temperature',\r\n            value: transformedData.main.temp,\r\n            tags: {\r\n              unit: 'fahrenheit',\r\n              weather_type: transformedData.weather[0]?.main || 'unknown',\r\n            },\r\n          });\r\n\r\n          // iOS26 Phase 3C: Multi-Sensory Weather Experience\r\n          const currentWeatherCode =\r\n            transformedData.weather[0]?.main === 'Rain' ? 61 : 0; // Simple mapping\r\n          const weatherCondition =\r\n            getWeatherConditionFromCode(currentWeatherCode);\r\n          if (weatherCondition) {\r\n            // Play immersive weather experience with spatial audio and haptic feedback\r\n            await multiSensory.playWeatherExperience(weatherCondition, 0.8);\r\n\r\n            // Announce weather with accessibility features\r\n            await weatherAnnouncements.announceWeather(\r\n              weatherCondition,\r\n              transformedData.main.temp,\r\n              city,\r\n            );\r\n          }\r\n\r\n          // Update progress to completion\r\n          weatherLoading.setLoading(true, 100);\r\n\r\n          // iOS26 Feature: Trigger Live Activity for weather updates\r\n          setShowLiveActivity(true);\r\n          setTimeout(() => setShowLiveActivity(false), 4000);\r\n\r\n          // iOS26 Feature: Check for weather alerts\r\n          const currentTemp = transformedData.main.temp;\r\n          const windSpeed = transformedData.wind.speed;\r\n          const weatherCode =\r\n            transformedData.weather[0].description.toLowerCase();\r\n\r\n          if (currentTemp > 95) {\r\n            const alertData = {\r\n              title: 'Extreme Heat Warning',\r\n              message: `Temperature is ${Math.round(\r\n                currentTemp,\r\n              )}°F. Stay hydrated and avoid outdoor activities.`,\r\n              severity: 'severe' as const,\r\n            };\r\n            setWeatherAlert(alertData);\r\n\r\n            // iOS26 Phase 3C: Multi-sensory severe weather alert\r\n            await multiSensory.playWeatherAlert('severe', alertData.message);\r\n          } else if (currentTemp < 20) {\r\n            const alertData = {\r\n              title: 'Extreme Cold Warning',\r\n              message: `Temperature is ${Math.round(\r\n                currentTemp,\r\n              )}°F. Dress warmly and limit outdoor exposure.`,\r\n              severity: 'severe' as const,\r\n            };\r\n            setWeatherAlert(alertData);\r\n\r\n            // iOS26 Phase 3C: Multi-sensory severe weather alert\r\n            await multiSensory.playWeatherAlert('severe', alertData.message);\r\n          } else if (windSpeed > 35) {\r\n            const alertData = {\r\n              title: 'High Wind Advisory',\r\n              message: `Wind speeds of ${Math.round(\r\n                windSpeed,\r\n              )} mph. Secure loose objects and drive carefully.`,\r\n              severity: 'warning' as const,\r\n            };\r\n            setWeatherAlert(alertData);\r\n\r\n            // iOS26 Phase 3C: Multi-sensory wind warning alert\r\n            await multiSensory.playWeatherAlert('warning', alertData.message);\r\n          } else if (\r\n            weatherCode.includes('thunderstorm') ||\r\n            weatherCode.includes('storm')\r\n          ) {\r\n            const alertData = {\r\n              title: 'Storm Alert',\r\n              message: 'Thunderstorms in the area. Seek indoor shelter.',\r\n              severity: 'warning' as const,\r\n            };\r\n            setWeatherAlert(alertData);\r\n\r\n            // iOS26 Phase 3C: Multi-sensory storm alert\r\n            await multiSensory.playWeatherAlert('warning', alertData.message);\r\n          } else {\r\n            setWeatherAlert(null);\r\n          }\r\n\r\n          // Complete loading\r\n          weatherLoading.setLoading(false);\r\n          return transformedData;\r\n        } catch (error) {\r\n          // Handle errors with telemetry\r\n          const errorMessage =\r\n            error instanceof Error\r\n              ? error.message\r\n              : 'Failed to fetch weather data';\r\n          telemetry.trackError(\r\n            error instanceof Error ? error : new Error(errorMessage),\r\n            {\r\n              context: 'weather_fetch_error',\r\n              metadata: { city, operation: 'fetchWeatherData' },\r\n            },\r\n          );\r\n\r\n          weatherLoading.setError(errorMessage);\r\n          throw error;\r\n        }\r\n      });\r\n    },\r\n    [\r\n      optimizedFetch,\r\n      optimizedTransform,\r\n      weatherLoading,\r\n      telemetry,\r\n      city,\r\n      getWeatherConditionFromCode,\r\n      multiSensory,\r\n      weatherAnnouncements,\r\n    ],\r\n  );\r\n\r\n  const getWeather = useCallback(async () => {\r\n    return telemetry.trackOperation('city_weather_search', async () => {\r\n      if (!city.trim()) {\r\n        const error = new Error('Please enter a city name');\r\n        telemetry.trackError(error, {\r\n          context: 'empty_city_search',\r\n          metadata: { operation: 'city_weather_search' },\r\n        });\r\n        setError('Please enter a city name');\r\n        haptic.searchError(); // Haptic feedback for input validation error\r\n        return;\r\n      }\r\n\r\n      setLoading(true);\r\n      setError('');\r\n      haptic.dataLoad(); // Light haptic feedback when starting search\r\n\r\n      telemetry.trackUserInteraction({\r\n        action: 'city_search_initiated',\r\n        component: 'AppNavigator',\r\n      });\r\n\r\n      try {\r\n        const GEOCODING_URL = 'https://nominatim.openstreetmap.org/search';\r\n        const geoUrl = `${GEOCODING_URL}?q=${encodeURIComponent(\r\n          city,\r\n        )}&format=json&limit=1`;\r\n\r\n        const geocodingStartTime = performance.now();\r\n        const geoResponse = await optimizedFetch(\r\n          geoUrl,\r\n          {\r\n            headers: { 'User-Agent': 'WeatherApp/1.0 (and3rn3t@icloud.com)' },\r\n          },\r\n          `geocoding-${city}`,\r\n        );\r\n\r\n        const geocodingTime = performance.now() - geocodingStartTime;\r\n        telemetry.trackPerformance({\r\n          name: 'geocoding_api_response_time',\r\n          value: geocodingTime,\r\n          tags: { unit: 'milliseconds', city },\r\n        });\r\n\r\n        if (!geoResponse.ok) {\r\n          const error = new Error(`Geocoding failed: ${geoResponse.status}`);\r\n          telemetry.trackError(error, {\r\n            context: 'geocoding_api_error',\r\n            metadata: { status: geoResponse.status, city },\r\n          });\r\n          throw error;\r\n        }\r\n\r\n        const geoData = await geoResponse.json();\r\n        if (!geoData || geoData.length === 0) {\r\n          const error = new Error(\r\n            'City not found. Please check the spelling and try again.',\r\n          );\r\n          telemetry.trackError(error, {\r\n            context: 'city_not_found',\r\n            metadata: { city, searchAttempt: 'geocoding' },\r\n          });\r\n          throw error;\r\n        }\r\n\r\n        const { lat, lon } = geoData[0];\r\n        await fetchWeatherData(lat, lon);\r\n\r\n        telemetry.trackUserInteraction({\r\n          action: 'city_search_successful',\r\n          component: 'AppNavigator',\r\n        });\r\n\r\n        haptic.searchSuccess(); // Haptic feedback for successful weather fetch\r\n      } catch (error) {\r\n        const errorMessage =\r\n          error instanceof Error ? error.message : 'Unknown error occurred';\r\n\r\n        telemetry.trackError(\r\n          error instanceof Error ? error : new Error(errorMessage),\r\n          {\r\n            context: 'city_search_error',\r\n            metadata: { city, operation: 'getWeather' },\r\n          },\r\n        );\r\n\r\n        setError(`Failed to fetch weather data: ${errorMessage}`);\r\n        haptic.searchError(); // Haptic feedback for search error\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }, [city, haptic, fetchWeatherData, optimizedFetch, telemetry]);\r\n\r\n  // Direct weather fetching (from autocomplete, city selector, etc.)\r\n  const getWeatherByLocation = useCallback(\r\n    async (locationCity: string, lat: number, lon: number) => {\r\n      setLoading(true);\r\n      setError('');\r\n      setCity(locationCity); // Update city state with location name\r\n      haptic.dataLoad(); // Light haptic feedback when starting location-based search\r\n\r\n      // Phase 3: Track coordinates for progressive loading\r\n      setCurrentCoordinates({ latitude: lat, longitude: lon });\r\n\r\n      // Add to city management\r\n      setCurrentCity(locationCity, lat, lon);\r\n      addToRecent(locationCity, lat, lon);\r\n\r\n      try {\r\n        await fetchWeatherData(lat, lon);\r\n        haptic.searchSuccess(); // Haptic feedback for successful location-based weather fetch\r\n      } catch (error) {\r\n        const errorMessage =\r\n          error instanceof Error ? error.message : 'Unknown error occurred';\r\n        setError(\r\n          `Failed to fetch weather data for your location: ${errorMessage}`,\r\n        );\r\n        haptic.searchError(); // Haptic feedback for location-based search error\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [haptic, fetchWeatherData, setCurrentCity, addToRecent],\r\n  );\r\n\r\n  // Background refresh for weather data with native app lifecycle integration\r\n  const refreshWeatherData = useCallback(async () => {\r\n    // Only refresh if we have valid weather data to refresh\r\n    if (weather && city.trim()) {\r\n      try {\r\n        // Extract lat/lon from current weather data or use city search\r\n        const { lat, lon } = await (async () => {\r\n          // If we have weather data, we can try to get the location from recent cities\r\n          // For now, we'll use the city search approach\r\n          const GEOCODING_URL = 'https://nominatim.openstreetmap.org/search';\r\n          const geoUrl = `${GEOCODING_URL}?q=${encodeURIComponent(\r\n            city,\r\n          )}&format=json&limit=1`;\r\n          const geoResponse = await fetch(geoUrl, {\r\n            headers: { 'User-Agent': 'WeatherApp/1.0 (and3rn3t@icloud.com)' },\r\n          });\r\n          if (!geoResponse.ok)\r\n            throw new Error(`Geocoding failed: ${geoResponse.status}`);\r\n          const geoData = await geoResponse.json();\r\n          if (!geoData || geoData.length === 0)\r\n            throw new Error('Location not found for background refresh');\r\n          return { lat: geoData[0].lat, lon: geoData[0].lon };\r\n        })();\r\n\r\n        // Fetch updated weather data\r\n        await fetchWeatherData(lat, lon);\r\n        logInfo('Weather data refreshed in background');\r\n      } catch (error) {\r\n        logError('Background weather refresh failed:', error);\r\n        // Don't set error state for background refreshes to avoid disrupting UI\r\n      }\r\n    }\r\n  }, [weather, city, fetchWeatherData]);\r\n\r\n  // Initialize background refresh with weather-optimized settings\r\n  const backgroundRefreshConfig = useMemo(\r\n    () => ({\r\n      foregroundInterval: 5, // 5 minutes for active usage\r\n      backgroundInterval: 15, // 15 minutes for background\r\n      forceRefreshThreshold: 30, // 30 minutes for stale data\r\n      enabled: true,\r\n    }),\r\n    [],\r\n  );\r\n\r\n  const backgroundRefresh = useWeatherBackgroundRefresh(\r\n    refreshWeatherData,\r\n    backgroundRefreshConfig.enabled,\r\n  );\r\n\r\n  // Handle verification confirmation\r\n  const handleVerificationConfirm = useCallback(\r\n    (cityName: string, latitude: number, longitude: number) => {\r\n      setPendingLocationData(null);\r\n      getWeatherByLocation(cityName, latitude, longitude);\r\n    },\r\n    [getWeatherByLocation],\r\n  );\r\n\r\n  // Handle verification cancel\r\n  const handleVerificationCancel = useCallback(() => {\r\n    setPendingLocationData(null);\r\n  }, []);\r\n\r\n  // Pull-to-refresh handler - refreshes current weather data\r\n  const handleRefresh = useCallback(async () => {\r\n    if (city.trim() && weather) {\r\n      const refreshStartTime = performance.now();\r\n\r\n      // Track refresh initiation\r\n      telemetry.trackUserInteraction({\r\n        action: 'manual_refresh',\r\n        component: 'AppNavigator',\r\n        metadata: {\r\n          method: 'pull_to_refresh',\r\n          city,\r\n          hasWeatherData: !!weather,\r\n        },\r\n      });\r\n\r\n      haptic.weatherRefresh(); // Haptic feedback for pull-to-refresh\r\n\r\n      // iOS26 Phase 3C: Enhanced pull-to-refresh with multi-sensory feedback\r\n      await interactionFeedback.onPullToRefresh();\r\n      await weatherAnnouncements.announceRefresh();\r\n\r\n      // Use background refresh for manual refresh with enhanced capabilities\r\n      try {\r\n        await backgroundRefresh.manualRefresh();\r\n        logInfo('Manual refresh completed via background refresh service');\r\n\r\n        // Track successful refresh\r\n        const refreshDuration = performance.now() - refreshStartTime;\r\n        telemetry.trackMetric({\r\n          name: 'manual_refresh_success',\r\n          value: 1,\r\n          tags: {\r\n            method: 'background_refresh',\r\n            duration_ms: String(Math.round(refreshDuration)),\r\n            city,\r\n          },\r\n        });\r\n\r\n        // Play success feedback for successful refresh\r\n        await interactionFeedback.onSuccess();\r\n      } catch (error) {\r\n        // Track fallback refresh\r\n        telemetry.trackError(error as Error, {\r\n          context: 'manual_refresh_fallback',\r\n          metadata: { city, method: 'background_refresh' },\r\n        });\r\n\r\n        // Fallback to traditional refresh\r\n        logInfo('Falling back to traditional refresh:', error);\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n        await getWeather();\r\n\r\n        const refreshDuration = performance.now() - refreshStartTime;\r\n        telemetry.trackMetric({\r\n          name: 'manual_refresh_fallback',\r\n          value: 1,\r\n          tags: {\r\n            method: 'traditional_refresh',\r\n            duration_ms: String(Math.round(refreshDuration)),\r\n            city,\r\n          },\r\n        });\r\n\r\n        // Still play success feedback for fallback refresh\r\n        await interactionFeedback.onSuccess();\r\n      }\r\n    }\r\n  }, [city, weather, backgroundRefresh, haptic, getWeather, telemetry]);\r\n\r\n  return (\r\n    <Dash0ErrorBoundary\r\n      fallback={<div>Something went wrong with weather data</div>}\r\n    >\r\n      <LoadingProvider>\r\n        <EnhancedMobileContainer\r\n          enablePullToRefresh={true}\r\n          onRefresh={handleRefresh}\r\n          enableSwipeGestures={screenInfo.width < 768}\r\n          onSwipeLeft={handleSwipeLeft}\r\n          onSwipeRight={handleSwipeRight}\r\n          className=\"safe-area-container\"\r\n          style={{\r\n            ...getMobileOptimizedContainer(theme, screenInfo),\r\n            fontFamily:\r\n              '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif',\r\n          }}\r\n        >\r\n          {/* Native API Status Display - Shows native capabilities when on mobile */}\r\n          <React.Suspense\r\n            fallback={\r\n              <div className=\"optimization-loading\">\r\n                Loading native status...\r\n              </div>\r\n            }\r\n          >\r\n            <LazyNativeStatusDisplay\r\n              theme={theme}\r\n              isMobile={screenInfo.width < 768}\r\n            />\r\n          </React.Suspense>\r\n\r\n          {/* Enhanced Auto Location Manager - Phase F-2 */}\r\n          <LocationManager\r\n            onLocationReceived={(detectedCity, lat, lon) => {\r\n              logInfo(\r\n                `📍 Auto location detected: ${detectedCity} (${lat}, ${lon})`,\r\n              );\r\n              setCity(detectedCity);\r\n              getWeatherByLocation(detectedCity, lat, lon);\r\n              haptic.light();\r\n            }}\r\n            onError={errorMessage => {\r\n              logWarn('📍 Auto location failed:', errorMessage);\r\n              // Don't show error to user for automatic detection, just log it\r\n            }}\r\n            enableAutoDetection={true}\r\n            enableBackgroundUpdates={false} // Disabled for battery optimization\r\n          />\r\n\r\n          {/* DEBUG: Location Tester - Development only */}\r\n          {import.meta.env.DEV && <LocationTester />}\r\n\r\n          {/* Background Refresh Status - Development info */}\r\n          {backgroundRefresh.isInitialized && (\r\n            <div className=\"ios26-dev-status\">\r\n              🔄 BG: {backgroundRefresh.isAppActive ? 'Active' : 'Background'} |\r\n              📊 {backgroundRefresh.stats.totalRefreshes} total | 🌐{' '}\r\n              {backgroundRefresh.isOnline ? 'Online' : 'Offline'}\r\n              {backgroundRefresh.stats.lastRefreshTime > 0 && (\r\n                <div>\r\n                  Last:{' '}\r\n                  {new Date(\r\n                    backgroundRefresh.stats.lastRefreshTime,\r\n                  ).toLocaleTimeString()}\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {/* Modern Mobile Navigation System - Only for mobile devices */}\r\n          {screenInfo.width < 768 && (\r\n            <ScreenContainer\r\n              currentScreen={currentScreen}\r\n              transitionDirection=\"slide-left\"\r\n              transitionDuration={300}\r\n              theme={theme}\r\n              onSwipeLeft={handleSwipeLeft}\r\n              onSwipeRight={handleSwipeRight}\r\n              enableSwipeGestures={screenInfo.width < 768} // Enable for mobile only\r\n              screens={{\r\n                Home: (\r\n                  <HomeScreen\r\n                    theme={theme}\r\n                    screenInfo={screenInfo}\r\n                    adaptiveFonts={adaptiveFonts}\r\n                    adaptiveSpacing={adaptiveSpacing}\r\n                    adaptiveBorders={adaptiveBorders}\r\n                    navigate={navigate}\r\n                    haptic={haptic}\r\n                  />\r\n                ),\r\n                Weather: (\r\n                  <WeatherDetailsScreen\r\n                    theme={theme}\r\n                    screenInfo={screenInfo}\r\n                    adaptiveFonts={adaptiveFonts}\r\n                    adaptiveSpacing={adaptiveSpacing}\r\n                    adaptiveBorders={adaptiveBorders}\r\n                    navigate={navigate}\r\n                    createMobileButton={createMobileButton}\r\n                    city={city}\r\n                    loading={loading}\r\n                    error={error}\r\n                    setError={setError}\r\n                    weather={weather}\r\n                    hourlyForecast={memoizedHourlyForecast}\r\n                    dailyForecast={memoizedDailyForecast}\r\n                    weatherCode={weatherCode}\r\n                    getWeather={getWeather}\r\n                    getWeatherByLocation={getWeatherByLocation}\r\n                    onRefresh={handleRefresh}\r\n                    haptic={haptic}\r\n                    handleLocationDetected={handleLocationDetected}\r\n                    selectedView={selectedView}\r\n                    setSelectedView={setSelectedView}\r\n                    showActionSheet={showActionSheet}\r\n                    setShowActionSheet={setShowActionSheet}\r\n                    themeName={themeName}\r\n                    showLiveActivity={showLiveActivity}\r\n                    weatherAlert={weatherAlert}\r\n                    showWeatherSettingsModal={showWeatherSettingsModal}\r\n                    setShowWeatherSettingsModal={setShowWeatherSettingsModal}\r\n                  />\r\n                ),\r\n                Search: (\r\n                  <SearchScreen\r\n                    theme={theme}\r\n                    onBack={() => navigate('Home')}\r\n                    onLocationSelect={(cityName, latitude, longitude) => {\r\n                      getWeatherByLocation(cityName, latitude, longitude);\r\n                      navigate('Weather');\r\n                    }}\r\n                  />\r\n                ),\r\n                Settings: (\r\n                  <SettingsScreen\r\n                    theme={theme}\r\n                    screenInfo={screenInfo}\r\n                    onBack={() => navigate('Home')}\r\n                  />\r\n                ),\r\n                Favorites: (\r\n                  <FavoritesScreen\r\n                    theme={theme}\r\n                    onBack={() => navigate('Home')}\r\n                    onCitySelect={(cityName, latitude, longitude) => {\r\n                      getWeatherByLocation(cityName, latitude, longitude);\r\n                      setCity(cityName);\r\n                      navigate('Weather');\r\n                      haptic.light();\r\n                    }}\r\n                    onAddFavorite={() => navigate('Search')}\r\n                    currentCity={city}\r\n                  />\r\n                ),\r\n              }}\r\n            />\r\n          )}\r\n\r\n          {/* Mobile Bottom Navigation */}\r\n          {screenInfo.width < 768 && (\r\n            <MobileNavigation\r\n              currentScreen={currentScreen}\r\n              onNavigate={handleMobileNavigation}\r\n            />\r\n          )}\r\n\r\n          {/* Desktop/Legacy Navigation (for larger screens) */}\r\n          {screenInfo.width >= 768 && (\r\n            <SwipeNavigationContainer\r\n              currentScreen={currentScreen}\r\n              onSwipeLeft={handleSwipeLeft}\r\n              onSwipeRight={handleSwipeRight}\r\n              canSwipeLeft={swipeConfig.canSwipeLeft}\r\n              canSwipeRight={swipeConfig.canSwipeRight}\r\n              theme={theme}\r\n              isMobile={false}\r\n              swipeThreshold={80}\r\n              enableDesktopSupport={true}\r\n            >\r\n              {/* Legacy screen rendering for desktop */}\r\n              {currentScreen === 'Home' && (\r\n                <HomeScreen\r\n                  theme={theme}\r\n                  screenInfo={screenInfo}\r\n                  adaptiveFonts={adaptiveFonts}\r\n                  adaptiveSpacing={adaptiveSpacing}\r\n                  adaptiveBorders={adaptiveBorders}\r\n                  navigate={navigate}\r\n                  haptic={haptic}\r\n                />\r\n              )}\r\n\r\n              {currentScreen === 'Weather' && (\r\n                <WeatherDetailsScreen\r\n                  theme={theme}\r\n                  screenInfo={screenInfo}\r\n                  adaptiveFonts={adaptiveFonts}\r\n                  adaptiveSpacing={adaptiveSpacing}\r\n                  adaptiveBorders={adaptiveBorders}\r\n                  navigate={navigate}\r\n                  createMobileButton={createMobileButton}\r\n                  city={city}\r\n                  loading={loading}\r\n                  error={error}\r\n                  setError={setError}\r\n                  weather={weather}\r\n                  hourlyForecast={memoizedHourlyForecast}\r\n                  dailyForecast={memoizedDailyForecast}\r\n                  weatherCode={weatherCode}\r\n                  getWeather={getWeather}\r\n                  getWeatherByLocation={getWeatherByLocation}\r\n                  onRefresh={handleRefresh}\r\n                  haptic={haptic}\r\n                  handleLocationDetected={handleLocationDetected}\r\n                  selectedView={selectedView}\r\n                  setSelectedView={setSelectedView}\r\n                  showActionSheet={showActionSheet}\r\n                  setShowActionSheet={setShowActionSheet}\r\n                  themeName={themeName}\r\n                  showLiveActivity={showLiveActivity}\r\n                  weatherAlert={weatherAlert}\r\n                  showWeatherSettingsModal={showWeatherSettingsModal}\r\n                  setShowWeatherSettingsModal={setShowWeatherSettingsModal}\r\n                />\r\n              )}\r\n            </SwipeNavigationContainer>\r\n          )}\r\n\r\n          {/* Deployment Status Indicator - Only show in production */}\r\n          {import.meta.env.VITE_APP_ENVIRONMENT === 'production' && (\r\n            <DeploymentStatus theme={themeName === 'dark' ? 'dark' : 'light'} />\r\n          )}\r\n\r\n          {/* Geolocation Verification Modal - Temporarily disabled */}\r\n          <GeolocationVerification\r\n            isOpen={false}\r\n            locationData={pendingLocationData}\r\n            theme={theme}\r\n            isMobile={screenInfo.width < 768}\r\n            onConfirm={handleVerificationConfirm}\r\n            onCancel={handleVerificationCancel}\r\n          />\r\n\r\n          {/* Performance Monitor - Development only - Temporarily disabled */}\r\n          {/* <PerformanceMonitor theme={theme} enabled={false} position=\"bottom-left\" /> */}\r\n\r\n          {/* Mobile Debug - Development only - Temporarily disabled */}\r\n          <React.Suspense\r\n            fallback={\r\n              <div className=\"optimization-loading\">\r\n                Loading mobile debug...\r\n              </div>\r\n            }\r\n          >\r\n            <LazyMobileDebug enabled={false} position=\"bottom-right\" />\r\n          </React.Suspense>\r\n\r\n          {/* iOS 26 Live Activity - Weather Alerts and Updates */}\r\n          <LiveActivity\r\n            isVisible={showLiveActivity || !!weatherAlert}\r\n            title={\r\n              weatherAlert?.title ||\r\n              (weather\r\n                ? `${Math.round(weather.main.temp)}°F in ${city}`\r\n                : 'Weather Update')\r\n            }\r\n            subtitle={\r\n              weatherAlert?.message ||\r\n              (weather\r\n                ? `${weather.weather[0].description} • Updated now`\r\n                : undefined)\r\n            }\r\n            icon={\r\n              weatherAlert ? (\r\n                <span className=\"ios-body\">\r\n                  {weatherAlert.severity === 'severe'\r\n                    ? '⚠️'\r\n                    : weatherAlert.severity === 'warning'\r\n                    ? '🌩️'\r\n                    : 'ℹ️'}\r\n                </span>\r\n              ) : (\r\n                <WeatherIcon code={weatherCode} size={20} animated={true} />\r\n              )\r\n            }\r\n            progress={dataUpdateProgress > 0 ? dataUpdateProgress : undefined}\r\n            theme={theme}\r\n            onTap={() => {\r\n              haptic.buttonPress();\r\n              if (weatherAlert) {\r\n                setWeatherAlert(null);\r\n              }\r\n              setShowLiveActivity(false);\r\n              navigate('Weather');\r\n            }}\r\n            duration={weatherAlert ? 8000 : 4000}\r\n          />\r\n\r\n          {/* PWA Status - Shows installation, updates, and offline capabilities */}\r\n          <React.Suspense\r\n            fallback={\r\n              <div className=\"optimization-loading\">Loading PWA status...</div>\r\n            }\r\n          >\r\n            <LazyPWAStatus\r\n              pwaInstall={pwaInstall}\r\n              serviceWorker={serviceWorker}\r\n              isOnline={isOnline}\r\n              updateAvailable={updateAvailable}\r\n              applyUpdate={applyUpdate}\r\n              enabled={true}\r\n              position=\"top-right\"\r\n            />\r\n          </React.Suspense>\r\n\r\n          {/* iOS Component Showcase - Overlay */}\r\n          {showIOSDemo && (\r\n            <div className=\"ios26-overlay\">\r\n              <IOSComponentShowcase\r\n                theme={theme}\r\n                themeName={themeName}\r\n                onBack={() => setShowIOSDemo(false)}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          {/* Horror Theme Activator - Easy horror mode activation */}\r\n          <HorrorThemeActivator />\r\n\r\n          {/* PWA Install Prompt - Appears when app can be installed */}\r\n          <PWAInstallPrompt\r\n            canInstall={pwaInstall.canInstall}\r\n            onInstall={async () => {\r\n              await pwaInstall.promptInstall();\r\n            }}\r\n            onDismiss={() => {\r\n              // User dismissed the install prompt\r\n              // Could store preference to not show again for some time\r\n            }}\r\n          />\r\n\r\n          {/* Phase 5C: Weather Alerts Floating Action Button */}\r\n          <button\r\n            onClick={() => setShowWeatherAlertPanel(true)}\r\n            style={{\r\n              position: 'fixed',\r\n              bottom: '80px',\r\n              right: '20px',\r\n              width: '56px',\r\n              height: '56px',\r\n              borderRadius: '50%',\r\n              backgroundColor: '#ff6b35',\r\n              border: 'none',\r\n              color: 'white',\r\n              fontSize: '24px',\r\n              boxShadow: '0 4px 12px rgba(255, 107, 53, 0.4)',\r\n              cursor: 'pointer',\r\n              zIndex: 1000,\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              transition: 'all 0.3s ease',\r\n            }}\r\n            onMouseEnter={e => {\r\n              e.currentTarget.style.transform = 'scale(1.1)';\r\n              e.currentTarget.style.boxShadow =\r\n                '0 6px 16px rgba(255, 107, 53, 0.6)';\r\n            }}\r\n            onMouseLeave={e => {\r\n              e.currentTarget.style.transform = 'scale(1)';\r\n              e.currentTarget.style.boxShadow =\r\n                '0 4px 12px rgba(255, 107, 53, 0.4)';\r\n            }}\r\n            aria-label=\"Open weather alerts\"\r\n            title=\"Weather Alerts\"\r\n          >\r\n            🚨\r\n          </button>\r\n\r\n          {/* Performance Dashboard - Development monitoring */}\r\n          <React.Suspense\r\n            fallback={\r\n              <div className=\"optimization-loading\">\r\n                Loading performance dashboard...\r\n              </div>\r\n            }\r\n          >\r\n            <LazyPerformanceDashboard\r\n              enabled={process.env.NODE_ENV === 'development'}\r\n              position=\"bottom-left\"\r\n            />\r\n          </React.Suspense>\r\n\r\n          {/* Memory Optimization Display - August 2025 */}\r\n          {process.env.NODE_ENV === 'development' &&\r\n            memoryOptimization.memoryInfo && (\r\n              <div\r\n                style={{\r\n                  position: 'fixed',\r\n                  top: '10px',\r\n                  right: '10px',\r\n                  backgroundColor: memoryOptimization.isMemoryPressure\r\n                    ? 'rgba(255, 0, 0, 0.9)'\r\n                    : 'rgba(0, 0, 0, 0.8)',\r\n                  color: 'white',\r\n                  padding: '8px',\r\n                  borderRadius: '6px',\r\n                  fontSize: '12px',\r\n                  fontFamily: 'monospace',\r\n                  zIndex: 9999,\r\n                  minWidth: '200px',\r\n                }}\r\n              >\r\n                <div>\r\n                  Memory: {memoryOptimization.memoryUsagePercent.toFixed(1)}%\r\n                </div>\r\n                <div>\r\n                  Used:{' '}\r\n                  {(\r\n                    memoryOptimization.memoryInfo.usedJSHeapSize /\r\n                    1024 /\r\n                    1024\r\n                  ).toFixed(1)}\r\n                  MB\r\n                </div>\r\n                <div>\r\n                  Total:{' '}\r\n                  {(\r\n                    memoryOptimization.memoryInfo.totalJSHeapSize /\r\n                    1024 /\r\n                    1024\r\n                  ).toFixed(1)}\r\n                  MB\r\n                </div>\r\n                {memoryOptimization.isMemoryPressure && (\r\n                  <div style={{ color: '#ffcccb' }}>⚠️ Memory Pressure</div>\r\n                )}\r\n              </div>\r\n            )}\r\n        </EnhancedMobileContainer>\r\n\r\n        {/* Phase 5C: Weather Alerts Panel */}\r\n        <WeatherAlertPanel\r\n          isVisible={showWeatherAlertPanel}\r\n          onClose={() => setShowWeatherAlertPanel(false)}\r\n        />\r\n      </LoadingProvider>\r\n    </Dash0ErrorBoundary>\r\n  );\r\n};\r\n\r\nexport default AppNavigator;\r\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\react-app-env.d.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\screens\\LazyHomeScreen.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\screens\\LazySearchScreen.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'theme' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 12,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 34
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import type { ThemeColors } from '../utils/themeConfig';\n\ninterface LazySearchScreenProps {\n  theme: ThemeColors;\n  navigate: (screenName: string) => void;\n}\n\n/**\n * Lazy-loaded Search Screen Component\n * Future implementation for advanced search functionality\n */\nfunction LazySearchScreen({ theme, navigate }: LazySearchScreenProps) {\n  return (\n    <div className=\"ios26-weather-details-container ios26-container ios26-p-4\">\n      <div className=\"ios26-navigation-bar\">\n        <button\n          className=\"ios26-button ios26-button-secondary\"\n          onClick={() => navigate('Home')}\n        >\n          ← Back\n        </button>\n        <h1 className=\"ios-title1 ios26-text-primary\">Search</h1>\n      </div>\n\n      <div className=\"ios26-content-section\">\n        <p className=\"ios-body ios26-text-secondary\">\n          Advanced search functionality coming soon...\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default LazySearchScreen;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\screens\\LazySettingsScreen.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'theme' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 12,
        "column": 31,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import type { ThemeColors } from '../utils/themeConfig';\n\ninterface LazySettingsScreenProps {\n  theme: ThemeColors;\n  navigate: (screenName: string) => void;\n}\n\n/**\n * Lazy-loaded Settings Screen Component\n * Future implementation for app settings\n */\nfunction LazySettingsScreen({ theme, navigate }: LazySettingsScreenProps) {\n  return (\n    <div className=\"ios26-weather-details-container ios26-container ios26-p-4\">\n      <div className=\"ios26-navigation-bar\">\n        <button\n          className=\"ios26-button ios26-button-secondary\"\n          onClick={() => navigate('Home')}\n        >\n          ← Back\n        </button>\n        <h1 className=\"ios-title1 ios26-text-primary\">Settings</h1>\n      </div>\n\n      <div className=\"ios26-content-section\">\n        <p className=\"ios-body ios26-text-secondary\">\n          App settings and preferences coming soon...\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default LazySettingsScreen;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\screens\\LazyWeatherDetailsScreen.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 7,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 7,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [258, 261], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [258, 261], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'props' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 17,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 11
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import type { ThemeColors } from '../utils/themeConfig';\n\ninterface LazyWeatherDetailsScreenProps {\n  theme: ThemeColors;\n  navigate: (screenName: string) => void;\n  // Add other props as needed - this is a placeholder for future extraction\n  [key: string]: any;\n}\n\n/**\n * Lazy-loaded Weather Details Screen Component\n * Placeholder for future extraction from AppNavigator\n * Currently forwards to the main weather display\n */\nfunction LazyWeatherDetailsScreen({\n  navigate,\n  ...props\n}: LazyWeatherDetailsScreenProps) {\n  return (\n    <div className=\"ios26-weather-details-container ios26-container ios26-p-4\">\n      <div className=\"ios26-navigation-bar\">\n        <button\n          className=\"ios26-button ios26-button-secondary\"\n          onClick={() => navigate('Home')}\n        >\n          ← Home\n        </button>\n        <h1 className=\"ios-title1 ios26-text-primary\">Weather Details</h1>\n      </div>\n\n      <div className=\"ios26-content-section\">\n        <p className=\"ios-body ios26-text-secondary\">\n          Weather details functionality - currently integrated in main app...\n        </p>\n        <button\n          className=\"ios26-button ios26-button-primary\"\n          onClick={() => navigate('Home')}\n        >\n          Return to Weather\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default LazyWeatherDetailsScreen;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\services\\mobile\\FavoriteCitiesManager.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\services\\mobile\\LocationPermissionManager.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\services\\mobile\\SmartCacheManager.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\services\\mobile\\WeatherAlertManager.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 113,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 113,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3241, 3244], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3241, 3244], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 197,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 197,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5664, 5667], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5664, 5667], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 264,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 264,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7584, 7587], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7584, 7587], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 341,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 341,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9877, 9880], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9877, 9880], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 368,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 368,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10612, 10615], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10612, 10615], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 623,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 623,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18129, 18132], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18129, 18132], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 845,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 845,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [24428, 24431], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [24428, 24431], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 856,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 856,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [24840, 24843], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [24840, 24843], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * WeatherAlertManager - Phase 5C Implementation\r\n * Intelligent weather alert system with push notifications and user preferences\r\n *\r\n * Features:\r\n * - Severe weather detection from OpenMeteo data\r\n * - Customizable alert rules and thresholds\r\n * - Web push notifications with fallbacks\r\n * - Location-aware alerting\r\n * - Alert history and management\r\n * - Battery-conscious background processing\r\n */\r\n\r\nimport { logger } from '../../utils/logger';\r\n\r\n// Alert Types and Severity Levels\r\nexport type AlertSeverity = 'info' | 'warning' | 'severe' | 'extreme';\r\nexport type AlertType =\r\n  | 'temperature'\r\n  | 'precipitation'\r\n  | 'wind'\r\n  | 'storm'\r\n  | 'visibility'\r\n  | 'general';\r\n\r\nexport interface WeatherAlert {\r\n  id: string;\r\n  type: AlertType;\r\n  severity: AlertSeverity;\r\n  title: string;\r\n  description: string;\r\n  location: string;\r\n  coordinates?: { lat: number; lon: number };\r\n  startTime: Date;\r\n  endTime?: Date;\r\n  isActive: boolean;\r\n  isRead: boolean;\r\n  notificationSent: boolean;\r\n  createdAt: Date;\r\n}\r\n\r\nexport interface AlertRule {\r\n  id: string;\r\n  type: AlertType;\r\n  enabled: boolean;\r\n  conditions: {\r\n    temperature?: { min?: number; max?: number };\r\n    precipitation?: { threshold: number; duration?: number };\r\n    windSpeed?: { threshold: number };\r\n    visibility?: { threshold: number };\r\n  };\r\n  locations: string[]; // City names or 'current' for GPS location\r\n  timeRange?: { start: string; end: string }; // HH:MM format\r\n  severity: AlertSeverity;\r\n  notificationEnabled: boolean;\r\n  title: string;\r\n  description: string;\r\n  createdAt: Date;\r\n}\r\n\r\nexport interface AlertPreferences {\r\n  enableNotifications: boolean;\r\n  enableSounds: boolean;\r\n  enableVibration: boolean;\r\n  quietHours: { start: string; end: string };\r\n  minimumSeverity: AlertSeverity;\r\n  locationAlertsEnabled: boolean;\r\n  favoriteLocationAlertsOnly: boolean;\r\n  maxAlertsPerDay: number;\r\n  alertHistoryDays: number;\r\n}\r\n\r\nconst DEFAULT_ALERT_PREFERENCES: AlertPreferences = {\r\n  enableNotifications: true,\r\n  enableSounds: true,\r\n  enableVibration: true,\r\n  quietHours: { start: '22:00', end: '07:00' },\r\n  minimumSeverity: 'warning',\r\n  locationAlertsEnabled: true,\r\n  favoriteLocationAlertsOnly: false,\r\n  maxAlertsPerDay: 10,\r\n  alertHistoryDays: 7,\r\n};\r\n\r\nexport class WeatherAlertManager {\r\n  private static instance: WeatherAlertManager;\r\n  private alerts: WeatherAlert[] = [];\r\n  private alertRules: AlertRule[] = [];\r\n  private preferences: AlertPreferences = DEFAULT_ALERT_PREFERENCES;\r\n  private lastAlertCheck: Date = new Date(0);\r\n  private alertCounts: Map<string, number> = new Map(); // Daily alert counts by location\r\n  private notificationPermission: NotificationPermission = 'default';\r\n\r\n  constructor() {\r\n    this.loadStoredData();\r\n    this.requestNotificationPermission();\r\n    this.setupDefaultAlertRules();\r\n  }\r\n\r\n  static getInstance(): WeatherAlertManager {\r\n    if (!WeatherAlertManager.instance) {\r\n      WeatherAlertManager.instance = new WeatherAlertManager();\r\n    }\r\n    return WeatherAlertManager.instance;\r\n  }\r\n\r\n  // ===== Core Alert Processing =====\r\n\r\n  /**\r\n   * Process weather data and trigger alerts based on conditions\r\n   */\r\n  async processWeatherData(\r\n    weatherData: any,\r\n    location: string,\r\n    coordinates?: { lat: number; lon: number },\r\n  ): Promise<WeatherAlert[]> {\r\n    try {\r\n      const triggeredAlerts: WeatherAlert[] = [];\r\n      const currentTime = new Date();\r\n\r\n      // Skip if within rate limit or quiet hours\r\n      if (!this.shouldProcessAlerts(location, currentTime)) {\r\n        return triggeredAlerts;\r\n      }\r\n\r\n      // Process each active alert rule\r\n      for (const rule of this.alertRules.filter(r => r.enabled)) {\r\n        // Check location match\r\n        if (!this.isLocationMatch(rule, location, coordinates)) {\r\n          continue;\r\n        }\r\n\r\n        // Check time range\r\n        if (!this.isTimeRangeMatch(rule, currentTime)) {\r\n          continue;\r\n        }\r\n\r\n        // Evaluate weather conditions\r\n        const alertTriggered = await this.evaluateAlertConditions(\r\n          rule,\r\n          weatherData,\r\n          location,\r\n        );\r\n        if (alertTriggered) {\r\n          // Check for duplicate recent alerts\r\n          const existingAlert = this.findRecentAlert(rule, location, 60); // 60 minutes\r\n          if (!existingAlert) {\r\n            const alert = this.createAlert(\r\n              rule,\r\n              weatherData,\r\n              location,\r\n              coordinates,\r\n            );\r\n            triggeredAlerts.push(alert);\r\n            this.addAlert(alert);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Process severe weather warnings from OpenMeteo\r\n      const severeWeatherAlerts = await this.processSevereWeatherWarnings(\r\n        weatherData,\r\n        location,\r\n        coordinates,\r\n      );\r\n      triggeredAlerts.push(...severeWeatherAlerts);\r\n\r\n      // Send notifications for new alerts\r\n      for (const alert of triggeredAlerts) {\r\n        await this.sendNotification(alert);\r\n      }\r\n\r\n      this.lastAlertCheck = currentTime;\r\n      this.saveStoredData();\r\n\r\n      logger.info(`Processed weather alerts for ${location}`, {\r\n        alertsTriggered: triggeredAlerts.length,\r\n        location,\r\n        timestamp: currentTime.toISOString(),\r\n      });\r\n\r\n      return triggeredAlerts;\r\n    } catch (error) {\r\n      logger.error('Error processing weather data for alerts', {\r\n        error,\r\n        location,\r\n      });\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evaluate if weather conditions meet alert rule criteria\r\n   */\r\n  private async evaluateAlertConditions(\r\n    rule: AlertRule,\r\n    weatherData: any,\r\n    location: string,\r\n  ): Promise<boolean> {\r\n    try {\r\n      const conditions = rule.conditions;\r\n      const current = weatherData.current_weather || weatherData.current || {};\r\n      const hourly = weatherData.hourly || {};\r\n\r\n      // Temperature alerts\r\n      if (conditions.temperature) {\r\n        const temp = current.temperature || current.temperature_2m;\r\n        if (temp !== undefined) {\r\n          if (\r\n            conditions.temperature.min !== undefined &&\r\n            temp < conditions.temperature.min\r\n          ) {\r\n            return true;\r\n          }\r\n          if (\r\n            conditions.temperature.max !== undefined &&\r\n            temp > conditions.temperature.max\r\n          ) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Precipitation alerts\r\n      if (conditions.precipitation) {\r\n        const precipitation =\r\n          current.precipitation || hourly.precipitation?.[0] || 0;\r\n        if (precipitation >= conditions.precipitation.threshold) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      // Wind speed alerts\r\n      if (conditions.windSpeed) {\r\n        const windSpeed = current.windspeed || current.wind_speed_10m || 0;\r\n        if (windSpeed >= conditions.windSpeed.threshold) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      // Visibility alerts\r\n      if (conditions.visibility) {\r\n        const visibility = current.visibility || 10000; // Default to good visibility\r\n        if (visibility <= conditions.visibility.threshold) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    } catch (error) {\r\n      logger.error('Error evaluating alert conditions', {\r\n        error,\r\n        rule: rule.id,\r\n        location,\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process severe weather warnings from OpenMeteo weather codes\r\n   */\r\n  private async processSevereWeatherWarnings(\r\n    weatherData: any,\r\n    location: string,\r\n    coordinates?: { lat: number; lon: number },\r\n  ): Promise<WeatherAlert[]> {\r\n    const severeAlerts: WeatherAlert[] = [];\r\n\r\n    try {\r\n      const current = weatherData.current_weather || weatherData.current || {};\r\n      const weatherCode = current.weathercode || current.weather_code;\r\n\r\n      if (weatherCode !== undefined) {\r\n        const severity = this.getWeatherCodeSeverity(weatherCode);\r\n\r\n        if (severity === 'severe' || severity === 'extreme') {\r\n          const existingAlert = this.findRecentAlert(\r\n            { id: 'severe-weather', type: 'general' } as AlertRule,\r\n            location,\r\n            120, // 2 hours\r\n          );\r\n\r\n          if (!existingAlert) {\r\n            const alert: WeatherAlert = {\r\n              id: `severe-${Date.now()}-${location}`,\r\n              type: 'storm',\r\n              severity,\r\n              title: this.getWeatherCodeTitle(weatherCode),\r\n              description: this.getWeatherCodeDescription(weatherCode, current),\r\n              location,\r\n              coordinates,\r\n              startTime: new Date(),\r\n              isActive: true,\r\n              isRead: false,\r\n              notificationSent: false,\r\n              createdAt: new Date(),\r\n            };\r\n\r\n            severeAlerts.push(alert);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      logger.error('Error processing severe weather warnings', {\r\n        error,\r\n        location,\r\n      });\r\n    }\r\n\r\n    return severeAlerts;\r\n  }\r\n\r\n  // ===== Alert Management =====\r\n\r\n  /**\r\n   * Add new alert to system\r\n   */\r\n  private addAlert(alert: WeatherAlert): void {\r\n    this.alerts.unshift(alert); // Add to beginning for chronological order\r\n\r\n    // Cleanup old alerts based on preferences\r\n    const cutoffDate = new Date();\r\n    cutoffDate.setDate(\r\n      cutoffDate.getDate() - this.preferences.alertHistoryDays,\r\n    );\r\n\r\n    this.alerts = this.alerts.filter(a => a.createdAt >= cutoffDate);\r\n\r\n    // Update daily count\r\n    const today = new Date().toDateString();\r\n    const todayCount = this.alertCounts.get(today) || 0;\r\n    this.alertCounts.set(today, todayCount + 1);\r\n  }\r\n\r\n  /**\r\n   * Create alert from rule and weather data\r\n   */\r\n  private createAlert(\r\n    rule: AlertRule,\r\n    weatherData: any,\r\n    location: string,\r\n    coordinates?: { lat: number; lon: number },\r\n  ): WeatherAlert {\r\n    const current = weatherData.current_weather || weatherData.current || {};\r\n\r\n    return {\r\n      id: `${rule.id}-${Date.now()}-${location}`,\r\n      type: rule.type,\r\n      severity: rule.severity,\r\n      title: rule.title,\r\n      description: this.formatAlertDescription(rule, current, location),\r\n      location,\r\n      coordinates,\r\n      startTime: new Date(),\r\n      isActive: true,\r\n      isRead: false,\r\n      notificationSent: false,\r\n      createdAt: new Date(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Format alert description with current weather data\r\n   */\r\n  private formatAlertDescription(\r\n    rule: AlertRule,\r\n    weatherData: any,\r\n    location: string,\r\n  ): string {\r\n    let description = rule.description;\r\n\r\n    // Replace placeholders with actual values\r\n    description = description.replace('{location}', location);\r\n    description = description.replace(\r\n      '{temperature}',\r\n      `${weatherData.temperature || weatherData.temperature_2m || 'N/A'}°F`,\r\n    );\r\n    description = description.replace(\r\n      '{windSpeed}',\r\n      `${weatherData.windspeed || weatherData.wind_speed_10m || 'N/A'} mph`,\r\n    );\r\n    description = description.replace(\r\n      '{time}',\r\n      new Date().toLocaleTimeString(),\r\n    );\r\n\r\n    return description;\r\n  }\r\n\r\n  // ===== Notification System =====\r\n\r\n  /**\r\n   * Send notification for alert\r\n   */\r\n  private async sendNotification(alert: WeatherAlert): Promise<void> {\r\n    try {\r\n      if (!this.preferences.enableNotifications || !alert.notificationSent) {\r\n        return;\r\n      }\r\n\r\n      // Check notification permission\r\n      if (this.notificationPermission !== 'granted') {\r\n        logger.warn(\r\n          'Notification permission not granted, skipping notification',\r\n        );\r\n        return;\r\n      }\r\n\r\n      // Check if within quiet hours\r\n      if (this.isQuietHours()) {\r\n        logger.info('Within quiet hours, skipping notification', {\r\n          alert: alert.id,\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Create notification\r\n      const notification = new Notification(alert.title, {\r\n        body: alert.description,\r\n        icon: '/icons/weather-alert.png',\r\n        badge: '/icons/weather-badge.png',\r\n        tag: `weather-alert-${alert.type}`,\r\n        data: { alertId: alert.id, location: alert.location },\r\n        requireInteraction: alert.severity === 'extreme',\r\n        silent: !this.preferences.enableSounds,\r\n      });\r\n\r\n      // Handle notification events\r\n      notification.onclick = () => {\r\n        this.markAlertAsRead(alert.id);\r\n        window.focus();\r\n        notification.close();\r\n      };\r\n\r\n      notification.onclose = () => {\r\n        this.markAlertAsRead(alert.id);\r\n      };\r\n\r\n      // Vibration for mobile devices\r\n      if (this.preferences.enableVibration && 'vibrate' in navigator) {\r\n        const pattern =\r\n          alert.severity === 'extreme'\r\n            ? [200, 100, 200, 100, 200]\r\n            : [200, 100, 200];\r\n        navigator.vibrate(pattern);\r\n      }\r\n\r\n      alert.notificationSent = true;\r\n\r\n      logger.info('Notification sent successfully', {\r\n        alertId: alert.id,\r\n        type: alert.type,\r\n        severity: alert.severity,\r\n      });\r\n    } catch (error) {\r\n      logger.error('Error sending notification', { error, alertId: alert.id });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Request notification permission from user\r\n   */\r\n  private async requestNotificationPermission(): Promise<void> {\r\n    try {\r\n      if ('Notification' in window) {\r\n        this.notificationPermission = Notification.permission;\r\n\r\n        if (this.notificationPermission === 'default') {\r\n          const permission = await Notification.requestPermission();\r\n          this.notificationPermission = permission;\r\n\r\n          logger.info('Notification permission requested', { permission });\r\n        }\r\n      } else {\r\n        logger.warn('Notifications not supported in this browser');\r\n      }\r\n    } catch (error) {\r\n      logger.error('Error requesting notification permission', { error });\r\n    }\r\n  }\r\n\r\n  // ===== Helper Methods =====\r\n\r\n  /**\r\n   * Check if alerts should be processed based on rate limits and preferences\r\n   */\r\n  private shouldProcessAlerts(location: string, currentTime: Date): boolean {\r\n    // Check daily limit\r\n    const today = currentTime.toDateString();\r\n    const todayCount = this.alertCounts.get(today) || 0;\r\n    if (todayCount >= this.preferences.maxAlertsPerDay) {\r\n      return false;\r\n    }\r\n\r\n    // Check if too soon since last check (rate limiting)\r\n    const timeSinceLastCheck =\r\n      currentTime.getTime() - this.lastAlertCheck.getTime();\r\n    if (timeSinceLastCheck < 5 * 60 * 1000) {\r\n      // 5 minutes minimum\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Check if location matches alert rule\r\n   */\r\n  private isLocationMatch(\r\n    rule: AlertRule,\r\n    location: string,\r\n    coordinates?: { lat: number; lon: number },\r\n  ): boolean {\r\n    if (rule.locations.includes('current') && coordinates) {\r\n      return true;\r\n    }\r\n\r\n    return rule.locations.some(\r\n      ruleLocation => ruleLocation.toLowerCase() === location.toLowerCase(),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check if current time is within rule's time range\r\n   */\r\n  private isTimeRangeMatch(rule: AlertRule, currentTime: Date): boolean {\r\n    if (!rule.timeRange) {\r\n      return true;\r\n    }\r\n\r\n    const currentHour = currentTime.getHours();\r\n    const currentMinute = currentTime.getMinutes();\r\n    const currentTimeInMinutes = currentHour * 60 + currentMinute;\r\n\r\n    const [startHour, startMinute] = rule.timeRange.start\r\n      .split(':')\r\n      .map(Number);\r\n    const [endHour, endMinute] = rule.timeRange.end.split(':').map(Number);\r\n\r\n    const startTimeInMinutes = startHour * 60 + startMinute;\r\n    const endTimeInMinutes = endHour * 60 + endMinute;\r\n\r\n    if (startTimeInMinutes <= endTimeInMinutes) {\r\n      return (\r\n        currentTimeInMinutes >= startTimeInMinutes &&\r\n        currentTimeInMinutes <= endTimeInMinutes\r\n      );\r\n    } else {\r\n      // Crosses midnight\r\n      return (\r\n        currentTimeInMinutes >= startTimeInMinutes ||\r\n        currentTimeInMinutes <= endTimeInMinutes\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if current time is within quiet hours\r\n   */\r\n  private isQuietHours(): boolean {\r\n    const currentTime = new Date();\r\n    return !this.isTimeRangeMatch(\r\n      { timeRange: this.preferences.quietHours } as AlertRule,\r\n      currentTime,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Find recent alert matching criteria\r\n   */\r\n  private findRecentAlert(\r\n    rule: { id: string; type: AlertType },\r\n    location: string,\r\n    minutesBack: number,\r\n  ): WeatherAlert | undefined {\r\n    const cutoffTime = new Date();\r\n    cutoffTime.setMinutes(cutoffTime.getMinutes() - minutesBack);\r\n\r\n    return this.alerts.find(\r\n      alert =>\r\n        alert.type === rule.type &&\r\n        alert.location === location &&\r\n        alert.createdAt >= cutoffTime,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get severity level from OpenMeteo weather code\r\n   */\r\n  private getWeatherCodeSeverity(weatherCode: number): AlertSeverity {\r\n    // OpenMeteo weather codes: https://open-meteo.com/en/docs\r\n    if ([95, 96, 97].includes(weatherCode)) return 'extreme'; // Thunderstorms with hail\r\n    if ([71, 73, 75, 77, 85, 86].includes(weatherCode)) return 'severe'; // Heavy snow\r\n    if ([65, 67, 81, 82].includes(weatherCode)) return 'warning'; // Heavy rain\r\n    return 'info';\r\n  }\r\n\r\n  /**\r\n   * Get title for weather code\r\n   */\r\n  private getWeatherCodeTitle(weatherCode: number): string {\r\n    const titles: { [key: number]: string } = {\r\n      95: 'Severe Thunderstorm Warning',\r\n      96: 'Thunderstorm with Light Hail',\r\n      97: 'Thunderstorm with Heavy Hail',\r\n      75: 'Heavy Snow Warning',\r\n      77: 'Snow Grains Warning',\r\n      85: 'Heavy Snow Showers',\r\n      86: 'Heavy Snow Showers',\r\n      67: 'Heavy Freezing Rain',\r\n      82: 'Heavy Rain Showers',\r\n    };\r\n\r\n    return titles[weatherCode] || 'Severe Weather Alert';\r\n  }\r\n\r\n  /**\r\n   * Get description for weather code\r\n   */\r\n  private getWeatherCodeDescription(\r\n    weatherCode: number,\r\n    weatherData: any,\r\n  ): string {\r\n    const temp = weatherData.temperature || weatherData.temperature_2m || 'N/A';\r\n    const wind = weatherData.windspeed || weatherData.wind_speed_10m || 'N/A';\r\n\r\n    const descriptions: { [key: number]: string } = {\r\n      95: `Severe thunderstorms in your area. Temperature: ${temp}°F, Wind: ${wind} mph. Stay indoors and avoid travel.`,\r\n      96: `Thunderstorm with light hail reported. Temperature: ${temp}°F. Protect vehicles and stay inside.`,\r\n      97: `Dangerous thunderstorm with heavy hail. Temperature: ${temp}°F, Wind: ${wind} mph. Seek shelter immediately.`,\r\n      75: `Heavy snowfall warning in effect. Temperature: ${temp}°F. Avoid unnecessary travel.`,\r\n      82: `Heavy rain showers expected. Temperature: ${temp}°F. Watch for flooding and reduced visibility.`,\r\n    };\r\n\r\n    return (\r\n      descriptions[weatherCode] ||\r\n      `Severe weather conditions detected. Temperature: ${temp}°F, Wind: ${wind} mph.`\r\n    );\r\n  }\r\n\r\n  // ===== Public API Methods =====\r\n\r\n  /**\r\n   * Get all active alerts\r\n   */\r\n  getActiveAlerts(): WeatherAlert[] {\r\n    return this.alerts.filter(alert => alert.isActive);\r\n  }\r\n\r\n  /**\r\n   * Get unread alerts\r\n   */\r\n  getUnreadAlerts(): WeatherAlert[] {\r\n    return this.alerts.filter(alert => !alert.isRead && alert.isActive);\r\n  }\r\n\r\n  /**\r\n   * Get alert history\r\n   */\r\n  getAlertHistory(days?: number): WeatherAlert[] {\r\n    if (!days) return this.alerts;\r\n\r\n    const cutoffDate = new Date();\r\n    cutoffDate.setDate(cutoffDate.getDate() - days);\r\n\r\n    return this.alerts.filter(alert => alert.createdAt >= cutoffDate);\r\n  }\r\n\r\n  /**\r\n   * Mark alert as read\r\n   */\r\n  markAlertAsRead(alertId: string): void {\r\n    const alert = this.alerts.find(a => a.id === alertId);\r\n    if (alert) {\r\n      alert.isRead = true;\r\n      this.saveStoredData();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mark all alerts as read\r\n   */\r\n  markAllAlertsAsRead(): void {\r\n    this.alerts.forEach(alert => (alert.isRead = true));\r\n    this.saveStoredData();\r\n  }\r\n\r\n  /**\r\n   * Dismiss/deactivate alert\r\n   */\r\n  dismissAlert(alertId: string): void {\r\n    const alert = this.alerts.find(a => a.id === alertId);\r\n    if (alert) {\r\n      alert.isActive = false;\r\n      alert.isRead = true;\r\n      this.saveStoredData();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get alert rules\r\n   */\r\n  getAlertRules(): AlertRule[] {\r\n    return [...this.alertRules];\r\n  }\r\n\r\n  /**\r\n   * Add or update alert rule\r\n   */\r\n  setAlertRule(rule: Omit<AlertRule, 'id' | 'createdAt'>): string {\r\n    const ruleId = `rule-${Date.now()}`;\r\n    const fullRule: AlertRule = {\r\n      ...rule,\r\n      id: ruleId,\r\n      createdAt: new Date(),\r\n    };\r\n\r\n    this.alertRules.push(fullRule);\r\n    this.saveStoredData();\r\n\r\n    return ruleId;\r\n  }\r\n\r\n  /**\r\n   * Update existing alert rule\r\n   */\r\n  updateAlertRule(ruleId: string, updates: Partial<AlertRule>): boolean {\r\n    const ruleIndex = this.alertRules.findIndex(r => r.id === ruleId);\r\n    if (ruleIndex >= 0) {\r\n      this.alertRules[ruleIndex] = {\r\n        ...this.alertRules[ruleIndex],\r\n        ...updates,\r\n      };\r\n      this.saveStoredData();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Delete alert rule\r\n   */\r\n  deleteAlertRule(ruleId: string): boolean {\r\n    const ruleIndex = this.alertRules.findIndex(r => r.id === ruleId);\r\n    if (ruleIndex >= 0) {\r\n      this.alertRules.splice(ruleIndex, 1);\r\n      this.saveStoredData();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Get alert preferences\r\n   */\r\n  getPreferences(): AlertPreferences {\r\n    return { ...this.preferences };\r\n  }\r\n\r\n  /**\r\n   * Update alert preferences\r\n   */\r\n  updatePreferences(updates: Partial<AlertPreferences>): void {\r\n    this.preferences = { ...this.preferences, ...updates };\r\n    this.saveStoredData();\r\n  }\r\n\r\n  /**\r\n   * Reset alert preferences to defaults\r\n   */\r\n  resetPreferences(): void {\r\n    this.preferences = { ...DEFAULT_ALERT_PREFERENCES };\r\n    this.saveStoredData();\r\n  }\r\n\r\n  // ===== Default Alert Rules Setup =====\r\n\r\n  /**\r\n   * Setup default alert rules for new users\r\n   */\r\n  private setupDefaultAlertRules(): void {\r\n    if (this.alertRules.length === 0) {\r\n      const defaultRules: Omit<AlertRule, 'id' | 'createdAt'>[] = [\r\n        {\r\n          type: 'temperature',\r\n          enabled: true,\r\n          conditions: { temperature: { max: 100 } },\r\n          locations: ['current'],\r\n          severity: 'warning',\r\n          notificationEnabled: true,\r\n          title: 'Extreme Heat Warning',\r\n          description:\r\n            'Temperature is extremely high at {temperature} in {location}. Stay hydrated and avoid outdoor activities.',\r\n        },\r\n        {\r\n          type: 'temperature',\r\n          enabled: true,\r\n          conditions: { temperature: { min: 20 } },\r\n          locations: ['current'],\r\n          severity: 'warning',\r\n          notificationEnabled: true,\r\n          title: 'Extreme Cold Warning',\r\n          description:\r\n            'Temperature is dangerously low at {temperature} in {location}. Dress warmly and limit outdoor exposure.',\r\n        },\r\n        {\r\n          type: 'wind',\r\n          enabled: true,\r\n          conditions: { windSpeed: { threshold: 40 } },\r\n          locations: ['current'],\r\n          severity: 'severe',\r\n          notificationEnabled: true,\r\n          title: 'High Wind Warning',\r\n          description:\r\n            'Dangerous wind speeds of {windSpeed} detected in {location}. Secure outdoor items and avoid driving.',\r\n        },\r\n        {\r\n          type: 'storm',\r\n          enabled: true,\r\n          conditions: {},\r\n          locations: ['current'],\r\n          severity: 'extreme',\r\n          notificationEnabled: true,\r\n          title: 'Severe Weather Alert',\r\n          description:\r\n            'Severe weather conditions detected in {location}. Take immediate shelter and stay indoors.',\r\n        },\r\n      ];\r\n\r\n      defaultRules.forEach(rule => this.setAlertRule(rule));\r\n    }\r\n  }\r\n\r\n  // ===== Data Persistence =====\r\n\r\n  /**\r\n   * Load stored data from localStorage\r\n   */\r\n  private loadStoredData(): void {\r\n    try {\r\n      const alertsData = localStorage.getItem('weatherAlerts');\r\n      if (alertsData) {\r\n        const parsed = JSON.parse(alertsData);\r\n        this.alerts = parsed.map((alert: any) => ({\r\n          ...alert,\r\n          startTime: new Date(alert.startTime),\r\n          endTime: alert.endTime ? new Date(alert.endTime) : undefined,\r\n          createdAt: new Date(alert.createdAt),\r\n        }));\r\n      }\r\n\r\n      const rulesData = localStorage.getItem('weatherAlertRules');\r\n      if (rulesData) {\r\n        const parsed = JSON.parse(rulesData);\r\n        this.alertRules = parsed.map((rule: any) => ({\r\n          ...rule,\r\n          createdAt: new Date(rule.createdAt),\r\n        }));\r\n      }\r\n\r\n      const preferencesData = localStorage.getItem('weatherAlertPreferences');\r\n      if (preferencesData) {\r\n        this.preferences = {\r\n          ...DEFAULT_ALERT_PREFERENCES,\r\n          ...JSON.parse(preferencesData),\r\n        };\r\n      }\r\n\r\n      const countsData = localStorage.getItem('weatherAlertCounts');\r\n      if (countsData) {\r\n        this.alertCounts = new Map(JSON.parse(countsData));\r\n      }\r\n    } catch (error) {\r\n      logger.error('Error loading stored alert data', { error });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save data to localStorage\r\n   */\r\n  private saveStoredData(): void {\r\n    try {\r\n      localStorage.setItem('weatherAlerts', JSON.stringify(this.alerts));\r\n      localStorage.setItem(\r\n        'weatherAlertRules',\r\n        JSON.stringify(this.alertRules),\r\n      );\r\n      localStorage.setItem(\r\n        'weatherAlertPreferences',\r\n        JSON.stringify(this.preferences),\r\n      );\r\n      localStorage.setItem(\r\n        'weatherAlertCounts',\r\n        JSON.stringify(Array.from(this.alertCounts.entries())),\r\n      );\r\n    } catch (error) {\r\n      logger.error('Error saving alert data', { error });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all stored data (for testing/reset)\r\n   */\r\n  clearAllData(): void {\r\n    this.alerts = [];\r\n    this.alertRules = [];\r\n    this.preferences = { ...DEFAULT_ALERT_PREFERENCES };\r\n    this.alertCounts.clear();\r\n\r\n    localStorage.removeItem('weatherAlerts');\r\n    localStorage.removeItem('weatherAlertRules');\r\n    localStorage.removeItem('weatherAlertPreferences');\r\n    localStorage.removeItem('weatherAlertCounts');\r\n\r\n    this.setupDefaultAlertRules();\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const weatherAlertManager = WeatherAlertManager.getInstance();\r\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\services\\weatherApiWithTelemetry.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\setupTests.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 59,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 59,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1572, 1575], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1572, 1575], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1741, 1744], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1741, 1744], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 76,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 76,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1974, 1977], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1974, 1977], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 76,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 76,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2014, 2017], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2014, 2017], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 80,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 80,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2072, 2075], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2072, 2075], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 104,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 104,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2810, 2813], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2810, 2813], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\types.d.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\types\\global.d.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\types\\weather.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\AutoCompleteSearch.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 88,
        "column": 31,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 88,
        "endColumn": 65
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * AutoComplete Search Component\r\n *\r\n * Provides real-time city search with autocomplete suggestions.\r\n * Integrates with OpenStreetMap Nominatim for city lookups.\r\n */\r\n\r\nimport React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport { useHaptic } from './hapticHooks';\r\nimport { logError } from './logger';\r\nimport type { ThemeColors } from './themeConfig';\r\n\r\ninterface CityResult {\r\n  display_name: string;\r\n  lat: string;\r\n  lon: string;\r\n  place_id: number;\r\n  type: string;\r\n  address: {\r\n    city?: string;\r\n    town?: string;\r\n    village?: string;\r\n    state?: string;\r\n    country?: string;\r\n    country_code?: string;\r\n  };\r\n}\r\n\r\ninterface AutoCompleteSearchProps {\r\n  theme: ThemeColors;\r\n  isMobile: boolean;\r\n  onCitySelected: (\r\n    cityName: string,\r\n    latitude: number,\r\n    longitude: number\r\n  ) => void;\r\n  onError?: (error: string) => void;\r\n  disabled?: boolean;\r\n  placeholder?: string;\r\n  initialValue?: string;\r\n  className?: string;\r\n}\r\n\r\nconst AutoCompleteSearch: React.FC<AutoCompleteSearchProps> = ({\r\n  theme,\r\n  isMobile,\r\n  onCitySelected,\r\n  onError,\r\n  disabled = false,\r\n  placeholder = 'Search for a city...',\r\n  initialValue = '',\r\n  className,\r\n}) => {\r\n  const [query, setQuery] = useState(initialValue);\r\n  const [suggestions, setSuggestions] = useState<CityResult[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [selectedIndex, setSelectedIndex] = useState(-1);\r\n  const [hasSearched, setHasSearched] = useState(false);\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const dropdownRef = useRef<HTMLDivElement>(null);\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const abortControllerRef = useRef<AbortController | null>(null);\r\n\r\n  const haptic = useHaptic();\r\n\r\n  // Debounced search function with caching\r\n  const searchCache = useRef<Map<string, CityResult[]>>(new Map());\r\n\r\n  const searchCities = useCallback(\r\n    async (searchQuery: string) => {\r\n      if (!searchQuery.trim() || searchQuery.length < 2) {\r\n        setSuggestions([]);\r\n        setIsOpen(false);\r\n        return;\r\n      }\r\n\r\n      // Check cache first for instant results\r\n      const cacheKey = searchQuery.toLowerCase().trim();\r\n      if (searchCache.current.has(cacheKey)) {\r\n        const cachedResults = searchCache.current.get(cacheKey)!;\r\n        setSuggestions(cachedResults);\r\n        setIsOpen(cachedResults.length > 0);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Cancel previous request\r\n      if (abortControllerRef.current) {\r\n        abortControllerRef.current.abort();\r\n      }\r\n\r\n      setIsLoading(true);\r\n      setHasSearched(true);\r\n\r\n      try {\r\n        // Create new abort controller for this request\r\n        abortControllerRef.current = new AbortController();\r\n\r\n        // Optimized query with better parameters for speed\r\n        const searchParams = new URLSearchParams({\r\n          q: searchQuery,\r\n          format: 'json',\r\n          addressdetails: '1',\r\n          limit: '6', // Reduced from 8 for faster response\r\n          countrycodes: '', // Allow all countries\r\n          'accept-language': 'en', // Force English for consistency\r\n          dedupe: '1', // Remove duplicates server-side\r\n          extratags: '0', // Disable extra tags for speed\r\n          namedetails: '0', // Disable name details for speed\r\n        });\r\n\r\n        const response = await fetch(\r\n          `https://nominatim.openstreetmap.org/search?${searchParams}`,\r\n          {\r\n            headers: {\r\n              'User-Agent':\r\n                'Weather-App/1.0 (https://github.com/user/weather-app)',\r\n            },\r\n            signal: abortControllerRef.current.signal,\r\n            // Add timeout for faster failure\r\n            cache: 'default',\r\n          },\r\n        );\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Search failed: ${response.status}`);\r\n        }\r\n\r\n        const results: CityResult[] = await response.json();\r\n\r\n        // Optimized filtering for better performance and relevance\r\n        const filteredResults = results\r\n          .filter(result => {\r\n            // Quick relevance check - prioritize exact matches\r\n            const searchLower = searchQuery.toLowerCase();\r\n            const displayLower = result.display_name.toLowerCase();\r\n\r\n            // Boost exact city name matches\r\n            if (\r\n              result.address?.city?.toLowerCase().includes(searchLower) ||\r\n              result.address?.town?.toLowerCase().includes(searchLower) ||\r\n              result.address?.village?.toLowerCase().includes(searchLower)\r\n            ) {\r\n              return true;\r\n            }\r\n\r\n            // Include if display name starts with search term (high relevance)\r\n            if (displayLower.startsWith(searchLower)) {\r\n              return true;\r\n            }\r\n\r\n            // Include if any part of display name contains search term\r\n            return displayLower.includes(searchLower);\r\n          })\r\n          // Sort by relevance - exact matches first\r\n          .sort((a, b) => {\r\n            const searchLower = searchQuery.toLowerCase();\r\n            const aCity = (\r\n              a.address?.city ||\r\n              a.address?.town ||\r\n              a.address?.village ||\r\n              ''\r\n            ).toLowerCase();\r\n            const bCity = (\r\n              b.address?.city ||\r\n              b.address?.town ||\r\n              b.address?.village ||\r\n              ''\r\n            ).toLowerCase();\r\n\r\n            // Exact city name matches first\r\n            if (aCity === searchLower && bCity !== searchLower) return -1;\r\n            if (bCity === searchLower && aCity !== searchLower) return 1;\r\n\r\n            // Starts with search term next\r\n            if (aCity.startsWith(searchLower) && !bCity.startsWith(searchLower))\r\n              return -1;\r\n            if (bCity.startsWith(searchLower) && !aCity.startsWith(searchLower))\r\n              return 1;\r\n\r\n            return 0;\r\n          })\r\n          .slice(0, 5); // Reduced to 5 for faster rendering\r\n\r\n        // Cache results for future use\r\n        searchCache.current.set(cacheKey, filteredResults);\r\n\r\n        // Limit cache size to prevent memory issues\r\n        if (searchCache.current.size > 50) {\r\n          const firstKey = searchCache.current.keys().next().value;\r\n          if (firstKey) {\r\n            searchCache.current.delete(firstKey);\r\n          }\r\n        }\r\n\r\n        setSuggestions(filteredResults);\r\n        setIsOpen(filteredResults.length > 0);\r\n        setSelectedIndex(-1);\r\n      } catch (error) {\r\n        if (error instanceof Error && error.name !== 'AbortError') {\r\n          logError('City search error:', error);\r\n          onError?.('Failed to search for cities. Please try again.');\r\n        }\r\n        setSuggestions([]);\r\n        setIsOpen(false);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    },\r\n    [onError],\r\n  );\r\n\r\n  // Faster debounce for better responsiveness\r\n  useEffect(() => {\r\n    if (timeoutRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n    }\r\n\r\n    // Reduce debounce time for snappier response\r\n    const debounceTime = query.length >= 3 ? 150 : 250; // Faster for longer queries\r\n\r\n    timeoutRef.current = setTimeout(() => {\r\n      searchCities(query);\r\n    }, debounceTime);\r\n\r\n    return () => {\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current);\r\n      }\r\n    };\r\n  }, [query, searchCities]);\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      const target = event.target as Node;\r\n\r\n      if (\r\n        dropdownRef.current &&\r\n        !dropdownRef.current.contains(target) &&\r\n        inputRef.current &&\r\n        !inputRef.current.contains(target)\r\n      ) {\r\n        setIsOpen(false);\r\n        setSelectedIndex(-1);\r\n      }\r\n    };\r\n\r\n    // Use capture phase to prevent interference with other click handlers\r\n    document.addEventListener('mousedown', handleClickOutside, true);\r\n    return () =>\r\n      document.removeEventListener('mousedown', handleClickOutside, true);\r\n  }, []);\r\n\r\n  // Handle keyboard navigation\r\n  const handleKeyDown = (event: React.KeyboardEvent) => {\r\n    if (!isOpen) {\r\n      if (event.key === 'ArrowDown' && suggestions.length > 0) {\r\n        event.preventDefault();\r\n        setIsOpen(true);\r\n        setSelectedIndex(0);\r\n      }\r\n      return;\r\n    }\r\n\r\n    switch (event.key) {\r\n      case 'ArrowDown':\r\n        event.preventDefault();\r\n        setSelectedIndex(prev =>\r\n          prev < suggestions.length - 1 ? prev + 1 : 0,\r\n        );\r\n        break;\r\n      case 'ArrowUp':\r\n        event.preventDefault();\r\n        setSelectedIndex(prev =>\r\n          prev > 0 ? prev - 1 : suggestions.length - 1,\r\n        );\r\n        break;\r\n      case 'Enter':\r\n        event.preventDefault();\r\n        if (selectedIndex >= 0 && suggestions[selectedIndex]) {\r\n          handleSuggestionSelect(suggestions[selectedIndex]);\r\n        } else if (suggestions.length === 1) {\r\n          // Auto-select first suggestion if only one available\r\n          handleSuggestionSelect(suggestions[0]);\r\n        }\r\n        break;\r\n      case 'Escape':\r\n        event.preventDefault();\r\n        setIsOpen(false);\r\n        setSelectedIndex(-1);\r\n        inputRef.current?.blur();\r\n        break;\r\n      case 'Tab':\r\n        // Allow tab to close suggestions\r\n        setIsOpen(false);\r\n        setSelectedIndex(-1);\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Format city display name\r\n  const formatCityName = useCallback((result: CityResult): string => {\r\n    const { address } = result;\r\n    const cityName = address.city || address.town || address.village || '';\r\n    const state = address.state || '';\r\n    const country = address.country || '';\r\n\r\n    if (cityName && state && country) {\r\n      return `${cityName}, ${state}, ${country}`;\r\n    } else if (cityName && country) {\r\n      return `${cityName}, ${country}`;\r\n    } else if (cityName) {\r\n      return cityName;\r\n    }\r\n\r\n    // Fallback to display_name, but clean it up\r\n    return result.display_name.split(',').slice(0, 3).join(', ');\r\n  }, []);\r\n\r\n  // Handle suggestion selection\r\n  const handleSuggestionSelect = useCallback(\r\n    (result: CityResult) => {\r\n      const cityName = formatCityName(result);\r\n      const latitude = parseFloat(result.lat);\r\n      const longitude = parseFloat(result.lon);\r\n\r\n      setQuery(cityName);\r\n      setIsOpen(false);\r\n      setSelectedIndex(-1);\r\n      setSuggestions([]);\r\n\r\n      haptic.buttonConfirm();\r\n      onCitySelected(cityName, latitude, longitude);\r\n    },\r\n    [formatCityName, haptic, onCitySelected],\r\n  );\r\n\r\n  // Handle input focus\r\n  const handleFocus = () => {\r\n    if (suggestions.length > 0) {\r\n      setIsOpen(true);\r\n    }\r\n  };\r\n\r\n  // Handle input change\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = event.target.value;\r\n    setQuery(value);\r\n\r\n    if (value.trim() === '') {\r\n      setSuggestions([]);\r\n      setIsOpen(false);\r\n      setHasSearched(false);\r\n    }\r\n  };\r\n\r\n  // Memoized styles for performance\r\n  const inputStyle: React.CSSProperties = useMemo(\r\n    () => ({\r\n      width: '100%',\r\n      padding: isMobile ? '14px 16px' : '16px 18px',\r\n      border: `2px solid ${theme.cardBorder}`,\r\n      borderRadius: '16px',\r\n      background: theme.cardBackground,\r\n      color: theme.primaryText,\r\n      fontSize: isMobile ? '16px' : '17px', // 16px prevents zoom on iOS\r\n      fontWeight: '500',\r\n      outline: 'none',\r\n      transition: 'all 0.3s ease',\r\n      backdropFilter: 'blur(10px)',\r\n      opacity: disabled ? 0.6 : 1,\r\n      cursor: disabled ? 'not-allowed' : 'text',\r\n      paddingRight: isLoading ? '50px' : '16px',\r\n    }),\r\n    [theme, isMobile, disabled, isLoading],\r\n  );\r\n\r\n  const dropdownStyle: React.CSSProperties = useMemo(\r\n    () => ({\r\n      position: 'absolute',\r\n      top: '100%',\r\n      left: 0,\r\n      right: 0,\r\n      marginTop: '8px',\r\n      background: theme.cardBackground,\r\n      border: `1px solid ${theme.cardBorder}`,\r\n      borderRadius: '16px',\r\n      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.15)',\r\n      backdropFilter: 'blur(20px)',\r\n      zIndex: 1000,\r\n      maxHeight: isMobile ? '60vh' : '300px',\r\n      overflow: 'hidden',\r\n      transform: isOpen\r\n        ? 'translateY(0) scale(1)'\r\n        : 'translateY(-10px) scale(0.95)',\r\n      opacity: isOpen ? 1 : 0,\r\n      visibility: isOpen ? 'visible' : 'hidden',\r\n      transition: 'all 0.2s cubic-bezier(0.16, 1, 0.3, 1)',\r\n    }),\r\n    [theme, isMobile, isOpen],\r\n  );\r\n\r\n  return (\r\n    <div style={{ position: 'relative', width: '100%' }} className={className}>\r\n      {/* Search Input */}\r\n      <div style={{ position: 'relative' }}>\r\n        <input\r\n          ref={inputRef}\r\n          type=\"text\"\r\n          value={query}\r\n          onChange={handleInputChange}\r\n          onKeyDown={handleKeyDown}\r\n          disabled={disabled}\r\n          placeholder={placeholder}\r\n          style={inputStyle}\r\n          autoComplete=\"off\"\r\n          spellCheck=\"false\"\r\n          onMouseEnter={e => {\r\n            if (!disabled) {\r\n              const target = e.target as HTMLInputElement;\r\n              target.style.borderColor = theme.weatherCardBorder;\r\n              target.style.backgroundColor = 'rgba(255, 255, 255, 0.05)';\r\n            }\r\n          }}\r\n          onMouseLeave={e => {\r\n            if (!disabled && document.activeElement !== e.target) {\r\n              const target = e.target as HTMLInputElement;\r\n              target.style.borderColor = theme.cardBorder;\r\n              target.style.backgroundColor = theme.cardBackground;\r\n            }\r\n          }}\r\n          onFocus={e => {\r\n            handleFocus();\r\n            const target = e.target as HTMLInputElement;\r\n            target.style.borderColor = theme.weatherCardBorder;\r\n            target.style.backgroundColor = 'rgba(255, 255, 255, 0.05)';\r\n            target.style.boxShadow = '0 0 0 3px rgba(102, 126, 234, 0.1)';\r\n          }}\r\n          onBlur={e => {\r\n            const target = e.target as HTMLInputElement;\r\n            target.style.borderColor = theme.cardBorder;\r\n            target.style.backgroundColor = theme.cardBackground;\r\n            target.style.boxShadow = 'none';\r\n          }}\r\n        />\r\n\r\n        {/* Loading Spinner */}\r\n        {isLoading && (\r\n          <div\r\n            style={{\r\n              position: 'absolute',\r\n              right: '16px',\r\n              top: '50%',\r\n              transform: 'translateY(-50%)',\r\n              width: '20px',\r\n              height: '20px',\r\n              border: '2px solid rgba(102, 126, 234, 0.3)',\r\n              borderTop: '2px solid #667eea',\r\n              borderRadius: '50%',\r\n              animation: 'spin 1s linear infinite',\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      {/* Suggestions Dropdown */}\r\n      <div ref={dropdownRef} style={dropdownStyle}>\r\n        {suggestions.length > 0 ? (\r\n          <div style={{ padding: '8px' }}>\r\n            {suggestions.map((suggestion, index) => (\r\n              <button\r\n                key={suggestion.place_id}\r\n                onClick={e => {\r\n                  e.preventDefault();\r\n                  e.stopPropagation();\r\n                  handleSuggestionSelect(suggestion);\r\n                }}\r\n                style={{\r\n                  width: '100%',\r\n                  padding: '12px 16px',\r\n                  border: 'none',\r\n                  background:\r\n                    index === selectedIndex\r\n                      ? 'rgba(102, 126, 234, 0.1)'\r\n                      : 'transparent',\r\n                  color: theme.primaryText,\r\n                  fontSize: '14px',\r\n                  textAlign: 'left',\r\n                  borderRadius: '8px',\r\n                  cursor: 'pointer',\r\n                  transition: 'all 0.2s ease',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'space-between',\r\n                }}\r\n                onMouseEnter={() => setSelectedIndex(index)}\r\n                onMouseLeave={() => setSelectedIndex(-1)}\r\n              >\r\n                <div>\r\n                  <div style={{ fontWeight: '500' }}>\r\n                    {formatCityName(suggestion)}\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      fontSize: '12px',\r\n                      color: theme.secondaryText,\r\n                      marginTop: '2px',\r\n                    }}\r\n                  >\r\n                    {suggestion.address.country}\r\n                  </div>\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    fontSize: '12px',\r\n                    color: theme.secondaryText,\r\n                    opacity: 0.7,\r\n                  }}\r\n                >\r\n                  📍\r\n                </div>\r\n              </button>\r\n            ))}\r\n          </div>\r\n        ) : hasSearched && !isLoading && query.length >= 2 ? (\r\n          <div\r\n            style={{\r\n              padding: '16px',\r\n              textAlign: 'center',\r\n              color: theme.secondaryText,\r\n              fontSize: '14px',\r\n            }}\r\n          >\r\n            No cities found for \"{query}\"\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n\r\n      {/* CSS for spinner animation */}\r\n      <style>{`\r\n        @keyframes spin {\r\n          0% { transform: translateY(-50%) rotate(0deg); }\r\n          100% { transform: translateY(-50%) rotate(360deg); }\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AutoCompleteSearch;\r\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\CitySelector.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\DeploymentStatus.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\FastLocationButton.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\GeolocationVerification.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\LoadingSkeletons.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\LoadingStateManager.tsx",
    "messages": [
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 46,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 46,
        "endColumn": 24
      },
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 193,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 193,
        "endColumn": 33
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import type { ReactNode } from 'react';\nimport React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from 'react';\n\n// Loading state types for different operations\nexport type LoadingOperation =\n  | 'weatherData'\n  | 'forecast'\n  | 'location'\n  | 'background-refresh'\n  | 'search'\n  | 'settings';\n\nexport interface LoadingState {\n  operation: LoadingOperation;\n  isLoading: boolean;\n  progress?: number; // 0-100 for progress indication\n  error?: string;\n  retryCount?: number;\n}\n\nexport interface LoadingContextType {\n  loadingStates: Map<LoadingOperation, LoadingState>;\n  setLoading: (\n    operation: LoadingOperation,\n    isLoading: boolean,\n    progress?: number\n  ) => void;\n  setError: (operation: LoadingOperation, error: string) => void;\n  clearError: (operation: LoadingOperation) => void;\n  retry: (\n    operation: LoadingOperation,\n    retryFn: () => Promise<void>\n  ) => Promise<void>;\n  isAnyLoading: boolean;\n  getLoadingState: (operation: LoadingOperation) => LoadingState | undefined;\n}\n\nconst LoadingContext = createContext<LoadingContextType | undefined>(undefined);\n\nexport const useLoading = () => {\n  const context = useContext(LoadingContext);\n  if (!context) {\n    throw new Error('useLoading must be used within a LoadingProvider');\n  }\n  return context;\n};\n\ninterface LoadingProviderProps {\n  children: ReactNode;\n}\n\nexport const LoadingProvider: React.FC<LoadingProviderProps> = ({\n  children,\n}) => {\n  const [loadingStates, setLoadingStates] = useState<\n    Map<LoadingOperation, LoadingState>\n  >(new Map());\n\n  const setLoading = useCallback(\n    (operation: LoadingOperation, isLoading: boolean, progress?: number) => {\n      setLoadingStates(prev => {\n        const newStates = new Map(prev);\n        const currentState = newStates.get(operation) || {\n          operation,\n          isLoading: false,\n        };\n\n        newStates.set(operation, {\n          ...currentState,\n          isLoading,\n          progress,\n          error: isLoading ? undefined : currentState.error, // Clear error when starting new operation\n        });\n\n        return newStates;\n      });\n    },\n    [],\n  );\n\n  const setError = useCallback((operation: LoadingOperation, error: string) => {\n    setLoadingStates(prev => {\n      const newStates = new Map(prev);\n      const currentState = newStates.get(operation) || {\n        operation,\n        isLoading: false,\n      };\n\n      newStates.set(operation, {\n        ...currentState,\n        isLoading: false,\n        error,\n        retryCount: (currentState.retryCount || 0) + 1,\n      });\n\n      return newStates;\n    });\n  }, []);\n\n  const clearError = useCallback((operation: LoadingOperation) => {\n    setLoadingStates(prev => {\n      const newStates = new Map(prev);\n      const currentState = newStates.get(operation);\n\n      if (currentState) {\n        newStates.set(operation, {\n          ...currentState,\n          error: undefined,\n          retryCount: 0,\n        });\n      }\n\n      return newStates;\n    });\n  }, []);\n\n  const retry = useCallback(\n    async (operation: LoadingOperation, retryFn: () => Promise<void>) => {\n      const currentState = loadingStates.get(operation);\n      const retryCount = currentState?.retryCount || 0;\n\n      // Limit retry attempts\n      if (retryCount >= 3) {\n        setError(\n          operation,\n          'Maximum retry attempts reached. Please try again later.',\n        );\n        return;\n      }\n\n      clearError(operation);\n      setLoading(operation, true);\n\n      try {\n        await retryFn();\n        setLoading(operation, false);\n      } catch (error) {\n        setError(\n          operation,\n          error instanceof Error ? error.message : 'Operation failed',\n        );\n      }\n    },\n    [loadingStates, setLoading, setError, clearError],\n  );\n\n  const isAnyLoading = Array.from(loadingStates.values()).some(\n    state => state.isLoading,\n  );\n\n  const getLoadingState = useCallback(\n    (operation: LoadingOperation) => {\n      return loadingStates.get(operation);\n    },\n    [loadingStates],\n  );\n\n  const contextValue: LoadingContextType = useMemo(\n    () => ({\n      loadingStates,\n      setLoading,\n      setError,\n      clearError,\n      retry,\n      isAnyLoading,\n      getLoadingState,\n    }),\n    [\n      loadingStates,\n      setLoading,\n      setError,\n      clearError,\n      retry,\n      isAnyLoading,\n      getLoadingState,\n    ],\n  );\n\n  return (\n    <LoadingContext.Provider value={contextValue}>\n      {children}\n    </LoadingContext.Provider>\n  );\n};\n\n// Hook for specific operation loading state\nexport const useOperationLoading = (operation: LoadingOperation) => {\n  const { getLoadingState, setLoading, setError, clearError, retry } =\n    useLoading();\n\n  return {\n    loadingState: getLoadingState(operation),\n    setLoading: (isLoading: boolean, progress?: number) =>\n      setLoading(operation, isLoading, progress),\n    setError: (error: string) => setError(operation, error),\n    clearError: () => clearError(operation),\n    retry: (retryFn: () => Promise<void>) => retry(operation, retryFn),\n  };\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\LocationButton.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\LocationTester.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\MobileDebug.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\NativeStatusDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\OverlayDiagnostic.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\PerformanceMonitor.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\ProgressiveImage.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\PullToRefresh.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\SimpleAutocomplete.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 12,
        "column": 10,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 12,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [369, 372], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [369, 372], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'theme' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 26,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 8
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * Nuclear AutoComplete Fix\r\n * Simple, bulletproof autocomplete that definitely works\r\n */\r\n\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { logError } from './logger';\r\nimport './SimpleAutocomplete.css';\r\n\r\ninterface SimpleAutocompleteProps {\r\n  onCitySelected: (cityName: string, lat: number, lon: number) => void;\r\n  theme: any;\r\n  disabled?: boolean;\r\n  placeholder?: string;\r\n}\r\n\r\ninterface CityResult {\r\n  display_name: string;\r\n  lat: string;\r\n  lon: string;\r\n  place_id: number;\r\n}\r\n\r\nexport const SimpleAutocomplete: React.FC<SimpleAutocompleteProps> = ({\r\n  onCitySelected,\r\n  theme,\r\n  disabled = false,\r\n  placeholder = 'Search cities...',\r\n}) => {\r\n  const [query, setQuery] = useState('');\r\n  const [results, setResults] = useState<CityResult[]>([]);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const timeoutRef = useRef<NodeJS.Timeout | undefined>(undefined);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Simple search function\r\n  const searchCities = useCallback(async (searchTerm: string) => {\r\n    if (searchTerm.length < 2) {\r\n      setResults([]);\r\n      setIsOpen(false);\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const params = new URLSearchParams({\r\n        q: searchTerm,\r\n        format: 'json',\r\n        limit: '5',\r\n        addressdetails: '1',\r\n      });\r\n\r\n      const response = await fetch(\r\n        `https://nominatim.openstreetmap.org/search?${params}`,\r\n        {\r\n          headers: {\r\n            'User-Agent': 'WeatherApp/1.0',\r\n          },\r\n        },\r\n      );\r\n\r\n      if (response.ok) {\r\n        const data: CityResult[] = await response.json();\r\n        setResults(data.slice(0, 5));\r\n        setIsOpen(data.length > 0);\r\n      }\r\n    } catch (error) {\r\n      logError('Search error:', error);\r\n      setResults([]);\r\n      setIsOpen(false);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Debounced search\r\n  useEffect(() => {\r\n    if (timeoutRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n    }\r\n\r\n    timeoutRef.current = setTimeout(() => {\r\n      searchCities(query);\r\n    }, 300);\r\n\r\n    return () => {\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current);\r\n      }\r\n    };\r\n  }, [query, searchCities]);\r\n\r\n  // Handle selection\r\n  const handleSelect = useCallback(\r\n    (result: CityResult) => {\r\n      const cityName = result.display_name.split(',')[0];\r\n      setQuery(cityName);\r\n      setIsOpen(false);\r\n      setResults([]);\r\n      onCitySelected(cityName, parseFloat(result.lat), parseFloat(result.lon));\r\n    },\r\n    [onCitySelected],\r\n  );\r\n\r\n  // Click outside to close\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        containerRef.current &&\r\n        !containerRef.current.contains(event.target as Node)\r\n      ) {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, []);\r\n\r\n  return (\r\n    <div ref={containerRef} className=\"simple-autocomplete\">\r\n      <input\r\n        type=\"text\"\r\n        value={query}\r\n        onChange={e => setQuery(e.target.value)}\r\n        placeholder={placeholder}\r\n        disabled={disabled}\r\n        className=\"simple-autocomplete-input\"\r\n      />\r\n\r\n      {isLoading && <div className=\"simple-autocomplete-spinner\" />}\r\n\r\n      {isOpen && results.length > 0 && (\r\n        <div className=\"simple-autocomplete-dropdown\">\r\n          {results.map(result => (\r\n            <button\r\n              key={result.place_id}\r\n              onClick={e => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                handleSelect(result);\r\n              }}\r\n              className=\"simple-autocomplete-item\"\r\n            >\r\n              {result.display_name.split(',').slice(0, 3).join(', ')}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimpleAutocomplete;\r\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\SimpleThemeToggle.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\SwipeIndicator.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\SwipeNavigationContainer.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\ThemeToggle.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\accessibilityAudioManager.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\advancedCachingManager.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\animations.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\autocorrectEngine.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\backgroundRefreshService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\backgroundSyncManager.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 9,
        "column": 9,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 9,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [226, 229], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [226, 229], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 33,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 33,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [736, 739], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [736, 739], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 346,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 346,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9218, 9221], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9218, 9221], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Background Sync Manager\n * Handles background synchronization of weather data when network is available\n */\n\ninterface PendingRequest {\n  id: string;\n  type: 'weather-update' | 'city-search' | 'location-fetch';\n  data: any;\n  timestamp: number;\n  retryCount: number;\n  priority: 'high' | 'medium' | 'low';\n}\n\ninterface SyncResult {\n  success: boolean;\n  processed: number;\n  failed: number;\n  errors: string[];\n}\n\nclass BackgroundSyncManager {\n  private readonly STORAGE_KEY = 'weather-pending-sync';\n  private readonly MAX_RETRY_COUNT = 3;\n  private readonly RETRY_DELAY_MS = 5000;\n  private isProcessing = false;\n\n  /**\n   * Queue a request for background sync\n   */\n  queueRequest(\n    type: PendingRequest['type'],\n    data: any,\n    priority: PendingRequest['priority'] = 'medium',\n  ): void {\n    const pendingRequests = this.getPendingRequests();\n\n    const request: PendingRequest = {\n      id: this.generateRequestId(),\n      type,\n      data,\n      timestamp: Date.now(),\n      retryCount: 0,\n      priority,\n    };\n\n    pendingRequests.push(request);\n    this.savePendingRequests(pendingRequests);\n\n    // Try to sync immediately if online\n    if (navigator.onLine) {\n      this.processPendingRequests();\n    }\n  }\n\n  /**\n   * Process all pending requests\n   */\n  async processPendingRequests(): Promise<SyncResult> {\n    if (this.isProcessing || !navigator.onLine) {\n      return {\n        success: false,\n        processed: 0,\n        failed: 0,\n        errors: ['Sync already in progress or offline'],\n      };\n    }\n\n    this.isProcessing = true;\n    const pendingRequests = this.getPendingRequests();\n\n    // Sort by priority and timestamp\n    const sortedRequests = this.sortRequestsByPriority(pendingRequests);\n\n    let processed = 0;\n    let failed = 0;\n    const errors: string[] = [];\n    const remainingRequests: PendingRequest[] = [];\n\n    for (const request of sortedRequests) {\n      try {\n        const success = await this.processRequest(request);\n\n        if (success) {\n          processed++;\n        } else {\n          request.retryCount++;\n\n          if (request.retryCount < this.MAX_RETRY_COUNT) {\n            remainingRequests.push(request);\n          } else {\n            failed++;\n            errors.push(`Request ${request.id} exceeded retry limit`);\n          }\n        }\n      } catch (error) {\n        request.retryCount++;\n\n        if (request.retryCount < this.MAX_RETRY_COUNT) {\n          remainingRequests.push(request);\n        } else {\n          failed++;\n          errors.push(\n            `Request ${request.id} failed: ${\n              error instanceof Error ? error.message : String(error)\n            }`,\n          );\n        }\n      }\n    }\n\n    // Save remaining requests\n    this.savePendingRequests(remainingRequests);\n    this.isProcessing = false;\n\n    return {\n      success: errors.length === 0,\n      processed,\n      failed,\n      errors,\n    };\n  }\n\n  /**\n   * Process a single request\n   */\n  private async processRequest(request: PendingRequest): Promise<boolean> {\n    const { type, data } = request;\n\n    try {\n      switch (type) {\n        case 'weather-update':\n          return await this.processWeatherUpdate(data);\n        case 'city-search':\n          return await this.processCitySearch(data);\n        case 'location-fetch':\n          return await this.processLocationFetch(data);\n        default:\n          console.warn(`Unknown request type: ${type}`);\n          return false;\n      }\n    } catch (error) {\n      console.error(`Failed to process ${type} request:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Process weather update request\n   */\n  private async processWeatherUpdate(data: {\n    cityName: string;\n    latitude: number;\n    longitude: number;\n  }): Promise<boolean> {\n    const { cityName, latitude, longitude } = data;\n\n    try {\n      const response = await fetch(\n        `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current_weather=true&hourly=temperature_2m,weather_code,relative_humidity_2m,wind_speed_10m&daily=temperature_2m_max,temperature_2m_min,weather_code,precipitation_sum&temperature_unit=fahrenheit&timezone=auto`,\n      );\n\n      if (!response.ok) {\n        throw new Error(`Weather API error: ${response.status}`);\n      }\n\n      const weatherData = await response.json();\n\n      // Cache the data using our offline storage\n      const { offlineStorage } = await import('./offlineWeatherStorage');\n      await offlineStorage.cacheWeatherData(cityName, weatherData);\n\n      return true;\n    } catch (error) {\n      console.error('Weather update failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Process city search request\n   */\n  private async processCitySearch(data: { query: string }): Promise<boolean> {\n    const { query } = data;\n\n    try {\n      const response = await fetch(\n        `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(\n          query,\n        )}&format=json&limit=5`,\n        {\n          headers: {\n            'User-Agent': 'Premium Weather App (https://weather.andernet.dev)',\n          },\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`Geocoding API error: ${response.status}`);\n      }\n\n      const results = await response.json();\n\n      // Cache the search results\n      if (results.length > 0) {\n        const { offlineStorage } = await import('./offlineWeatherStorage');\n        await offlineStorage.cacheRecentCity(\n          query,\n          parseFloat(results[0].lat),\n          parseFloat(results[0].lon),\n        );\n      }\n\n      return true;\n    } catch (error) {\n      console.error('City search failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Process location fetch request\n   */\n  private async processLocationFetch(data: {\n    latitude: number;\n    longitude: number;\n  }): Promise<boolean> {\n    const { latitude, longitude } = data;\n\n    try {\n      // Reverse geocoding to get city name\n      const response = await fetch(\n        `https://nominatim.openstreetmap.org/reverse?lat=${latitude}&lon=${longitude}&format=json`,\n        {\n          headers: {\n            'User-Agent': 'Premium Weather App (https://weather.andernet.dev)',\n          },\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`Reverse geocoding error: ${response.status}`);\n      }\n\n      const location = await response.json();\n      const cityName =\n        location.display_name?.split(',')[0] || 'Current Location';\n\n      // Cache the location\n      const { offlineStorage } = await import('./offlineWeatherStorage');\n      await offlineStorage.cacheRecentCity(cityName, latitude, longitude);\n\n      return true;\n    } catch (error) {\n      console.error('Location fetch failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Sort requests by priority and timestamp\n   */\n  private sortRequestsByPriority(requests: PendingRequest[]): PendingRequest[] {\n    const priorityOrder = { high: 0, medium: 1, low: 2 };\n\n    return requests.sort((a, b) => {\n      // First sort by priority\n      const priorityDiff =\n        priorityOrder[a.priority] - priorityOrder[b.priority];\n      if (priorityDiff !== 0) return priorityDiff;\n\n      // Then sort by timestamp (newer first)\n      return b.timestamp - a.timestamp;\n    });\n  }\n\n  /**\n   * Get pending requests from storage\n   */\n  private getPendingRequests(): PendingRequest[] {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Failed to load pending requests:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Save pending requests to storage\n   */\n  private savePendingRequests(requests: PendingRequest[]): void {\n    try {\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(requests));\n    } catch (error) {\n      console.error('Failed to save pending requests:', error);\n    }\n  }\n\n  /**\n   * Generate unique request ID\n   */\n  private generateRequestId(): string {\n    return `sync_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Get sync statistics\n   */\n  getSyncStats() {\n    const pendingRequests = this.getPendingRequests();\n\n    return {\n      pendingCount: pendingRequests.length,\n      highPriority: pendingRequests.filter(r => r.priority === 'high').length,\n      mediumPriority: pendingRequests.filter(r => r.priority === 'medium')\n        .length,\n      lowPriority: pendingRequests.filter(r => r.priority === 'low').length,\n      isProcessing: this.isProcessing,\n      oldestRequest:\n        pendingRequests.length > 0\n          ? Math.min(...pendingRequests.map(r => r.timestamp))\n          : null,\n    };\n  }\n\n  /**\n   * Clear all pending requests (for testing/debugging)\n   */\n  clearPendingRequests(): void {\n    localStorage.removeItem(this.STORAGE_KEY);\n  }\n\n  /**\n   * Register service worker background sync\n   */\n  async registerBackgroundSync(): Promise<boolean> {\n    if (\n      'serviceWorker' in navigator &&\n      'sync' in window.ServiceWorkerRegistration.prototype\n    ) {\n      try {\n        const registration = await navigator.serviceWorker.ready;\n        if ('sync' in registration) {\n          await (registration as any).sync.register('weather-background-sync');\n        }\n        return true;\n      } catch (error) {\n        console.error('Background sync registration failed:', error);\n        return false;\n      }\n    }\n    return false;\n  }\n}\n\n// Export singleton instance\nexport const backgroundSyncManager = new BackgroundSyncManager();\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\bundleOptimizationClean.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 82,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 82,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [2255, 2301], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 85,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 85,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [2375, 2435], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 108,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 108,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [2998, 3065], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 112,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 112,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [3164, 3222], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 145,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 145,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [4053, 4096], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 148,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 148,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [4170, 4220], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 181,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 181,
        "endColumn": 21,
        "suggestions": [
          {
            "fix": { "range": [5252, 5307], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 213,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 213,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [6145, 6203], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 216,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 216,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [6277, 6329], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 222,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 222,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [6444, 6498], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 237,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 237,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [6879, 6942], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 239,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 239,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [6994, 7062], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 244,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 244,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [7177, 7231], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 274,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 274,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [7938, 7994], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 291,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 291,
        "endColumn": 23,
        "suggestions": [
          {
            "fix": { "range": [8466, 8524], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 296,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 296,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [8630, 8693], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\bundleSizeMonitor.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'navigationEntries' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 32,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1361, 1364], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1361, 1364], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1392, 1395], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1392, 1395], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 76,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 115,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 115,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3098, 3101], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3098, 3101], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 116,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 116,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3144, 3147], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3144, 3147], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 118,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 118,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 147,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 147,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 163,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 163,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 302,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 302,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Bundle Size and Performance Monitor\n * Tracks bundle performance and lazy loading efficiency\n */\n\ninterface BundleMetrics {\n  totalBundleSize: number;\n  loadedChunks: string[];\n  lazyLoadedComponents: string[];\n  memoryUsage: number;\n  timestamp: number;\n}\n\ninterface LazyLoadMetrics {\n  componentName: string;\n  loadTime: number;\n  chunkSize?: number;\n  timestamp: number;\n}\n\nclass BundleSizeMonitor {\n  private metrics: BundleMetrics[] = [];\n  private lazyLoadMetrics: LazyLoadMetrics[] = [];\n  private readonly STORAGE_KEY = 'weather-bundle-metrics';\n  private readonly MAX_METRICS = 50;\n\n  /**\n   * Record bundle load metrics\n   */\n  recordBundleMetrics(): void {\n    try {\n      const navigationEntries = performance.getEntriesByType(\n        'navigation',\n      ) as PerformanceNavigationTiming[];\n      const resourceEntries = performance.getEntriesByType(\n        'resource',\n      ) as PerformanceResourceTiming[];\n\n      // Calculate total bundle size from resource entries\n      const totalBundleSize = resourceEntries\n        .filter(\n          entry =>\n            entry.name.includes('.js') ||\n            entry.name.includes('.css') ||\n            entry.name.includes('.wasm'),\n        )\n        .reduce((total, entry) => {\n          // Use transferSize if available, otherwise decodedBodySize\n          const size =\n            (entry as any).transferSize || (entry as any).decodedBodySize || 0;\n          return total + size;\n        }, 0);\n\n      // Get loaded chunks from resource entries\n      const loadedChunks = resourceEntries\n        .filter(entry => entry.name.includes('.js'))\n        .map(entry => {\n          const url = new URL(entry.name);\n          return url.pathname.split('/').pop() || 'unknown';\n        });\n\n      // Get memory usage if available\n      const memoryUsage = this.getCurrentMemoryUsage();\n\n      const metric: BundleMetrics = {\n        totalBundleSize,\n        loadedChunks,\n        lazyLoadedComponents: [], // Will be populated by component tracking\n        memoryUsage,\n        timestamp: Date.now(),\n      };\n\n      this.metrics.push(metric);\n      this.cleanup();\n      this.persistMetrics();\n    } catch (error) {\n      // Silently fail if performance API is not available\n    }\n  }\n\n  /**\n   * Track lazy component loading\n   */\n  trackLazyComponent(componentName: string): () => void {\n    const startTime = performance.now();\n\n    return () => {\n      const endTime = performance.now();\n      const loadTime = endTime - startTime;\n\n      const metric: LazyLoadMetrics = {\n        componentName,\n        loadTime,\n        timestamp: Date.now(),\n      };\n\n      this.lazyLoadMetrics.push(metric);\n\n      // Update latest bundle metrics with lazy component\n      if (this.metrics.length > 0) {\n        const latest = this.metrics[this.metrics.length - 1];\n        latest.lazyLoadedComponents.push(componentName);\n      }\n\n      this.cleanup();\n      this.persistMetrics();\n    };\n  }\n\n  /**\n   * Get current memory usage\n   */\n  private getCurrentMemoryUsage(): number {\n    try {\n      if ('memory' in performance && (performance as any).memory) {\n        return (performance as any).memory.usedJSHeapSize;\n      }\n    } catch (error) {\n      // Memory API not available\n    }\n    return 0;\n  }\n\n  /**\n   * Cleanup old metrics\n   */\n  private cleanup(): void {\n    if (this.metrics.length > this.MAX_METRICS) {\n      this.metrics = this.metrics.slice(-this.MAX_METRICS);\n    }\n\n    if (this.lazyLoadMetrics.length > this.MAX_METRICS) {\n      this.lazyLoadMetrics = this.lazyLoadMetrics.slice(-this.MAX_METRICS);\n    }\n  }\n\n  /**\n   * Persist metrics to storage\n   */\n  private persistMetrics(): void {\n    try {\n      const data = {\n        bundleMetrics: this.metrics,\n        lazyLoadMetrics: this.lazyLoadMetrics,\n      };\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(data));\n    } catch (error) {\n      // Storage failed - continue without persistence\n    }\n  }\n\n  /**\n   * Load persisted metrics\n   */\n  loadPersistedMetrics(): void {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      if (stored) {\n        const data = JSON.parse(stored);\n        this.metrics = data.bundleMetrics || [];\n        this.lazyLoadMetrics = data.lazyLoadMetrics || [];\n      }\n    } catch (error) {\n      // Failed to load - start fresh\n    }\n  }\n\n  /**\n   * Get bundle statistics\n   */\n  getBundleStats(): {\n    averageBundleSize: number;\n    totalLazyComponents: number;\n    averageLazyLoadTime: number;\n    memoryTrend: Array<{ timestamp: number; memory: number }>;\n    largestChunks: string[];\n  } {\n    if (this.metrics.length === 0) {\n      return {\n        averageBundleSize: 0,\n        totalLazyComponents: 0,\n        averageLazyLoadTime: 0,\n        memoryTrend: [],\n        largestChunks: [],\n      };\n    }\n\n    // Average bundle size\n    const totalSize = this.metrics.reduce(\n      (sum, m) => sum + m.totalBundleSize,\n      0,\n    );\n    const averageBundleSize = totalSize / this.metrics.length;\n\n    // Lazy component stats\n    const totalLazyComponents = this.lazyLoadMetrics.length;\n    const averageLazyLoadTime =\n      totalLazyComponents > 0\n        ? this.lazyLoadMetrics.reduce((sum, m) => sum + m.loadTime, 0) /\n          totalLazyComponents\n        : 0;\n\n    // Memory trend\n    const memoryTrend = this.metrics.slice(-10).map(m => ({\n      timestamp: m.timestamp,\n      memory: m.memoryUsage,\n    }));\n\n    // Most common chunks (largest bundles)\n    const chunkCounts: Record<string, number> = {};\n    this.metrics.forEach(m => {\n      m.loadedChunks.forEach(chunk => {\n        chunkCounts[chunk] = (chunkCounts[chunk] || 0) + 1;\n      });\n    });\n\n    const largestChunks = Object.entries(chunkCounts)\n      .sort(([, a], [, b]) => b - a)\n      .slice(0, 5)\n      .map(([chunk]) => chunk);\n\n    return {\n      averageBundleSize,\n      totalLazyComponents,\n      averageLazyLoadTime,\n      memoryTrend,\n      largestChunks,\n    };\n  }\n\n  /**\n   * Format bundle size for display\n   */\n  formatBundleSize(bytes: number): string {\n    if (bytes === 0) return '0 B';\n\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(1))} ${sizes[i]}`;\n  }\n\n  /**\n   * Check if bundle size is increasing\n   */\n  isBundleSizeIncreasing(): boolean {\n    if (this.metrics.length < 3) return false;\n\n    const recent = this.metrics.slice(-3);\n    const [first, second, third] = recent;\n\n    return (\n      third.totalBundleSize > second.totalBundleSize &&\n      second.totalBundleSize > first.totalBundleSize\n    );\n  }\n\n  /**\n   * Get performance recommendations\n   */\n  getRecommendations(): string[] {\n    const recommendations: string[] = [];\n    const stats = this.getBundleStats();\n\n    if (stats.averageBundleSize > 1024 * 1024) {\n      // > 1MB\n      recommendations.push('Consider code splitting for large bundle size');\n    }\n\n    if (stats.averageLazyLoadTime > 1000) {\n      // > 1 second\n      recommendations.push(\n        'Lazy loaded components are taking too long to load',\n      );\n    }\n\n    if (this.isBundleSizeIncreasing()) {\n      recommendations.push('Bundle size is consistently increasing');\n    }\n\n    if (stats.memoryTrend.length > 0) {\n      const latestMemory =\n        stats.memoryTrend[stats.memoryTrend.length - 1].memory;\n      if (latestMemory > 50 * 1024 * 1024) {\n        // > 50MB\n        recommendations.push('High memory usage detected');\n      }\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Clear all metrics\n   */\n  clearMetrics(): void {\n    this.metrics = [];\n    this.lazyLoadMetrics = [];\n    try {\n      localStorage.removeItem(this.STORAGE_KEY);\n    } catch (error) {\n      // Failed to clear storage\n    }\n  }\n}\n\n// Export singleton instance\nexport const bundleSizeMonitor = new BundleSizeMonitor();\n\n// Initialize on load\nbundleSizeMonitor.loadPersistedMetrics();\n\n// Record initial bundle metrics after page load\nif (typeof window !== 'undefined') {\n  window.addEventListener('load', () => {\n    setTimeout(() => bundleSizeMonitor.recordBundleMetrics(), 1000);\n  });\n}\n\nexport type { BundleMetrics, LazyLoadMetrics };\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\cssOptimization.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 46,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 46,
        "endColumn": 21,
        "suggestions": [
          {
            "fix": { "range": [1477, 1527], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 52,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 52,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [1636, 1686], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 55,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 55,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [1754, 1821], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 73,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 73,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [2187, 2227], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 105,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 105,
        "endColumn": 14,
        "suggestions": [
          {
            "fix": { "range": [3012, 3070], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 116,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 116,
        "endColumn": 14,
        "suggestions": [
          {
            "fix": { "range": [3318, 3371], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\dash0Setup.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 45,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 45,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [1439, 1490], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 50,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 50,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [1528, 1575], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 54,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 54,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [1689, 1745], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 56,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 56,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [1774, 1836], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 69,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 69,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [2029, 2093], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 81,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 81,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [2292, 2361], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 90,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 90,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [2499, 2569], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 103,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 103,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [2761, 2857], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 125,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 125,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [3288, 3382], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 131,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 131,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [3479, 3591], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 159,
        "column": 37,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 159,
        "endColumn": 50,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\enhancedBackgroundSyncManager.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\enhancedHapticService.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 194,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 194,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6957, 6960], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6957, 6960], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\enhancedPerformanceMonitoring.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 74,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 74,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1934, 1937], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1934, 1937], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 80,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 80,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2126, 2129], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2126, 2129], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 81,
        "column": 60,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 81,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2210, 2213], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2210, 2213], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 83,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 83,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2314, 2317], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2314, 2317], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 138,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 138,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3958, 3961], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3958, 3961], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 158,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 158,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4480, 4483], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4480, 4483], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 414,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 414,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11292, 11295], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11292, 11295], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 439,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 439,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11834, 11837], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11834, 11837], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 304,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 304,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [8642, 8778], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 326,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 326,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [9243, 9571], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Enhanced Performance Monitoring - Phase 3C\n * Real-time performance tracking for CSS optimization and service worker efficiency\n */\n\ninterface PerformanceMetrics {\n  cssLoadTimes: Record<string, number>;\n  cacheHitRates: Record<string, number>;\n  bundleSizes: Record<string, number>;\n  renderTimes: {\n    firstPaint: number;\n    firstContentfulPaint: number;\n    largestContentfulPaint: number;\n  };\n  optimizationStats: {\n    cssChunksLoaded: number;\n    totalCSSBytes: number;\n    serviceWorkerCacheHits: number;\n    memoryUsage: number;\n  };\n}\n\nclass EnhancedPerformanceMonitor {\n  private metrics: PerformanceMetrics;\n  private observer: PerformanceObserver | null = null;\n  private startTime: number;\n\n  constructor() {\n    this.startTime = performance.now();\n    this.metrics = {\n      cssLoadTimes: {},\n      cacheHitRates: {},\n      bundleSizes: {},\n      renderTimes: {\n        firstPaint: 0,\n        firstContentfulPaint: 0,\n        largestContentfulPaint: 0,\n      },\n      optimizationStats: {\n        cssChunksLoaded: 0,\n        totalCSSBytes: 0,\n        serviceWorkerCacheHits: 0,\n        memoryUsage: 0,\n      },\n    };\n\n    this.initializeMonitoring();\n  }\n\n  /**\n   * Initialize Performance Monitoring\n   */\n  private initializeMonitoring(): void {\n    this.monitorCSSLoading();\n    this.monitorRenderTimes();\n    this.monitorCacheEfficiency();\n    this.monitorMemoryUsage();\n    this.setupPeriodicReporting();\n  }\n\n  /**\n   * Monitor CSS Loading Performance\n   */\n  private monitorCSSLoading(): void {\n    if (!('PerformanceObserver' in window)) return;\n\n    this.observer = new PerformanceObserver(list => {\n      list.getEntries().forEach(entry => {\n        if (entry.name.includes('.css')) {\n          const fileName = this.extractFileName(entry.name);\n          this.metrics.cssLoadTimes[fileName] = entry.duration;\n\n          // Track if it was served from cache\n          const wasFromCache = (entry as any).transferSize === 0;\n          if (wasFromCache) {\n            this.metrics.optimizationStats.serviceWorkerCacheHits++;\n          }\n\n          // Track bundle size\n          if ((entry as any).transferSize > 0) {\n            this.metrics.bundleSizes[fileName] = (entry as any).transferSize;\n            this.metrics.optimizationStats.totalCSSBytes += (\n              entry as any\n            ).transferSize;\n          }\n\n          this.logCSSLoadEvent(fileName, entry.duration, wasFromCache);\n        }\n      });\n    });\n\n    this.observer.observe({ entryTypes: ['resource'] });\n  }\n\n  /**\n   * Monitor Core Web Vitals and Render Times\n   */\n  private monitorRenderTimes(): void {\n    // First Paint and First Contentful Paint\n    if ('PerformanceObserver' in window) {\n      const paintObserver = new PerformanceObserver(list => {\n        list.getEntries().forEach(entry => {\n          switch (entry.name) {\n            case 'first-paint':\n              this.metrics.renderTimes.firstPaint = entry.startTime;\n              break;\n            case 'first-contentful-paint':\n              this.metrics.renderTimes.firstContentfulPaint = entry.startTime;\n              break;\n          }\n        });\n      });\n      paintObserver.observe({ entryTypes: ['paint'] });\n\n      // Largest Contentful Paint\n      const lcpObserver = new PerformanceObserver(list => {\n        const entries = list.getEntries();\n        const lastEntry = entries[entries.length - 1];\n        this.metrics.renderTimes.largestContentfulPaint = lastEntry.startTime;\n      });\n      lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n    }\n  }\n\n  /**\n   * Monitor Cache Efficiency\n   */\n  private monitorCacheEfficiency(): void {\n    let cacheHits = 0;\n    let totalRequests = 0;\n\n    if ('PerformanceObserver' in window) {\n      const cacheObserver = new PerformanceObserver(list => {\n        list.getEntries().forEach(entry => {\n          totalRequests++;\n\n          // Check if request was served from cache\n          if ((entry as any).transferSize === 0) {\n            cacheHits++;\n          }\n\n          // Update cache hit rate\n          const hitRate =\n            totalRequests > 0 ? (cacheHits / totalRequests) * 100 : 0;\n          this.metrics.cacheHitRates.overall = hitRate;\n        });\n      });\n      cacheObserver.observe({ entryTypes: ['resource'] });\n    }\n  }\n\n  /**\n   * Monitor Memory Usage\n   */\n  private monitorMemoryUsage(): void {\n    if ('memory' in performance) {\n      setInterval(() => {\n        const memory = (performance as any).memory;\n        this.metrics.optimizationStats.memoryUsage = memory.usedJSHeapSize;\n      }, 10000); // Every 10 seconds\n    }\n  }\n\n  /**\n   * Setup Periodic Performance Reporting\n   */\n  private setupPeriodicReporting(): void {\n    // Report every 30 seconds\n    setInterval(() => {\n      this.generatePerformanceReport();\n    }, 30000);\n\n    // Report on page visibility change\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'hidden') {\n        this.generatePerformanceReport();\n      }\n    });\n  }\n\n  /**\n   * Track CSS Chunk Loading\n   */\n  public trackCSSChunkLoad(\n    chunkName: string,\n    loadTime: number,\n    fromCache: boolean,\n  ): void {\n    this.metrics.cssLoadTimes[chunkName] = loadTime;\n    this.metrics.optimizationStats.cssChunksLoaded++;\n\n    if (fromCache) {\n      this.metrics.optimizationStats.serviceWorkerCacheHits++;\n    }\n\n    this.logCSSLoadEvent(chunkName, loadTime, fromCache);\n  }\n\n  /**\n   * Generate Performance Report\n   */\n  public generatePerformanceReport(): PerformanceReport {\n    const totalTime = performance.now() - this.startTime;\n\n    const report: PerformanceReport = {\n      timestamp: new Date().toISOString(),\n      sessionDuration: totalTime,\n      cssOptimization: {\n        chunksLoaded: this.metrics.optimizationStats.cssChunksLoaded,\n        averageLoadTime: this.calculateAverageLoadTime(),\n        totalBytes: this.metrics.optimizationStats.totalCSSBytes,\n        cacheHitRate: this.metrics.cacheHitRates.overall || 0,\n      },\n      renderPerformance: {\n        firstPaint: this.metrics.renderTimes.firstPaint,\n        firstContentfulPaint: this.metrics.renderTimes.firstContentfulPaint,\n        largestContentfulPaint: this.metrics.renderTimes.largestContentfulPaint,\n        timeToInteractive: this.calculateTimeToInteractive(),\n      },\n      memoryUsage: {\n        current: this.metrics.optimizationStats.memoryUsage,\n        peak: this.calculatePeakMemoryUsage(),\n      },\n      optimizationEffectiveness: {\n        cssReduction: this.calculateCSSReduction(),\n        cacheEfficiency: this.metrics.cacheHitRates.overall || 0,\n        loadTimeImprovement: this.calculateLoadTimeImprovement(),\n      },\n    };\n\n    this.reportToAnalytics(report);\n    return report;\n  }\n\n  /**\n   * Calculate Average CSS Load Time\n   */\n  private calculateAverageLoadTime(): number {\n    const loadTimes = Object.values(this.metrics.cssLoadTimes);\n    return loadTimes.length > 0\n      ? loadTimes.reduce((sum, time) => sum + time, 0) / loadTimes.length\n      : 0;\n  }\n\n  /**\n   * Calculate Time to Interactive\n   */\n  private calculateTimeToInteractive(): number {\n    // Simplified TTI calculation\n    return Math.max(\n      this.metrics.renderTimes.firstContentfulPaint,\n      this.metrics.renderTimes.largestContentfulPaint,\n    );\n  }\n\n  /**\n   * Calculate Peak Memory Usage\n   */\n  private calculatePeakMemoryUsage(): number {\n    // This would be tracked over time in a real implementation\n    return this.metrics.optimizationStats.memoryUsage;\n  }\n\n  /**\n   * Calculate CSS Bundle Size Reduction\n   */\n  private calculateCSSReduction(): number {\n    // Compare against baseline of 127KB (pre-optimization)\n    const baselineSize = 127 * 1024; // 127KB\n    const currentSize = this.metrics.optimizationStats.totalCSSBytes;\n\n    if (currentSize === 0) return 0;\n    return ((baselineSize - currentSize) / baselineSize) * 100;\n  }\n\n  /**\n   * Calculate Load Time Improvement\n   */\n  private calculateLoadTimeImprovement(): number {\n    // This would compare against historical data\n    const averageLoadTime = this.calculateAverageLoadTime();\n    const baselineLoadTime = 500; // Assumed baseline in ms\n\n    if (averageLoadTime === 0) return 0;\n    return ((baselineLoadTime - averageLoadTime) / baselineLoadTime) * 100;\n  }\n\n  /**\n   * Extract filename from URL\n   */\n  private extractFileName(url: string): string {\n    return url.split('/').pop() || 'unknown';\n  }\n\n  /**\n   * Log CSS Load Event\n   */\n  private logCSSLoadEvent(\n    fileName: string,\n    duration: number,\n    fromCache: boolean,\n  ): void {\n    // eslint-disable-next-line no-console\n    console.log(\n      `📊 CSS Load: ${fileName} - ${duration.toFixed(2)}ms ${\n        fromCache ? '(cached)' : '(network)'\n      }`,\n    );\n  }\n\n  /**\n   * Report to Analytics\n   */\n  private reportToAnalytics(report: PerformanceReport): void {\n    // Send to Dash0 if available\n    if (window.dash0?.track) {\n      window.dash0.track('performance_report', {\n        css_optimization: report.cssOptimization,\n        render_performance: report.renderPerformance,\n        memory_usage: report.memoryUsage,\n      });\n    }\n\n    // Log summary for development\n    // eslint-disable-next-line no-console\n    console.log('📈 Performance Report:', {\n      cssChunks: report.cssOptimization.chunksLoaded,\n      avgLoadTime: `${report.cssOptimization.averageLoadTime.toFixed(2)}ms`,\n      cacheHitRate: `${report.cssOptimization.cacheHitRate.toFixed(1)}%`,\n      fcp: `${report.renderPerformance.firstContentfulPaint.toFixed(2)}ms`,\n    });\n  }\n\n  /**\n   * Get Real-time Metrics\n   */\n  public getCurrentMetrics(): PerformanceMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Reset Metrics\n   */\n  public resetMetrics(): void {\n    this.startTime = performance.now();\n    this.metrics = {\n      cssLoadTimes: {},\n      cacheHitRates: {},\n      bundleSizes: {},\n      renderTimes: {\n        firstPaint: 0,\n        firstContentfulPaint: 0,\n        largestContentfulPaint: 0,\n      },\n      optimizationStats: {\n        cssChunksLoaded: 0,\n        totalCSSBytes: 0,\n        serviceWorkerCacheHits: 0,\n        memoryUsage: 0,\n      },\n    };\n  }\n\n  /**\n   * Cleanup\n   */\n  public cleanup(): void {\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n  }\n}\n\n// Types\ninterface PerformanceReport {\n  timestamp: string;\n  sessionDuration: number;\n  cssOptimization: {\n    chunksLoaded: number;\n    averageLoadTime: number;\n    totalBytes: number;\n    cacheHitRate: number;\n  };\n  renderPerformance: {\n    firstPaint: number;\n    firstContentfulPaint: number;\n    largestContentfulPaint: number;\n    timeToInteractive: number;\n  };\n  memoryUsage: {\n    current: number;\n    peak: number;\n  };\n  optimizationEffectiveness: {\n    cssReduction: number;\n    cacheEfficiency: number;\n    loadTimeImprovement: number;\n  };\n}\n\n// Global instance\nlet performanceMonitor: EnhancedPerformanceMonitor | null = null;\n\n/**\n * Initialize Enhanced Performance Monitoring\n */\nexport const initializePerformanceMonitoring =\n  (): EnhancedPerformanceMonitor => {\n    if (!performanceMonitor) {\n      performanceMonitor = new EnhancedPerformanceMonitor();\n\n      // Make available globally for debugging\n      if (typeof window !== 'undefined') {\n        (window as any).weatherPerformance = performanceMonitor;\n      }\n    }\n\n    return performanceMonitor;\n  };\n\n/**\n * Get Performance Monitor Instance\n */\nexport const getPerformanceMonitor = (): EnhancedPerformanceMonitor | null => {\n  return performanceMonitor;\n};\n\n/**\n * Generate Performance Report\n */\nexport const generatePerformanceReport = (): PerformanceReport | null => {\n  return performanceMonitor?.generatePerformanceReport() || null;\n};\n\n// Global types\ndeclare global {\n  interface Window {\n    dash0?: {\n      track: (event: string, data: any) => void;\n    };\n    weatherPerformance?: EnhancedPerformanceMonitor;\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\enhancedUSSearch.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\fastLocationService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\hapticContext.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 19,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 19,
        "endColumn": 14,
        "suggestions": [
          {
            "fix": { "range": [533, 609], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\hapticFeedback.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\hapticHooks.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 63,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 63,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [2033, 2100], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\hapticPatternLibrary.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 549,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 549,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14499, 14502], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14499, 14502], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Enhanced Haptic Pattern Library\n * Weather-specific vibration patterns for immersive tactile feedback\n */\n\nimport { logger } from './logger';\n\nexport interface HapticPattern {\n  id: string;\n  name: string;\n  description: string;\n  pattern: number[]; // [vibrate, pause, vibrate, pause, ...]\n  intensity?: number; // 0.0 to 1.0 (for devices that support it)\n  weatherConditions: string[];\n  category: 'weather' | 'interaction' | 'alert' | 'ambient';\n  duration: number; // Total duration in milliseconds\n  repeatable: boolean;\n}\n\nexport interface HapticConfig {\n  enabled: boolean;\n  intensity: number; // Global intensity multiplier 0.0 to 1.0\n  weatherEnabled: boolean;\n  interactionEnabled: boolean;\n  alertEnabled: boolean;\n  ambientEnabled: boolean;\n}\n\n// Weather-specific haptic patterns\nexport const WeatherHapticPatterns: Record<string, HapticPattern> = {\n  lightRain: {\n    id: 'light-rain',\n    name: 'Light Rain',\n    description: 'Gentle, rapid taps simulating light raindrops',\n    pattern: [50, 30, 40, 35, 60, 25, 45, 40, 50, 30],\n    intensity: 0.3,\n    weatherConditions: ['light-rain', 'drizzle', 'light-shower'],\n    category: 'weather',\n    duration: 450,\n    repeatable: true,\n  },\n  heavyRain: {\n    id: 'heavy-rain',\n    name: 'Heavy Rain',\n    description: 'Strong, continuous vibration for heavy rainfall',\n    pattern: [100, 20, 120, 15, 110, 25, 130, 10, 140, 20],\n    intensity: 0.6,\n    weatherConditions: ['heavy-rain', 'downpour', 'heavy-shower'],\n    category: 'weather',\n    duration: 650,\n    repeatable: true,\n  },\n  thunder: {\n    id: 'thunder',\n    name: 'Thunder',\n    description: 'Sharp, powerful burst followed by rolling vibration',\n    pattern: [200, 100, 300, 200, 150, 150, 100, 100, 80, 80, 60, 60],\n    intensity: 0.8,\n    weatherConditions: ['thunderstorm', 'lightning', 'severe-thunderstorm'],\n    category: 'weather',\n    duration: 1200,\n    repeatable: false,\n  },\n  wind: {\n    id: 'wind',\n    name: 'Wind',\n    description: 'Flowing, wave-like vibration pattern',\n    pattern: [80, 40, 100, 30, 120, 20, 100, 30, 80, 40, 60, 50],\n    intensity: 0.4,\n    weatherConditions: ['windy', 'strong-wind', 'gale'],\n    category: 'weather',\n    duration: 700,\n    repeatable: true,\n  },\n  snow: {\n    id: 'snow',\n    name: 'Falling Snow',\n    description: 'Soft, delicate pulses like snowflakes landing',\n    pattern: [30, 80, 25, 90, 35, 70, 20, 100, 40, 60],\n    intensity: 0.2,\n    weatherConditions: ['snow', 'light-snow', 'heavy-snow', 'blizzard'],\n    category: 'weather',\n    duration: 550,\n    repeatable: true,\n  },\n  sunshine: {\n    id: 'sunshine',\n    name: 'Sunshine',\n    description: 'Warm, gentle pulse representing sun rays',\n    pattern: [150, 300, 100, 200, 80, 150],\n    intensity: 0.25,\n    weatherConditions: ['clear', 'sunny', 'mostly-sunny'],\n    category: 'weather',\n    duration: 980,\n    repeatable: false,\n  },\n  cloudy: {\n    id: 'cloudy',\n    name: 'Cloudy',\n    description: 'Soft, rolling vibration like clouds passing',\n    pattern: [100, 100, 120, 80, 140, 60, 120, 80, 100, 100],\n    intensity: 0.3,\n    weatherConditions: ['cloudy', 'overcast', 'partly-cloudy'],\n    category: 'weather',\n    duration: 900,\n    repeatable: true,\n  },\n};\n\n// Interaction haptic patterns\nexport const InteractionHapticPatterns: Record<string, HapticPattern> = {\n  buttonPress: {\n    id: 'button-press',\n    name: 'Button Press',\n    description: 'Quick, sharp feedback for button interactions',\n    pattern: [25],\n    intensity: 0.4,\n    weatherConditions: [],\n    category: 'interaction',\n    duration: 25,\n    repeatable: false,\n  },\n  longPress: {\n    id: 'long-press',\n    name: 'Long Press',\n    description: 'Gradual build-up for long press actions',\n    pattern: [50, 20, 80, 15, 120],\n    intensity: 0.5,\n    weatherConditions: [],\n    category: 'interaction',\n    duration: 285,\n    repeatable: false,\n  },\n  swipeGesture: {\n    id: 'swipe-gesture',\n    name: 'Swipe Gesture',\n    description: 'Directional feedback for swipe actions',\n    pattern: [30, 10, 40, 10, 50, 10, 40, 10, 30],\n    intensity: 0.3,\n    weatherConditions: [],\n    category: 'interaction',\n    duration: 180,\n    repeatable: false,\n  },\n  pullToRefresh: {\n    id: 'pull-to-refresh',\n    name: 'Pull to Refresh',\n    description: 'Elastic feedback for pull-to-refresh action',\n    pattern: [40, 30, 60, 20, 80, 15, 60, 20, 40],\n    intensity: 0.4,\n    weatherConditions: [],\n    category: 'interaction',\n    duration: 305,\n    repeatable: false,\n  },\n  success: {\n    id: 'success',\n    name: 'Success',\n    description: 'Positive confirmation pattern',\n    pattern: [100, 50, 150, 100, 200],\n    intensity: 0.6,\n    weatherConditions: [],\n    category: 'interaction',\n    duration: 600,\n    repeatable: false,\n  },\n  error: {\n    id: 'error',\n    name: 'Error',\n    description: 'Alert pattern for errors',\n    pattern: [200, 100, 200, 100, 200],\n    intensity: 0.7,\n    weatherConditions: [],\n    category: 'interaction',\n    duration: 800,\n    repeatable: false,\n  },\n};\n\n// Alert haptic patterns\nexport const AlertHapticPatterns: Record<string, HapticPattern> = {\n  weatherAlert: {\n    id: 'weather-alert',\n    name: 'Weather Alert',\n    description: 'Attention-grabbing pattern for weather warnings',\n    pattern: [150, 100, 150, 100, 150, 200, 300, 100, 100, 50, 100],\n    intensity: 0.8,\n    weatherConditions: [],\n    category: 'alert',\n    duration: 1300,\n    repeatable: true,\n  },\n  severeAlert: {\n    id: 'severe-alert',\n    name: 'Severe Weather Alert',\n    description: 'Urgent pattern for severe weather warnings',\n    pattern: [300, 100, 300, 100, 300, 150, 400, 100, 200, 50, 200, 50, 200],\n    intensity: 1.0,\n    weatherConditions: [],\n    category: 'alert',\n    duration: 2100,\n    repeatable: true,\n  },\n  emergencyAlert: {\n    id: 'emergency-alert',\n    name: 'Emergency Alert',\n    description: 'Maximum intensity for emergency situations',\n    pattern: [\n      500, 100, 500, 100, 500, 200, 600, 100, 300, 50, 300, 50, 300, 50, 300,\n    ],\n    intensity: 1.0,\n    weatherConditions: [],\n    category: 'alert',\n    duration: 3200,\n    repeatable: true,\n  },\n};\n\n// Ambient haptic patterns\nexport const AmbientHapticPatterns: Record<string, HapticPattern> = {\n  heartbeat: {\n    id: 'heartbeat',\n    name: 'Heartbeat',\n    description: 'Subtle, rhythmic pulse for background feedback',\n    pattern: [80, 120, 50, 200],\n    intensity: 0.15,\n    weatherConditions: [],\n    category: 'ambient',\n    duration: 450,\n    repeatable: true,\n  },\n  breathe: {\n    id: 'breathe',\n    name: 'Breathing',\n    description: 'Calming inhale/exhale pattern',\n    pattern: [200, 300, 100, 400, 200, 300],\n    intensity: 0.2,\n    weatherConditions: [],\n    category: 'ambient',\n    duration: 1500,\n    repeatable: true,\n  },\n  pulse: {\n    id: 'pulse',\n    name: 'Gentle Pulse',\n    description: 'Soft, regular pulse for notifications',\n    pattern: [60, 180, 60, 180],\n    intensity: 0.25,\n    weatherConditions: [],\n    category: 'ambient',\n    duration: 480,\n    repeatable: true,\n  },\n};\n\nexport class HapticPatternManager {\n  private config: HapticConfig = {\n    enabled: true,\n    intensity: 0.7,\n    weatherEnabled: true,\n    interactionEnabled: true,\n    alertEnabled: true,\n    ambientEnabled: false, // Disabled by default to avoid battery drain\n  };\n\n  private isSupported = false;\n  private activePatterns: Map<string, NodeJS.Timeout> = new Map();\n\n  constructor() {\n    this.initializeHapticSupport();\n  }\n\n  /**\n   * Check for haptic feedback support\n   */\n  private initializeHapticSupport(): void {\n    // Check for Vibration API support\n    this.isSupported = 'vibrate' in navigator;\n\n    if (!this.isSupported) {\n      logger.info('Haptic feedback not supported on this device');\n    }\n  }\n\n  /**\n   * Play haptic pattern for weather condition\n   */\n  async playWeatherHaptic(\n    weatherCondition: string,\n    config?: Partial<HapticConfig>,\n  ): Promise<void> {\n    if (!this.canPlayHaptic('weather')) return;\n\n    const pattern = this.findPatternForWeather(weatherCondition);\n    if (!pattern) return;\n\n    await this.playPattern(pattern, config);\n  }\n\n  /**\n   * Play interaction haptic feedback\n   */\n  async playInteractionHaptic(\n    interactionId: keyof typeof InteractionHapticPatterns,\n    config?: Partial<HapticConfig>,\n  ): Promise<void> {\n    if (!this.canPlayHaptic('interaction')) return;\n\n    const pattern = InteractionHapticPatterns[interactionId];\n    if (!pattern) return;\n\n    await this.playPattern(pattern, config);\n  }\n\n  /**\n   * Play alert haptic pattern\n   */\n  async playAlertHaptic(\n    alertId: keyof typeof AlertHapticPatterns,\n    config?: Partial<HapticConfig>,\n  ): Promise<void> {\n    if (!this.canPlayHaptic('alert')) return;\n\n    const pattern = AlertHapticPatterns[alertId];\n    if (!pattern) return;\n\n    await this.playPattern(pattern, config);\n  }\n\n  /**\n   * Play ambient haptic pattern\n   */\n  async playAmbientHaptic(\n    ambientId: keyof typeof AmbientHapticPatterns,\n    config?: Partial<HapticConfig>,\n  ): Promise<void> {\n    if (!this.canPlayHaptic('ambient')) return;\n\n    const pattern = AmbientHapticPatterns[ambientId];\n    if (!pattern) return;\n\n    await this.playPattern(pattern, config);\n  }\n\n  /**\n   * Play custom haptic pattern\n   */\n  async playCustomPattern(\n    pattern: number[],\n    intensity?: number,\n  ): Promise<void> {\n    if (!this.isSupported || !this.config.enabled) return;\n\n    try {\n      const adjustedPattern = this.adjustPatternIntensity(pattern, intensity);\n      navigator.vibrate(adjustedPattern);\n    } catch (error) {\n      logger.warn('Failed to play custom haptic pattern:', error);\n    }\n  }\n\n  /**\n   * Play haptic pattern with configuration\n   */\n  private async playPattern(\n    pattern: HapticPattern,\n    config?: Partial<HapticConfig>,\n  ): Promise<void> {\n    try {\n      const effectiveConfig = { ...this.config, ...config };\n      const adjustedPattern = this.adjustPatternIntensity(\n        pattern.pattern,\n        pattern.intensity\n          ? pattern.intensity * effectiveConfig.intensity\n          : effectiveConfig.intensity,\n      );\n\n      // Stop existing pattern with same ID if running\n      this.stopPattern(pattern.id);\n\n      // Play the pattern\n      navigator.vibrate(adjustedPattern);\n\n      // Handle repeatable patterns\n      if (pattern.repeatable) {\n        const timeout = setTimeout(() => {\n          this.playPattern(pattern, config);\n        }, pattern.duration + 500); // Small gap between repetitions\n\n        this.activePatterns.set(pattern.id, timeout);\n      }\n    } catch (error) {\n      logger.warn(`Failed to play haptic pattern ${pattern.id}:`, error);\n    }\n  }\n\n  /**\n   * Stop specific haptic pattern\n   */\n  stopPattern(patternId: string): void {\n    const timeout = this.activePatterns.get(patternId);\n    if (timeout) {\n      clearTimeout(timeout);\n      this.activePatterns.delete(patternId);\n    }\n  }\n\n  /**\n   * Stop all haptic feedback\n   */\n  stopAllPatterns(): void {\n    // Stop vibration\n    if (this.isSupported) {\n      navigator.vibrate(0);\n    }\n\n    // Clear all timeouts\n    this.activePatterns.forEach(timeout => clearTimeout(timeout));\n    this.activePatterns.clear();\n  }\n\n  /**\n   * Adjust pattern intensity based on configuration\n   */\n  private adjustPatternIntensity(\n    pattern: number[],\n    intensity?: number,\n  ): number[] {\n    const effectiveIntensity = intensity || this.config.intensity;\n\n    // Adjust vibration durations, keep pause durations unchanged\n    return pattern.map((value, index) => {\n      if (index % 2 === 0) {\n        // Vibration duration - adjust by intensity\n        return Math.round(value * effectiveIntensity);\n      } else {\n        // Pause duration - keep unchanged\n        return value;\n      }\n    });\n  }\n\n  /**\n   * Check if haptic feedback can be played for category\n   */\n  private canPlayHaptic(category: HapticPattern['category']): boolean {\n    if (!this.isSupported || !this.config.enabled) return false;\n\n    switch (category) {\n      case 'weather':\n        return this.config.weatherEnabled;\n      case 'interaction':\n        return this.config.interactionEnabled;\n      case 'alert':\n        return this.config.alertEnabled;\n      case 'ambient':\n        return this.config.ambientEnabled;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Find haptic pattern for weather condition\n   */\n  private findPatternForWeather(\n    weatherCondition: string,\n  ): HapticPattern | null {\n    return (\n      Object.values(WeatherHapticPatterns).find(pattern =>\n        pattern.weatherConditions.includes(weatherCondition),\n      ) || null\n    );\n  }\n\n  /**\n   * Update haptic configuration\n   */\n  updateConfig(newConfig: Partial<HapticConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n\n    // If haptics are disabled, stop all active patterns\n    if (!this.config.enabled) {\n      this.stopAllPatterns();\n    }\n  }\n\n  /**\n   * Get current haptic configuration\n   */\n  getConfig(): HapticConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Get haptic support status\n   */\n  getStatus(): {\n    supported: boolean;\n    enabled: boolean;\n    activePatterns: string[];\n    config: HapticConfig;\n  } {\n    return {\n      supported: this.isSupported,\n      enabled: this.config.enabled,\n      activePatterns: Array.from(this.activePatterns.keys()),\n      config: this.getConfig(),\n    };\n  }\n\n  /**\n   * Get all available patterns by category\n   */\n  getAvailablePatterns(): {\n    weather: HapticPattern[];\n    interaction: HapticPattern[];\n    alert: HapticPattern[];\n    ambient: HapticPattern[];\n  } {\n    return {\n      weather: Object.values(WeatherHapticPatterns),\n      interaction: Object.values(InteractionHapticPatterns),\n      alert: Object.values(AlertHapticPatterns),\n      ambient: Object.values(AmbientHapticPatterns),\n    };\n  }\n\n  /**\n   * Test haptic pattern (for settings/preferences)\n   */\n  async testPattern(patternId: string): Promise<void> {\n    const allPatterns = {\n      ...WeatherHapticPatterns,\n      ...InteractionHapticPatterns,\n      ...AlertHapticPatterns,\n      ...AmbientHapticPatterns,\n    };\n\n    const pattern = allPatterns[patternId];\n    if (pattern) {\n      // Temporarily enable for testing\n      const originalConfig = { ...this.config };\n      this.config.enabled = true;\n\n      // Type-safe way to enable category-specific setting\n      const categoryKey = `${pattern.category}Enabled` as const;\n      if (categoryKey in this.config) {\n        (this.config as any)[categoryKey] = true;\n      }\n\n      await this.playPattern(pattern);\n\n      // Restore original config\n      this.config = originalConfig;\n    }\n  }\n\n  /**\n   * Destroy haptic manager and cleanup\n   */\n  destroy(): void {\n    this.stopAllPatterns();\n  }\n}\n\n// Export singleton instance\nexport const hapticManager = new HapticPatternManager();\n\n// Export pattern collections for reference\nexport const AllHapticPatterns = {\n  ...WeatherHapticPatterns,\n  ...InteractionHapticPatterns,\n  ...AlertHapticPatterns,\n  ...AmbientHapticPatterns,\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\hapticPatterns.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\horrorEffectsDebug.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 20,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 36,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 131,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 131,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4246, 4249], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4246, 4249], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 132,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 132,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4301, 4304], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4301, 4304], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Horror Effects Debug and Force Activator\n * This script forces horror effects regardless of theme state\n */\n\n// Debug function to check theme state\nexport const debugHorrorTheme = () => {\n  console.log('🔍 Horror Theme Debug Info:');\n  console.log('Body classes:', document.body.className);\n  console.log('HTML classes:', document.documentElement.className);\n  console.log(\n    'Theme in localStorage:',\n    localStorage.getItem('weatherAppTheme'),\n  );\n\n  // Check if horror CSS is loaded\n  const horrorStylesheets = Array.from(document.styleSheets).filter(sheet => {\n    try {\n      return sheet.href && sheet.href.includes('horror');\n    } catch (e) {\n      return false;\n    }\n  });\n  console.log('Horror stylesheets loaded:', horrorStylesheets.length);\n\n  // Check for horror animations\n  const hasBloodDripAnimation = Array.from(document.styleSheets).some(sheet => {\n    try {\n      for (const rule of sheet.cssRules || []) {\n        if (rule.type === CSSRule.KEYFRAMES_RULE) {\n          if ((rule as CSSKeyframesRule).name === 'bloodDrip') {\n            return true;\n          }\n        }\n      }\n    } catch (e) {\n      // CORS or access issues\n    }\n    return false;\n  });\n  console.log('Blood drip animation found:', hasBloodDripAnimation);\n};\n\n// Force horror effects regardless of theme state\nexport const forceHorrorEffects = () => {\n  console.log('🎃 FORCING HORROR EFFECTS...');\n\n  // Force add horror classes to body and html\n  document.body.classList.add('horror-theme', 'horror-film-grain');\n  document.documentElement.classList.add('horror-theme');\n\n  // Force change page title\n  document.title = '🎃 Crystal Lake Weather Station - FORCED MODE';\n\n  // Force add blood drip to ALL headings and text\n  const selector =\n    'h1, h2, h3, h4, h5, h6, .temperature, .temp, .temperature-display, .city-name, .weather-description, .metric-value, .forecast-temp';\n  const elements = document.querySelectorAll(selector);\n\n  console.log(`🩸 Adding blood drip to ${elements.length} elements`);\n\n  elements.forEach((element, index) => {\n    (element as HTMLElement).classList.add('horror-blood-drip');\n    (element as HTMLElement).style.setProperty(\n      'animation',\n      'bloodDrip 4s infinite ease-in-out',\n      'important',\n    );\n    (element as HTMLElement).style.setProperty(\n      'filter',\n      'drop-shadow(0 2px 10px rgba(139, 0, 0, 0.8))',\n      'important',\n    );\n    console.log(\n      `Added blood drip to element ${index + 1}:`,\n      element.tagName,\n      element.className,\n    );\n  });\n\n  // Force add flickering to weather cards and text\n  const flickerSelector =\n    '.weather-card, .forecast-card, .metric-card, .weather-description, .forecast-day';\n  const flickerElements = document.querySelectorAll(flickerSelector);\n\n  console.log(`⚡ Adding flicker to ${flickerElements.length} elements`);\n\n  flickerElements.forEach((element, index) => {\n    (element as HTMLElement).classList.add('horror-flicker');\n    (element as HTMLElement).style.setProperty(\n      'animation',\n      'flickeringHorror 3s infinite ease-in-out',\n      'important',\n    );\n    console.log(\n      `Added flicker to element ${index + 1}:`,\n      element.tagName,\n      element.className,\n    );\n  });\n\n  // Force film grain overlay\n  if (!document.querySelector('.horror-film-grain-overlay')) {\n    const overlay = document.createElement('div');\n    overlay.className = 'horror-film-grain-overlay';\n    overlay.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background-image:\n        radial-gradient(circle at 25% 25%, rgba(255, 255, 255, 0.02) 1px, transparent 1px),\n        radial-gradient(circle at 75% 75%, rgba(0, 0, 0, 0.1) 1px, transparent 1px),\n        radial-gradient(circle at 50% 50%, rgba(139, 0, 0, 0.05) 1px, transparent 1px);\n      background-size: 4px 4px, 6px 6px, 8px 8px;\n      pointer-events: none;\n      z-index: 1000;\n      opacity: 0.8;\n      animation: filmGrainFlicker 0.1s infinite;\n    `;\n    document.body.appendChild(overlay);\n    console.log('🌫️ Added film grain overlay');\n  }\n\n  console.log('🎃 Horror effects FORCED successfully!');\n};\n\n// Add to window for easy console access\nif (typeof window !== 'undefined') {\n  (window as any).debugHorrorTheme = debugHorrorTheme;\n  (window as any).forceHorrorEffects = forceHorrorEffects;\n\n  // Auto-run debug on load\n  setTimeout(() => {\n    debugHorrorTheme();\n    console.log(\n      '💀 Horror debug loaded. Run forceHorrorEffects() in console to force effects.',\n    );\n  }, 2000);\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\horrorQuotes.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\horrorWeatherIcons.tsx",
    "messages": [
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 63,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 63,
        "endColumn": 34
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * Horror-Themed Weather Icons\r\n * Inspired by classic horror movies and spooky atmosphere\r\n * Features blood effects, gothic designs, and eerie animations\r\n */\r\n\r\nimport React from 'react';\r\n\r\n// Simple horror weather icon component using FontAwesome-style approach\r\nexport const HorrorWeatherIcon: React.FC<{\r\n  code: number;\r\n  size?: number;\r\n  isDay?: boolean;\r\n  animated?: boolean;\r\n}> = ({ code, size = 48, isDay = true, animated = true }) => {\r\n  const getHorrorIcon = () => {\r\n    const baseStyle: React.CSSProperties = {\r\n      fontSize: `${size}px`,\r\n      color: '#ff6b6b',\r\n      textShadow: '0 0 10px rgba(139, 0, 0, 0.8)',\r\n      filter: animated ? 'drop-shadow(0 0 10px rgba(139, 0, 0, 0.6))' : 'none',\r\n      transition: 'all 0.3s ease',\r\n    };\r\n\r\n    // Map weather codes to horror-themed emoji/symbols\r\n    if (code === 0 && isDay) {\r\n      return <span style={baseStyle}>☠️</span>; // Evil sun\r\n    }\r\n    if (code === 0 && !isDay) {\r\n      return <span style={baseStyle}>🌙</span>; // Blood moon\r\n    }\r\n    if (code >= 1 && code <= 3) {\r\n      return <span style={baseStyle}>☁️</span>; // Ominous clouds\r\n    }\r\n    if (code >= 45 && code <= 48) {\r\n      return <span style={baseStyle}>👻</span>; // Ghostly fog\r\n    }\r\n    if (code >= 51 && code <= 67) {\r\n      return <span style={baseStyle}>🩸</span>; // Blood rain\r\n    }\r\n    if (code >= 71 && code <= 77) {\r\n      return <span style={baseStyle}>❄️</span>; // Deadly snow\r\n    }\r\n    if (code >= 95 && code <= 99) {\r\n      return <span style={baseStyle}>⚡</span>; // Evil lightning\r\n    }\r\n\r\n    // Default\r\n    return <span style={baseStyle}>☁️</span>;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={animated ? 'horror-icon-animated' : ''}\r\n      style={{ display: 'inline-block' }}\r\n    >\r\n      {getHorrorIcon()}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Export the main function for compatibility\r\nexport const getHorrorWeatherIcon = (\r\n  code: number,\r\n  size: number = 48,\r\n  isDay: boolean = true,\r\n  animated: boolean = true,\r\n): React.ReactElement => {\r\n  return (\r\n    <HorrorWeatherIcon\r\n      code={code}\r\n      size={size}\r\n      isDay={isDay}\r\n      animated={animated}\r\n    />\r\n  );\r\n};\r\n\r\n// Horror weather icon CSS animations\r\nexport const horrorIconStyles = `\r\n.horror-icon-animated {\r\n  animation: horrorFloat 3s ease-in-out infinite;\r\n}\r\n\r\n.horror-lightning {\r\n  animation: horrorFlicker 0.5s infinite;\r\n}\r\n\r\n.blood-rain-drop {\r\n  animation: bloodDrop 1s ease-in infinite;\r\n  animation-delay: calc(var(--i) * 0.2s);\r\n}\r\n\r\n.ash-flake {\r\n  animation: ashFall 3s ease-in infinite;\r\n  animation-delay: calc(var(--i) * 0.3s);\r\n}\r\n\r\n.horror-fog-layer {\r\n  animation: fogDrift 4s ease-in-out infinite;\r\n  animation-delay: calc(var(--i) * 0.5s);\r\n}\r\n\r\n@keyframes horrorFloat {\r\n  0%, 100% { transform: translateY(0px) rotate(0deg); }\r\n  50% { transform: translateY(-10px) rotate(2deg); }\r\n}\r\n\r\n@keyframes horrorFlicker {\r\n  0%, 50%, 100% { opacity: 1; }\r\n  25%, 75% { opacity: 0.3; }\r\n}\r\n\r\n@keyframes bloodDrop {\r\n  0% { transform: translateY(0); opacity: 0; }\r\n  50% { opacity: 1; }\r\n  100% { transform: translateY(20px); opacity: 0; }\r\n}\r\n\r\n@keyframes ashFall {\r\n  0% { transform: translateY(0) rotate(0deg); opacity: 0; }\r\n  50% { opacity: 0.7; }\r\n  100% { transform: translateY(30px) rotate(180deg); opacity: 0; }\r\n}\r\n\r\n@keyframes fogDrift {\r\n  0%, 100% { transform: translateX(0); }\r\n  50% { transform: translateX(10px); }\r\n}\r\n`;\r\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\interactionFeedback.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\lazyComponents.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 128,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 128,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [3963, 4059], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\locationDebug.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\locationDiagnostic.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 103,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 103,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 122,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 122,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 232,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 232,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6731, 6734], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6731, 6734], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 252,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 252,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7253, 7256], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7253, 7256], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Location Diagnostic Tool\n * Helps debug location service issues\n */\n\nimport { locationService } from './locationService';\n\nexport class LocationDiagnostic {\n  /**\n   * Run complete location diagnostic\n   */\n  public static async runDiagnostic(): Promise<{\n    summary: string;\n    details: Array<{\n      check: string;\n      status: 'pass' | 'fail' | 'warning';\n      message: string;\n    }>;\n    recommendations: string[];\n  }> {\n    const details: Array<{\n      check: string;\n      status: 'pass' | 'fail' | 'warning';\n      message: string;\n    }> = [];\n    const recommendations: string[] = [];\n\n    // Check 1: Browser support\n    if (locationService.isSupported()) {\n      details.push({\n        check: 'Browser Support',\n        status: 'pass',\n        message: 'Geolocation API is supported',\n      });\n    } else {\n      details.push({\n        check: 'Browser Support',\n        status: 'fail',\n        message: 'Geolocation API is not supported in this browser',\n      });\n      recommendations.push(\n        'Use a modern browser that supports geolocation (Chrome, Firefox, Safari, Edge)',\n      );\n    }\n\n    // Check 2: Secure context\n    if (locationService.isSecureContext()) {\n      details.push({\n        check: 'Secure Context',\n        status: 'pass',\n        message: 'Running in secure context (HTTPS or localhost)',\n      });\n    } else {\n      details.push({\n        check: 'Secure Context',\n        status: 'fail',\n        message: 'Not running in secure context - location may not work',\n      });\n      recommendations.push(\n        'Access the site via HTTPS for location services to work',\n      );\n    }\n\n    // Check 3: Permissions\n    try {\n      const permission = await locationService.checkPermissions();\n      switch (permission) {\n        case 'granted':\n          details.push({\n            check: 'Permissions',\n            status: 'pass',\n            message: 'Location permission granted',\n          });\n          break;\n        case 'denied':\n          details.push({\n            check: 'Permissions',\n            status: 'fail',\n            message: 'Location permission denied',\n          });\n          recommendations.push(\n            'Enable location permissions in browser settings',\n          );\n          recommendations.push('Refresh the page after enabling permissions');\n          break;\n        case 'prompt':\n          details.push({\n            check: 'Permissions',\n            status: 'warning',\n            message: 'Location permission not yet requested',\n          });\n          recommendations.push(\n            'Click the location button to request permission',\n          );\n          break;\n        default:\n          details.push({\n            check: 'Permissions',\n            status: 'warning',\n            message: `Permission state: ${permission}`,\n          });\n      }\n    } catch (error) {\n      details.push({\n        check: 'Permissions',\n        status: 'warning',\n        message: 'Could not check permission status',\n      });\n    }\n\n    // Check 4: Network connectivity (basic check)\n    try {\n      await fetch('https://nominatim.openstreetmap.org/', {\n        method: 'HEAD',\n        mode: 'no-cors',\n      });\n      details.push({\n        check: 'Network Connectivity',\n        status: 'pass',\n        message: 'Can reach geocoding service',\n      });\n    } catch (error) {\n      details.push({\n        check: 'Network Connectivity',\n        status: 'warning',\n        message: 'May have network connectivity issues',\n      });\n      recommendations.push('Check your internet connection');\n    }\n\n    // Check 5: Environment details\n    const userAgent = navigator.userAgent;\n    const isIOS = /iPad|iPhone|iPod/.test(userAgent);\n    const isAndroid = /Android/.test(userAgent);\n    const isMobile = isIOS || isAndroid || /Mobile/.test(userAgent);\n\n    details.push({\n      check: 'Environment',\n      status: 'pass',\n      message: `Device: ${isMobile ? 'Mobile' : 'Desktop'}, Platform: ${\n        isIOS ? 'iOS' : isAndroid ? 'Android' : 'Other'\n      }`,\n    });\n\n    if (isMobile) {\n      recommendations.push(\n        'On mobile devices, make sure location services are enabled in device settings',\n      );\n    }\n\n    // Generate summary\n    const failedChecks = details.filter(d => d.status === 'fail').length;\n    const warningChecks = details.filter(d => d.status === 'warning').length;\n\n    let summary: string;\n    if (failedChecks === 0 && warningChecks === 0) {\n      summary = 'All checks passed - location should work properly';\n    } else if (failedChecks === 0) {\n      summary = `${warningChecks} warning(s) - location may work with user interaction`;\n    } else {\n      summary = `${failedChecks} critical issue(s) preventing location access`;\n    }\n\n    return {\n      summary,\n      details,\n      recommendations: [...new Set(recommendations)], // Remove duplicates\n    };\n  }\n\n  /**\n   * Log diagnostic results to console\n   */\n  public static async logDiagnostic(): Promise<void> {\n    console.group('📍 Location Service Diagnostic');\n\n    try {\n      const result = await this.runDiagnostic();\n\n      console.log('📋 Summary:', result.summary);\n      console.log('');\n\n      console.group('✅ Detailed Checks');\n      result.details.forEach(detail => {\n        const icon =\n          detail.status === 'pass'\n            ? '✅'\n            : detail.status === 'fail'\n            ? '❌'\n            : '⚠️';\n        console.log(`${icon} ${detail.check}: ${detail.message}`);\n      });\n      console.groupEnd();\n\n      if (result.recommendations.length > 0) {\n        console.log('');\n        console.group('💡 Recommendations');\n        result.recommendations.forEach((rec, index) => {\n          console.log(`${index + 1}. ${rec}`);\n        });\n        console.groupEnd();\n      }\n    } catch (error) {\n      console.error('Failed to run diagnostic:', error);\n    }\n\n    console.groupEnd();\n  }\n\n  /**\n   * Test location acquisition with detailed logging\n   */\n  public static async testLocationAcquisition(): Promise<void> {\n    console.group('🧪 Location Acquisition Test');\n\n    try {\n      console.log('Starting location test...');\n\n      const startTime = performance.now();\n      const result = await locationService.getCurrentLocation();\n      const endTime = performance.now();\n\n      console.log('✅ Location acquired successfully!');\n      console.log(`📍 Coordinates: ${result.latitude}, ${result.longitude}`);\n      console.log(\n        `🎯 Accuracy: ${\n          result.accuracy ? `${Math.round(result.accuracy)}m` : 'Unknown'\n        }`,\n      );\n      console.log(`🏙️ City: ${result.cityName || 'Not determined'}`);\n      console.log(`⏱️ Time taken: ${Math.round(endTime - startTime)}ms`);\n    } catch (error: any) {\n      console.error('❌ Location test failed:', error);\n      console.log('Error details:', {\n        code: error.code,\n        message: error.message,\n        userMessage: error.userMessage,\n      });\n\n      // Run diagnostic for troubleshooting\n      console.log('');\n      console.log('Running diagnostic for troubleshooting...');\n      await this.logDiagnostic();\n    }\n\n    console.groupEnd();\n  }\n}\n\n// Expose diagnostic tools globally in development\nif (process.env.NODE_ENV === 'development') {\n  (window as any).locationDiagnostic = LocationDiagnostic;\n  console.log('📍 Location diagnostic tools available:');\n  console.log('- locationDiagnostic.logDiagnostic() - Run diagnostic checks');\n  console.log(\n    '- locationDiagnostic.testLocationAcquisition() - Test location acquisition',\n  );\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\locationPerformanceMonitor.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\locationService.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 64,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 64,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [1509, 1557], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 114,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 114,
        "endColumn": 21,
        "suggestions": [
          {
            "fix": { "range": [2934, 2986], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 119,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 119,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3075, 3078], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3075, 3078], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Enhanced Location Service\n * Provides robust location detection with permission handling and fallbacks\n */\n\nexport interface LocationResult {\n  latitude: number;\n  longitude: number;\n  accuracy?: number;\n  cityName?: string;\n}\n\nexport interface LocationError {\n  code:\n    | 'PERMISSION_DENIED'\n    | 'POSITION_UNAVAILABLE'\n    | 'TIMEOUT'\n    | 'NOT_SUPPORTED'\n    | 'NETWORK_ERROR';\n  message: string;\n  userMessage: string;\n}\n\n/**\n * Enhanced location service with permission checking and error handling\n */\nexport class EnhancedLocationService {\n  private static instance: EnhancedLocationService;\n\n  public static getInstance(): EnhancedLocationService {\n    if (!EnhancedLocationService.instance) {\n      EnhancedLocationService.instance = new EnhancedLocationService();\n    }\n    return EnhancedLocationService.instance;\n  }\n\n  /**\n   * Check if geolocation is supported\n   */\n  public isSupported(): boolean {\n    return 'geolocation' in navigator;\n  }\n\n  /**\n   * Check current permission status\n   */\n  public async checkPermissions(): Promise<PermissionState | 'not-supported'> {\n    if (!this.isSupported()) {\n      return 'not-supported';\n    }\n\n    try {\n      // Check if permission API is available\n      if ('permissions' in navigator) {\n        const permission = await navigator.permissions.query({\n          name: 'geolocation',\n        });\n        return permission.state;\n      }\n\n      // Fallback: permission API not available\n      return 'prompt';\n    } catch (error) {\n      console.warn('Permission check failed:', error);\n      return 'prompt';\n    }\n  }\n\n  /**\n   * Request location with enhanced error handling\n   */\n  public async getCurrentLocation(): Promise<LocationResult> {\n    if (!this.isSupported()) {\n      throw this.createError(\n        'NOT_SUPPORTED',\n        'Geolocation not supported',\n        'Your browser does not support location services. Please search for your city manually.',\n      );\n    }\n\n    const permissionState = await this.checkPermissions();\n\n    if (permissionState === 'denied') {\n      throw this.createError(\n        'PERMISSION_DENIED',\n        'Permission denied',\n        'Location access is blocked. Please enable location permissions in your browser settings and refresh the page.',\n      );\n    }\n\n    const options: PositionOptions = {\n      enableHighAccuracy: true,\n      timeout: 20000, // 20 seconds\n      maximumAge: 600000, // 10 minutes\n    };\n\n    try {\n      const position = await this.getPositionAsync(options);\n\n      const result: LocationResult = {\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude,\n        accuracy: position.coords.accuracy,\n      };\n\n      // Try to get city name\n      try {\n        const cityName = await this.getCityNameFromCoordinates(\n          result.latitude,\n          result.longitude,\n        );\n        result.cityName = cityName;\n      } catch (cityError) {\n        console.warn('Failed to get city name:', cityError);\n        // Continue without city name\n      }\n\n      return result;\n    } catch (error: any) {\n      if (error instanceof GeolocationPositionError) {\n        switch (error.code) {\n          case GeolocationPositionError.PERMISSION_DENIED:\n            throw this.createError(\n              'PERMISSION_DENIED',\n              'Permission denied',\n              'Location access was denied. Please enable location permissions and try again.',\n            );\n          case GeolocationPositionError.POSITION_UNAVAILABLE:\n            throw this.createError(\n              'POSITION_UNAVAILABLE',\n              'Position unavailable',\n              'Your location could not be determined. Please check your device settings or try searching for your city.',\n            );\n          case GeolocationPositionError.TIMEOUT:\n            throw this.createError(\n              'TIMEOUT',\n              'Request timeout',\n              'Location request timed out. Please try again or search for your city manually.',\n            );\n          default:\n            throw this.createError(\n              'POSITION_UNAVAILABLE',\n              'Unknown geolocation error',\n              'An error occurred while getting your location. Please try again.',\n            );\n        }\n      }\n      throw this.createError(\n        'POSITION_UNAVAILABLE',\n        'Location failed',\n        'Failed to get your location. Please try again or search for your city manually.',\n      );\n    }\n  }\n\n  /**\n   * Get position using Promise wrapper\n   */\n  private getPositionAsync(\n    options: PositionOptions,\n  ): Promise<GeolocationPosition> {\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  }\n\n  /**\n   * Get city name from coordinates using reverse geocoding\n   */\n  private async getCityNameFromCoordinates(\n    latitude: number,\n    longitude: number,\n  ): Promise<string> {\n    const response = await fetch(\n      `https://nominatim.openstreetmap.org/reverse?lat=${latitude}&lon=${longitude}&format=json`,\n      {\n        headers: {\n          'User-Agent': 'PremiumWeatherApp/1.0 (weather.andernet.dev)',\n        },\n      },\n    );\n\n    if (!response.ok) {\n      throw new Error(`Reverse geocoding failed: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    return (\n      data.address?.city ||\n      data.address?.town ||\n      data.address?.village ||\n      data.address?.municipality ||\n      data.address?.county ||\n      'Current Location'\n    );\n  }\n\n  /**\n   * Create standardized error object\n   */\n  private createError(\n    code: LocationError['code'],\n    message: string,\n    userMessage: string,\n  ): LocationError {\n    return {\n      code,\n      message,\n      userMessage,\n    };\n  }\n\n  /**\n   * Check if the current context is secure (HTTPS or localhost)\n   */\n  public isSecureContext(): boolean {\n    return (\n      window.isSecureContext ||\n      location.protocol === 'https:' ||\n      location.hostname === 'localhost'\n    );\n  }\n\n  /**\n   * Get user-friendly error message for location issues\n   */\n  public getLocationTips(): string[] {\n    const tips = [];\n\n    if (!this.isSecureContext()) {\n      tips.push('Location services require a secure connection (HTTPS)');\n    }\n\n    tips.push('Make sure location services are enabled in your browser');\n    tips.push('Check that your device has location services turned on');\n    tips.push('Try refreshing the page and allowing location access');\n\n    return tips;\n  }\n}\n\n// Export singleton instance\nexport const locationService = EnhancedLocationService.getInstance();\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\locationSpeedTest.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\locationWeatherOptimizer.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\logger.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\memoryOptimization.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\mobileScreenOptimization.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\multiSensoryCoordinator.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\nativeApiService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\networkResilienceManager.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 235,
        "column": 23,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 235,
        "endColumn": 49
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 114,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 114,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [2968, 3025], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 432,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 432,
        "endColumn": 21,
        "suggestions": [
          {
            "fix": { "range": [11547, 11601], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 483,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 483,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [12750, 12796], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 496,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 496,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [13117, 13166], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 506,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 506,
        "endColumn": 17,
        "suggestions": [
          {
            "fix": { "range": [13318, 13361], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 527,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 527,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [13985, 14035], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 640,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 640,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [16564, 16609], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 658,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 658,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [16989, 17044], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Network Resilience Manager\n *\n * Provides intelligent network management, automatic retry mechanisms,\n * and seamless offline/online state handling for search functionality.\n */\n\n// Network Configuration\nconst NETWORK_CONFIG = {\n  // Retry strategy\n  MAX_RETRIES: 3,\n  RETRY_DELAYS: [1000, 2000, 4000], // Progressive delays in ms\n  EXPONENTIAL_BACKOFF: true,\n  JITTER_MAX: 500, // Random jitter up to 500ms\n\n  // Timeout configuration\n  DEFAULT_TIMEOUT: 8000, // 8 seconds\n  QUICK_TIMEOUT: 3000, // 3 seconds for cached data fallback\n  SLOW_TIMEOUT: 15000, // 15 seconds for critical operations\n\n  // Connection monitoring\n  CONNECTION_CHECK_INTERVAL: 10000, // Check connection every 10 seconds\n  HEALTH_CHECK_URL: 'https://httpbin.org/status/200',\n  FALLBACK_CHECK_URL: 'https://www.google.com/favicon.ico',\n\n  // Request prioritization\n  PRIORITY_LEVELS: {\n    CRITICAL: 'critical',\n    HIGH: 'high',\n    MEDIUM: 'medium',\n    LOW: 'low',\n  },\n\n  // Circuit breaker\n  CIRCUIT_BREAKER: {\n    FAILURE_THRESHOLD: 5,\n    SUCCESS_THRESHOLD: 3,\n    TIMEOUT: 60000, // 1 minute\n  },\n} as const;\n\n// Types\ninterface NetworkRequest {\n  id: string;\n  url: string;\n  options: RequestInit;\n  priority: string;\n  retryCount: number;\n  maxRetries: number;\n  timeout: number;\n  timestamp: number;\n  source: 'user' | 'system' | 'background';\n}\n\ninterface CircuitBreakerState {\n  state: 'closed' | 'open' | 'half-open';\n  failureCount: number;\n  successCount: number;\n  lastFailureTime: number;\n  lastSuccessTime: number;\n}\n\ninterface NetworkMetrics {\n  requestCount: number;\n  successCount: number;\n  failureCount: number;\n  averageResponseTime: number;\n  retryCount: number;\n  circuitBreakerTrips: number;\n  lastConnectionCheck: number;\n  isOnline: boolean;\n}\n\ninterface QueuedRequest extends NetworkRequest {\n  resolve: (value: Response) => void;\n  reject: (reason: unknown) => void;\n  abortController: AbortController;\n}\n\n/**\n * Advanced Network Resilience Manager\n * Handles network requests with intelligent retry, caching, and offline support\n */\nexport class NetworkResilienceManager {\n  private requestQueue: QueuedRequest[] = [];\n  private processingQueue = false;\n  private isOnline = navigator.onLine;\n  private connectionCheckTimer: NodeJS.Timeout | null = null;\n  private circuitBreakers = new Map<string, CircuitBreakerState>();\n  private metrics: NetworkMetrics = {\n    requestCount: 0,\n    successCount: 0,\n    failureCount: 0,\n    averageResponseTime: 0,\n    retryCount: 0,\n    circuitBreakerTrips: 0,\n    lastConnectionCheck: Date.now(),\n    isOnline: navigator.onLine,\n  };\n\n  // Event listeners for network state changes\n  private onlineHandlers: Array<() => void> = [];\n  private offlineHandlers: Array<() => void> = [];\n\n  /**\n   * Initialize network resilience manager\n   */\n  initialize(): void {\n    this.setupNetworkListeners();\n    this.startConnectionMonitoring();\n    this.processRequestQueue();\n\n    // eslint-disable-next-line no-console\n    console.log('🌐 Network Resilience Manager initialized');\n  }\n\n  /**\n   * Setup network event listeners\n   */\n  private setupNetworkListeners(): void {\n    window.addEventListener('online', () => {\n      this.isOnline = true;\n      this.metrics.isOnline = true;\n      this.onNetworkOnline();\n    });\n\n    window.addEventListener('offline', () => {\n      this.isOnline = false;\n      this.metrics.isOnline = false;\n      this.onNetworkOffline();\n    });\n\n    // Listen for visibility changes to check connection\n    document.addEventListener('visibilitychange', () => {\n      if (!document.hidden) {\n        this.checkConnectionHealth();\n      }\n    });\n  }\n\n  /**\n   * Start periodic connection monitoring\n   */\n  private startConnectionMonitoring(): void {\n    this.connectionCheckTimer = setInterval(() => {\n      this.checkConnectionHealth();\n    }, NETWORK_CONFIG.CONNECTION_CHECK_INTERVAL);\n  }\n\n  /**\n   * Make resilient network request with automatic retry and queue management\n   */\n  async makeRequest(\n    url: string,\n    options: RequestInit = {},\n    config: {\n      priority?: string;\n      maxRetries?: number;\n      timeout?: number;\n      source?: 'user' | 'system' | 'background';\n    } = {},\n  ): Promise<Response> {\n    const request: NetworkRequest = {\n      id: this.generateRequestId(),\n      url,\n      options: {\n        ...options,\n        headers: {\n          'User-Agent': 'WeatherApp/1.0',\n          ...options.headers,\n        },\n      },\n      priority: config.priority || NETWORK_CONFIG.PRIORITY_LEVELS.MEDIUM,\n      retryCount: 0,\n      maxRetries: config.maxRetries ?? NETWORK_CONFIG.MAX_RETRIES,\n      timeout: config.timeout ?? NETWORK_CONFIG.DEFAULT_TIMEOUT,\n      timestamp: Date.now(),\n      source: config.source || 'user',\n    };\n\n    return new Promise((resolve, reject) => {\n      const abortController = new AbortController();\n\n      const queuedRequest: QueuedRequest = {\n        ...request,\n        resolve,\n        reject,\n        abortController,\n      };\n\n      this.addToQueue(queuedRequest);\n    });\n  }\n\n  /**\n   * Add request to priority queue\n   */\n  private addToQueue(request: QueuedRequest): void {\n    // Insert request based on priority\n    const priorityOrder = Object.values(NETWORK_CONFIG.PRIORITY_LEVELS);\n    // @ts-expect-error - Priority type mismatch\n    const requestPriorityIndex = priorityOrder.indexOf(request.priority);\n\n    let insertIndex = this.requestQueue.length;\n    for (let i = 0; i < this.requestQueue.length; i++) {\n      const queuePriorityIndex = priorityOrder.indexOf(\n        // @ts-expect-error - Priority type mismatch\n        this.requestQueue[i].priority,\n      );\n      if (requestPriorityIndex < queuePriorityIndex) {\n        insertIndex = i;\n        break;\n      }\n    }\n\n    this.requestQueue.splice(insertIndex, 0, request);\n\n    // Start processing if not already processing\n    if (!this.processingQueue) {\n      this.processRequestQueue();\n    }\n  }\n\n  /**\n   * Process request queue with intelligent scheduling\n   */\n  private async processRequestQueue(): Promise<void> {\n    if (this.processingQueue || this.requestQueue.length === 0) {\n      return;\n    }\n\n    this.processingQueue = true;\n\n    while (this.requestQueue.length > 0) {\n      const request = this.requestQueue.shift()!;\n\n      try {\n        const response = await this.executeRequest(request);\n        request.resolve(response);\n      } catch (error) {\n        request.reject(error);\n      }\n\n      // Small delay between requests to prevent overwhelming\n      if (this.requestQueue.length > 0) {\n        await this.delay(50);\n      }\n    }\n\n    this.processingQueue = false;\n  }\n\n  /**\n   * Execute individual request with retry logic and circuit breaker\n   */\n  private async executeRequest(request: QueuedRequest): Promise<Response> {\n    const host = new URL(request.url).host;\n\n    // Check circuit breaker\n    if (this.isCircuitBreakerOpen(host)) {\n      throw new Error(`Circuit breaker open for ${host}`);\n    }\n\n    this.metrics.requestCount++;\n    const startTime = performance.now();\n\n    while (request.retryCount <= request.maxRetries) {\n      try {\n        const response = await this.performRequest(request);\n\n        // Update metrics and circuit breaker on success\n        const duration = performance.now() - startTime;\n        this.updateMetrics(true, duration);\n        this.updateCircuitBreaker(host, true);\n\n        return response;\n      } catch (error) {\n        request.retryCount++;\n        this.metrics.retryCount++;\n\n        // Update circuit breaker on failure\n        this.updateCircuitBreaker(host, false);\n\n        // If max retries reached, fail\n        if (request.retryCount > request.maxRetries) {\n          this.updateMetrics(false);\n          throw error;\n        }\n\n        // Calculate retry delay with exponential backoff and jitter\n        const delay = this.calculateRetryDelay(request.retryCount);\n        await this.delay(delay);\n      }\n    }\n\n    // Should never reach here, but TypeScript needs it\n    throw new Error('Maximum retries exceeded');\n  }\n\n  /**\n   * Perform the actual network request\n   */\n  private async performRequest(request: QueuedRequest): Promise<Response> {\n    // If offline, reject immediately for non-critical requests\n    if (\n      !this.isOnline &&\n      request.priority !== NETWORK_CONFIG.PRIORITY_LEVELS.CRITICAL\n    ) {\n      throw new Error('Network offline');\n    }\n\n    // Setup timeout\n    const timeoutId = setTimeout(() => {\n      request.abortController.abort();\n    }, request.timeout);\n\n    try {\n      const response = await fetch(request.url, {\n        ...request.options,\n        signal: request.abortController.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return response;\n    } catch (error) {\n      clearTimeout(timeoutId);\n\n      if (error instanceof Error) {\n        if (error.name === 'AbortError') {\n          throw new Error('Request timeout');\n        }\n        throw error;\n      }\n\n      throw new Error('Network request failed');\n    }\n  }\n\n  /**\n   * Calculate retry delay with exponential backoff and jitter\n   */\n  private calculateRetryDelay(retryCount: number): number {\n    let delay: number;\n\n    if (NETWORK_CONFIG.EXPONENTIAL_BACKOFF) {\n      delay = Math.min(\n        NETWORK_CONFIG.RETRY_DELAYS[\n          Math.min(retryCount - 1, NETWORK_CONFIG.RETRY_DELAYS.length - 1)\n        ],\n        NETWORK_CONFIG.RETRY_DELAYS[NETWORK_CONFIG.RETRY_DELAYS.length - 1] *\n          Math.pow(2, retryCount - NETWORK_CONFIG.RETRY_DELAYS.length),\n      );\n    } else {\n      delay =\n        NETWORK_CONFIG.RETRY_DELAYS[\n          Math.min(retryCount - 1, NETWORK_CONFIG.RETRY_DELAYS.length - 1)\n        ];\n    }\n\n    // Add jitter to prevent thundering herd\n    const jitter = Math.random() * NETWORK_CONFIG.JITTER_MAX;\n    return delay + jitter;\n  }\n\n  /**\n   * Check if circuit breaker is open for a host\n   */\n  private isCircuitBreakerOpen(host: string): boolean {\n    const breaker = this.circuitBreakers.get(host);\n    if (!breaker) return false;\n\n    if (breaker.state === 'open') {\n      // Check if timeout has passed to transition to half-open\n      if (\n        Date.now() - breaker.lastFailureTime >\n        NETWORK_CONFIG.CIRCUIT_BREAKER.TIMEOUT\n      ) {\n        breaker.state = 'half-open';\n        breaker.successCount = 0;\n        return false;\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Update circuit breaker state\n   */\n  private updateCircuitBreaker(host: string, success: boolean): void {\n    let breaker = this.circuitBreakers.get(host);\n\n    if (!breaker) {\n      breaker = {\n        state: 'closed',\n        failureCount: 0,\n        successCount: 0,\n        lastFailureTime: 0,\n        lastSuccessTime: 0,\n      };\n      this.circuitBreakers.set(host, breaker);\n    }\n\n    if (success) {\n      breaker.successCount++;\n      breaker.lastSuccessTime = Date.now();\n\n      if (\n        breaker.state === 'half-open' &&\n        breaker.successCount >= NETWORK_CONFIG.CIRCUIT_BREAKER.SUCCESS_THRESHOLD\n      ) {\n        breaker.state = 'closed';\n        breaker.failureCount = 0;\n      }\n    } else {\n      breaker.failureCount++;\n      breaker.lastFailureTime = Date.now();\n\n      if (\n        breaker.state === 'closed' &&\n        breaker.failureCount >= NETWORK_CONFIG.CIRCUIT_BREAKER.FAILURE_THRESHOLD\n      ) {\n        breaker.state = 'open';\n        this.metrics.circuitBreakerTrips++;\n        // eslint-disable-next-line no-console\n        console.warn(`🔴 Circuit breaker opened for ${host}`);\n      } else if (breaker.state === 'half-open') {\n        breaker.state = 'open';\n        breaker.successCount = 0;\n      }\n    }\n  }\n\n  /**\n   * Check connection health using ping requests\n   */\n  private async checkConnectionHealth(): Promise<boolean> {\n    try {\n      await fetch(NETWORK_CONFIG.HEALTH_CHECK_URL, {\n        method: 'HEAD',\n        mode: 'no-cors',\n        cache: 'no-cache',\n      });\n\n      this.isOnline = true;\n      this.metrics.isOnline = true;\n      this.metrics.lastConnectionCheck = Date.now();\n\n      return true;\n    } catch {\n      // Try fallback URL\n      try {\n        await fetch(NETWORK_CONFIG.FALLBACK_CHECK_URL, {\n          method: 'HEAD',\n          mode: 'no-cors',\n          cache: 'no-cache',\n        });\n\n        this.isOnline = true;\n        this.metrics.isOnline = true;\n        this.metrics.lastConnectionCheck = Date.now();\n\n        return true;\n      } catch {\n        this.isOnline = false;\n        this.metrics.isOnline = false;\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Handle network coming online\n   */\n  private onNetworkOnline(): void {\n    // eslint-disable-next-line no-console\n    console.log('🟢 Network connection restored');\n\n    // Process any queued requests\n    if (!this.processingQueue && this.requestQueue.length > 0) {\n      this.processRequestQueue();\n    }\n\n    // Notify handlers\n    this.onlineHandlers.forEach(handler => {\n      try {\n        handler();\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Error in online handler:', error);\n      }\n    });\n  }\n\n  /**\n   * Handle network going offline\n   */\n  private onNetworkOffline(): void {\n    // eslint-disable-next-line no-console\n    console.warn('🔴 Network connection lost');\n\n    // Abort non-critical requests\n    this.requestQueue.forEach(request => {\n      if (request.priority !== NETWORK_CONFIG.PRIORITY_LEVELS.CRITICAL) {\n        request.abortController.abort();\n        request.reject(new Error('Network offline'));\n      }\n    });\n\n    // Remove aborted requests from queue\n    this.requestQueue = this.requestQueue.filter(\n      request => request.priority === NETWORK_CONFIG.PRIORITY_LEVELS.CRITICAL,\n    );\n\n    // Notify handlers\n    this.offlineHandlers.forEach(handler => {\n      try {\n        handler();\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Error in offline handler:', error);\n      }\n    });\n  }\n\n  /**\n   * Update network metrics\n   */\n  private updateMetrics(success: boolean, duration?: number): void {\n    if (success) {\n      this.metrics.successCount++;\n\n      if (duration !== undefined) {\n        // Update average response time\n        const totalRequests = this.metrics.successCount;\n        this.metrics.averageResponseTime =\n          (this.metrics.averageResponseTime * (totalRequests - 1) + duration) /\n          totalRequests;\n      }\n    } else {\n      this.metrics.failureCount++;\n    }\n  }\n\n  /**\n   * Simple delay utility\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Generate unique request ID\n   */\n  private generateRequestId(): string {\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Add online event handler\n   */\n  onOnline(handler: () => void): void {\n    this.onlineHandlers.push(handler);\n  }\n\n  /**\n   * Add offline event handler\n   */\n  onOffline(handler: () => void): void {\n    this.offlineHandlers.push(handler);\n  }\n\n  /**\n   * Remove online event handler\n   */\n  removeOnlineHandler(handler: () => void): void {\n    const index = this.onlineHandlers.indexOf(handler);\n    if (index > -1) {\n      this.onlineHandlers.splice(index, 1);\n    }\n  }\n\n  /**\n   * Remove offline event handler\n   */\n  removeOfflineHandler(handler: () => void): void {\n    const index = this.offlineHandlers.indexOf(handler);\n    if (index > -1) {\n      this.offlineHandlers.splice(index, 1);\n    }\n  }\n\n  /**\n   * Get current network status\n   */\n  getNetworkStatus(): {\n    isOnline: boolean;\n    metrics: NetworkMetrics;\n    queueLength: number;\n    circuitBreakers: Array<{ host: string; state: string }>;\n  } {\n    return {\n      isOnline: this.isOnline,\n      metrics: { ...this.metrics },\n      queueLength: this.requestQueue.length,\n      circuitBreakers: Array.from(this.circuitBreakers.entries()).map(\n        ([host, breaker]) => ({\n          host,\n          state: breaker.state,\n        }),\n      ),\n    };\n  }\n\n  /**\n   * Cancel all pending requests\n   */\n  cancelAllRequests(): void {\n    this.requestQueue.forEach(request => {\n      request.abortController.abort();\n      request.reject(new Error('Request cancelled'));\n    });\n\n    this.requestQueue = [];\n    this.processingQueue = false;\n  }\n\n  /**\n   * Reset all circuit breakers\n   */\n  resetCircuitBreakers(): void {\n    this.circuitBreakers.clear();\n    // eslint-disable-next-line no-console\n    console.log('🔄 All circuit breakers reset');\n  }\n\n  /**\n   * Cleanup and destroy the manager\n   */\n  destroy(): void {\n    if (this.connectionCheckTimer) {\n      clearInterval(this.connectionCheckTimer);\n      this.connectionCheckTimer = null;\n    }\n\n    this.cancelAllRequests();\n    this.circuitBreakers.clear();\n    this.onlineHandlers = [];\n    this.offlineHandlers = [];\n\n    // eslint-disable-next-line no-console\n    console.log('🔌 Network Resilience Manager destroyed');\n  }\n}\n\n// Export singleton instance\nexport const networkResilienceManager = new NetworkResilienceManager();\n\n// Export types for use in other modules\nexport type {\n  CircuitBreakerState,\n  NetworkMetrics,\n  NetworkRequest,\n  QueuedRequest,\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\offlineWeatherStorage.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 8,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 8,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [158, 161], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [158, 161], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 28,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 28,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [625, 628], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [625, 628], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 41,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 41,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [1006, 1057], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 43,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 43,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [1086, 1141], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1237, 1240], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1237, 1240], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 64,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 64,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [1585, 1645], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 67,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 67,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [1705, 1770], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 98,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 98,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [2631, 2685], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 132,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 132,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [3382, 3433], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 135,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 135,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [3470, 3520], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 185,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 185,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [4721, 4773], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 187,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 187,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [4802, 4850], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * PWA Offline Storage Enhancement\n * Provides comprehensive offline weather data management\n */\n\ninterface WeatherCacheData {\n  city: string;\n  weather: any;\n  timestamp: number;\n  expires: number;\n}\n\ninterface CachedCity {\n  name: string;\n  lat: number;\n  lon: number;\n  lastUpdated: number;\n}\n\nexport class OfflineWeatherStorage {\n  private readonly CACHE_KEY = 'weather-app-offline-data';\n  private readonly CITIES_KEY = 'weather-app-cities';\n  private readonly CACHE_DURATION = 30 * 60 * 1000; // 30 minutes\n\n  /**\n   * Cache weather data for offline access\n   */\n  async cacheWeatherData(city: string, weatherData: any): Promise<void> {\n    try {\n      const cacheData: WeatherCacheData = {\n        city,\n        weather: weatherData,\n        timestamp: Date.now(),\n        expires: Date.now() + this.CACHE_DURATION,\n      };\n\n      const existingData = this.getOfflineData();\n      existingData[city] = cacheData;\n\n      localStorage.setItem(this.CACHE_KEY, JSON.stringify(existingData));\n      console.log(`🗄️ Cached weather data for ${city}`);\n    } catch (error) {\n      console.warn('❌ Failed to cache weather data:', error);\n    }\n  }\n\n  /**\n   * Retrieve cached weather data\n   */\n  getCachedWeatherData(city: string): any | null {\n    try {\n      const data = this.getOfflineData();\n      const cityData = data[city];\n\n      if (!cityData) return null;\n\n      // Check if data is still valid\n      if (Date.now() > cityData.expires) {\n        delete data[city];\n        localStorage.setItem(this.CACHE_KEY, JSON.stringify(data));\n        return null;\n      }\n\n      console.log(`📱 Retrieved cached weather data for ${city}`);\n      return cityData.weather;\n    } catch (error) {\n      console.warn('❌ Failed to retrieve cached weather data:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get all cached offline data\n   */\n  private getOfflineData(): Record<string, WeatherCacheData> {\n    try {\n      const data = localStorage.getItem(this.CACHE_KEY);\n      return data ? JSON.parse(data) : {};\n    } catch {\n      return {};\n    }\n  }\n\n  /**\n   * Cache recent city searches\n   */\n  async cacheRecentCity(name: string, lat: number, lon: number): Promise<void> {\n    try {\n      const cities = this.getRecentCities();\n      const newCity: CachedCity = { name, lat, lon, lastUpdated: Date.now() };\n\n      // Remove existing entry and add to beginning\n      const filteredCities = cities.filter(c => c.name !== name);\n      const updatedCities = [newCity, ...filteredCities].slice(0, 10); // Keep last 10\n\n      localStorage.setItem(this.CITIES_KEY, JSON.stringify(updatedCities));\n    } catch (error) {\n      console.warn('❌ Failed to cache recent city:', error);\n    }\n  }\n\n  /**\n   * Get recent cities for offline access\n   */\n  getRecentCities(): CachedCity[] {\n    try {\n      const data = localStorage.getItem(this.CITIES_KEY);\n      return data ? JSON.parse(data) : [];\n    } catch {\n      return [];\n    }\n  }\n\n  /**\n   * Clear expired cache entries\n   */\n  cleanupExpiredCache(): void {\n    try {\n      const data = this.getOfflineData();\n      const now = Date.now();\n      let cleaned = false;\n\n      Object.keys(data).forEach(city => {\n        if (now > data[city].expires) {\n          delete data[city];\n          cleaned = true;\n        }\n      });\n\n      if (cleaned) {\n        localStorage.setItem(this.CACHE_KEY, JSON.stringify(data));\n        console.log('🧹 Cleaned up expired weather cache');\n      }\n    } catch (error) {\n      console.warn('❌ Failed to cleanup cache:', error);\n    }\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getCacheStats(): {\n    cachedCities: number;\n    recentCities: number;\n    totalSize: string;\n    oldestCache: string | null;\n  } {\n    try {\n      const weatherData = this.getOfflineData();\n      const cities = this.getRecentCities();\n\n      const weatherDataSize = JSON.stringify(weatherData).length;\n      const citiesSize = JSON.stringify(cities).length;\n      const totalBytes = weatherDataSize + citiesSize;\n\n      const oldestEntry = Object.values(weatherData).sort(\n        (a, b) => a.timestamp - b.timestamp,\n      )[0];\n\n      return {\n        cachedCities: Object.keys(weatherData).length,\n        recentCities: cities.length,\n        totalSize: `${(totalBytes / 1024).toFixed(1)} KB`,\n        oldestCache: oldestEntry\n          ? new Date(oldestEntry.timestamp).toLocaleString()\n          : null,\n      };\n    } catch {\n      return {\n        cachedCities: 0,\n        recentCities: 0,\n        totalSize: '0 KB',\n        oldestCache: null,\n      };\n    }\n  }\n\n  /**\n   * Clear all offline data\n   */\n  clearAllCache(): void {\n    try {\n      localStorage.removeItem(this.CACHE_KEY);\n      localStorage.removeItem(this.CITIES_KEY);\n      console.log('🗑️ Cleared all offline weather data');\n    } catch (error) {\n      console.warn('❌ Failed to clear cache:', error);\n    }\n  }\n}\n\n// Export singleton instance\nexport const offlineStorage = new OfflineWeatherStorage();\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\pageTransitionChoreographer.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\performanceMonitor.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 287,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 287,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7567, 7570], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7567, 7570], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 319,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 319,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8376, 8379], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8376, 8379], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
        "line": 511,
        "column": 7,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [14030, 14068], "text": " " }
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 654,
        "column": 26,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 654,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [17725, 17726], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 655,
        "column": 26,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 655,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [17777, 17778], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 661,
        "column": 29,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 661,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [17927, 17928], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "/**\n * Performance Monitor for Search Enhancement Features\n *\n * Provides comprehensive performance tracking, analysis, and optimization\n * for all search-related functionality including memory management.\n */\n\n// Performance Configuration\nconst PERFORMANCE_CONFIG = {\n  // Sampling rates\n  SAMPLING_RATE: 0.1, // 10% sampling for production\n  DEBUG_SAMPLING_RATE: 1.0, // 100% sampling for development\n\n  // Thresholds (in milliseconds)\n  THRESHOLDS: {\n    SEARCH_QUERY: 500, // Search should complete under 500ms\n    AUTOCORRECT: 100, // Autocorrect should complete under 100ms\n    VOICE_RECOGNITION: 2000, // Voice recognition timeout\n    CACHE_RETRIEVAL: 50, // Cache access should be under 50ms\n    API_REQUEST: 5000, // API requests timeout\n    MEMORY_USAGE: 50 * 1024 * 1024, // 50MB memory limit\n  },\n\n  // Collection intervals\n  COLLECTION_INTERVAL: 30000, // Collect metrics every 30 seconds\n  CLEANUP_INTERVAL: 300000, // Cleanup old metrics every 5 minutes\n  REPORT_INTERVAL: 60000, // Send performance reports every minute\n\n  // Storage limits\n  MAX_METRICS_STORED: 1000,\n  MAX_MEMORY_SAMPLES: 100,\n  METRICS_TTL: 24 * 60 * 60 * 1000, // 24 hours\n} as const;\n\n// Performance Metric Types\ninterface PerformanceMetric {\n  id: string;\n  type: string;\n  name: string;\n  value: number;\n  timestamp: number;\n  details?: Record<string, unknown>;\n  tags?: string[];\n}\n\ninterface MemoryMetric {\n  timestamp: number;\n  used: number;\n  total: number;\n  limit: number;\n  heapUsed?: number;\n  heapTotal?: number;\n  external?: number;\n}\n\ninterface SearchPerformanceData {\n  query: string;\n  duration: number;\n  source: 'api' | 'cache' | 'popular' | 'autocorrect' | 'voice';\n  resultCount: number;\n  cacheHit: boolean;\n  accuracy?: number;\n  confidence?: number;\n}\n\ninterface PerformanceSummary {\n  averageSearchTime: number;\n  cacheHitRate: number;\n  memoryUsage: MemoryMetric;\n  errorRate: number;\n  totalSearches: number;\n  performanceScore: number;\n  recommendations: string[];\n}\n\n/**\n * Advanced Performance Monitor\n * Tracks and analyzes all search enhancement performance metrics\n */\nexport class PerformanceMonitor {\n  private metrics: PerformanceMetric[] = [];\n  private memoryMetrics: MemoryMetric[] = [];\n  private isCollecting = false;\n  private collectionTimer: NodeJS.Timeout | null = null;\n  private cleanupTimer: NodeJS.Timeout | null = null;\n  private reportTimer: NodeJS.Timeout | null = null;\n  private observer: PerformanceObserver | null = null;\n  private memoryObserver: NodeJS.Timeout | null = null;\n\n  // Performance tracking state\n  private activeOperations = new Map<string, number>();\n  private searchCache = new Map<string, SearchPerformanceData>();\n  private errorCount = 0;\n  private totalOperations = 0;\n\n  /**\n   * Initialize performance monitoring\n   */\n  initialize(): void {\n    if (this.isCollecting) return;\n\n    try {\n      this.setupPerformanceObserver();\n      this.setupMemoryMonitoring();\n      this.startPeriodicCollection();\n      this.isCollecting = true;\n\n      console.log('📊 Performance Monitor initialized successfully');\n    } catch (error) {\n      console.error('❌ Failed to initialize Performance Monitor:', error);\n    }\n  }\n\n  /**\n   * Setup Performance Observer for browser performance metrics\n   */\n  private setupPerformanceObserver(): void {\n    if (typeof PerformanceObserver === 'undefined') {\n      console.warn('PerformanceObserver not supported in this environment');\n      return;\n    }\n\n    try {\n      this.observer = new PerformanceObserver(list => {\n        const entries = list.getEntries();\n\n        entries.forEach(entry => {\n          if (this.shouldSample()) {\n            this.recordMetric({\n              id: this.generateId(),\n              type: 'performance',\n              name: entry.name,\n              value: entry.duration,\n              timestamp: Date.now(),\n              details: {\n                entryType: entry.entryType,\n                startTime: entry.startTime,\n                ...this.extractPerformanceDetails(entry),\n              },\n              tags: ['browser', entry.entryType],\n            });\n          }\n        });\n      });\n\n      // Observe different types of performance entries\n      this.observer.observe({\n        entryTypes: ['measure', 'navigation', 'resource', 'paint'],\n      });\n    } catch (error) {\n      console.warn('Failed to setup PerformanceObserver:', error);\n    }\n  }\n\n  /**\n   * Setup memory monitoring\n   */\n  private setupMemoryMonitoring(): void {\n    this.memoryObserver = setInterval(() => {\n      this.collectMemoryMetrics();\n    }, PERFORMANCE_CONFIG.COLLECTION_INTERVAL);\n  }\n\n  /**\n   * Start periodic metric collection and cleanup\n   */\n  private startPeriodicCollection(): void {\n    // Periodic cleanup\n    this.cleanupTimer = setInterval(() => {\n      this.cleanupOldMetrics();\n    }, PERFORMANCE_CONFIG.CLEANUP_INTERVAL);\n\n    // Periodic reporting\n    this.reportTimer = setInterval(() => {\n      this.generatePerformanceReport();\n    }, PERFORMANCE_CONFIG.REPORT_INTERVAL);\n  }\n\n  /**\n   * Track search operation start\n   */\n  startSearchOperation(\n    operationId: string,\n    type: string,\n    details?: Record<string, unknown>,\n  ): void {\n    const startTime = performance.now();\n    this.activeOperations.set(operationId, startTime);\n\n    // Record operation start\n    this.recordMetric({\n      id: this.generateId(),\n      type: 'search_operation_start',\n      name: type,\n      value: startTime,\n      timestamp: Date.now(),\n      details: {\n        operationId,\n        ...details,\n      },\n      tags: ['search', 'start', type],\n    });\n  }\n\n  /**\n   * Track search operation completion\n   */\n  endSearchOperation(\n    operationId: string,\n    type: string,\n    data: Partial<SearchPerformanceData>,\n  ): number {\n    const endTime = performance.now();\n    const startTime = this.activeOperations.get(operationId);\n\n    if (!startTime) {\n      console.warn(`No start time found for operation: ${operationId}`);\n      return 0;\n    }\n\n    const duration = endTime - startTime;\n    this.activeOperations.delete(operationId);\n    this.totalOperations++;\n\n    // Record operation completion\n    const searchData: SearchPerformanceData = {\n      query: data.query || '',\n      duration,\n      source: data.source || 'api',\n      resultCount: data.resultCount || 0,\n      cacheHit: data.cacheHit || false,\n      accuracy: data.accuracy,\n      confidence: data.confidence,\n    };\n\n    this.searchCache.set(operationId, searchData);\n\n    this.recordMetric({\n      id: this.generateId(),\n      type: 'search_operation_complete',\n      name: type,\n      value: duration,\n      timestamp: Date.now(),\n      details: {\n        operationId,\n        ...searchData,\n      },\n      tags: ['search', 'complete', type, data.source || 'api'],\n    });\n\n    // Check performance thresholds\n    this.checkPerformanceThreshold(type, duration);\n\n    return duration;\n  }\n\n  /**\n   * Track search errors\n   */\n  recordSearchError(\n    type: string,\n    error: Error,\n    details?: Record<string, unknown>,\n  ): void {\n    this.errorCount++;\n\n    this.recordMetric({\n      id: this.generateId(),\n      type: 'search_error',\n      name: type,\n      value: 1,\n      timestamp: Date.now(),\n      details: {\n        error: error.message,\n        stack: error.stack,\n        ...details,\n      },\n      tags: ['search', 'error', type],\n    });\n  }\n\n  /**\n   * Track memory usage patterns\n   */\n  recordMemoryUsage(context: string, details?: Record<string, unknown>): void {\n    if ('memory' in performance) {\n      const memory = (performance as any).memory;\n\n      this.recordMetric({\n        id: this.generateId(),\n        type: 'memory_usage',\n        name: context,\n        value: memory.usedJSHeapSize,\n        timestamp: Date.now(),\n        details: {\n          usedJSHeapSize: memory.usedJSHeapSize,\n          totalJSHeapSize: memory.totalJSHeapSize,\n          jsHeapSizeLimit: memory.jsHeapSizeLimit,\n          ...details,\n        },\n        tags: ['memory', context],\n      });\n    }\n  }\n\n  /**\n   * Collect comprehensive memory metrics\n   */\n  private collectMemoryMetrics(): void {\n    let memoryMetric: MemoryMetric = {\n      timestamp: Date.now(),\n      used: 0,\n      total: 0,\n      limit: PERFORMANCE_CONFIG.THRESHOLDS.MEMORY_USAGE,\n    };\n\n    // Browser memory API\n    if ('memory' in performance) {\n      const memory = (performance as any).memory;\n      memoryMetric = {\n        ...memoryMetric,\n        used: memory.usedJSHeapSize,\n        total: memory.totalJSHeapSize,\n        limit: memory.jsHeapSizeLimit,\n        heapUsed: memory.usedJSHeapSize,\n        heapTotal: memory.totalJSHeapSize,\n      };\n    }\n\n    // Estimate memory usage for Node.js environments\n    if (typeof process !== 'undefined' && process.memoryUsage) {\n      const nodeMemory = process.memoryUsage();\n      memoryMetric = {\n        ...memoryMetric,\n        heapUsed: nodeMemory.heapUsed,\n        heapTotal: nodeMemory.heapTotal,\n        external: nodeMemory.external,\n        used: nodeMemory.heapUsed,\n        total: nodeMemory.heapTotal + nodeMemory.external,\n      };\n    }\n\n    this.memoryMetrics.push(memoryMetric);\n\n    // Limit stored memory metrics\n    if (this.memoryMetrics.length > PERFORMANCE_CONFIG.MAX_MEMORY_SAMPLES) {\n      this.memoryMetrics = this.memoryMetrics.slice(\n        -PERFORMANCE_CONFIG.MAX_MEMORY_SAMPLES,\n      );\n    }\n\n    // Check memory thresholds\n    if (memoryMetric.used > PERFORMANCE_CONFIG.THRESHOLDS.MEMORY_USAGE) {\n      this.recordMetric({\n        id: this.generateId(),\n        type: 'memory_warning',\n        name: 'high_memory_usage',\n        value: memoryMetric.used,\n        timestamp: Date.now(),\n        // @ts-expect-error - Type compatibility issue\n        details: memoryMetric,\n        tags: ['memory', 'warning'],\n      });\n    }\n  }\n\n  /**\n   * Record performance metric\n   */\n  private recordMetric(metric: PerformanceMetric): void {\n    this.metrics.push(metric);\n\n    // Limit stored metrics\n    if (this.metrics.length > PERFORMANCE_CONFIG.MAX_METRICS_STORED) {\n      this.metrics = this.metrics.slice(-PERFORMANCE_CONFIG.MAX_METRICS_STORED);\n    }\n  }\n\n  /**\n   * Check if measurement should be sampled\n   */\n  private shouldSample(): boolean {\n    const rate =\n      process.env.NODE_ENV === 'development'\n        ? PERFORMANCE_CONFIG.DEBUG_SAMPLING_RATE\n        : PERFORMANCE_CONFIG.SAMPLING_RATE;\n\n    return Math.random() < rate;\n  }\n\n  /**\n   * Check performance threshold violations\n   */\n  private checkPerformanceThreshold(type: string, duration: number): void {\n    const threshold = this.getThresholdForType(type);\n\n    if (threshold && duration > threshold) {\n      this.recordMetric({\n        id: this.generateId(),\n        type: 'performance_warning',\n        name: `slow_${type}`,\n        value: duration,\n        timestamp: Date.now(),\n        details: {\n          threshold,\n          overage: duration - threshold,\n        },\n        tags: ['performance', 'warning', type],\n      });\n    }\n  }\n\n  /**\n   * Get performance threshold for operation type\n   */\n  private getThresholdForType(type: string): number | null {\n    const typeMap: Record<string, keyof typeof PERFORMANCE_CONFIG.THRESHOLDS> =\n      {\n        search_query: 'SEARCH_QUERY',\n        autocorrect: 'AUTOCORRECT',\n        voice_recognition: 'VOICE_RECOGNITION',\n        cache_retrieval: 'CACHE_RETRIEVAL',\n        api_request: 'API_REQUEST',\n      };\n\n    const thresholdKey = typeMap[type];\n    return thresholdKey ? PERFORMANCE_CONFIG.THRESHOLDS[thresholdKey] : null;\n  }\n\n  /**\n   * Extract additional details from performance entries\n   */\n  private extractPerformanceDetails(\n    entry: PerformanceEntry,\n  ): Record<string, unknown> {\n    const details: Record<string, unknown> = {};\n\n    // Navigation timing details\n    if (entry.entryType === 'navigation') {\n      const navEntry = entry as PerformanceNavigationTiming;\n      details.domContentLoaded =\n        navEntry.domContentLoadedEventEnd - navEntry.domContentLoadedEventStart;\n      details.loadComplete = navEntry.loadEventEnd - navEntry.loadEventStart;\n    }\n\n    // Resource timing details\n    if (entry.entryType === 'resource') {\n      const resourceEntry = entry as PerformanceResourceTiming;\n      details.transferSize = resourceEntry.transferSize;\n      details.encodedBodySize = resourceEntry.encodedBodySize;\n      details.decodedBodySize = resourceEntry.decodedBodySize;\n    }\n\n    return details;\n  }\n\n  /**\n   * Generate performance summary report\n   */\n  generatePerformanceReport(): PerformanceSummary {\n    const searchMetrics = Array.from(this.searchCache.values());\n    const latestMemory = this.memoryMetrics[this.memoryMetrics.length - 1] || {\n      timestamp: Date.now(),\n      used: 0,\n      total: 0,\n      limit: 0,\n    };\n\n    // Calculate averages\n    const searchTimes = searchMetrics.map(m => m.duration);\n    const averageSearchTime =\n      searchTimes.length > 0\n        ? searchTimes.reduce((a, b) => a + b, 0) / searchTimes.length\n        : 0;\n\n    const cacheHits = searchMetrics.filter(m => m.cacheHit).length;\n    const cacheHitRate =\n      searchMetrics.length > 0 ? cacheHits / searchMetrics.length : 0;\n\n    const errorRate =\n      this.totalOperations > 0 ? this.errorCount / this.totalOperations : 0;\n\n    // Calculate performance score (0-100)\n    const performanceScore = this.calculatePerformanceScore({\n      averageSearchTime,\n      cacheHitRate,\n      errorRate,\n      memoryUsage: latestMemory.used / latestMemory.limit,\n    });\n\n    // Generate recommendations\n    const recommendations = this.generateRecommendations({\n      averageSearchTime,\n      cacheHitRate,\n      errorRate,\n      memoryUsage: latestMemory.used,\n    });\n\n    const summary: PerformanceSummary = {\n      averageSearchTime,\n      cacheHitRate,\n      memoryUsage: latestMemory,\n      errorRate,\n      totalSearches: searchMetrics.length,\n      performanceScore,\n      recommendations,\n    };\n\n    // Log summary for development\n    if (process.env.NODE_ENV === 'development') {\n      // eslint-disable-next-line no-console\n      console.log('📊 Performance Summary:', summary);\n    }\n\n    return summary;\n  }\n\n  /**\n   * Calculate overall performance score\n   */\n  private calculatePerformanceScore(metrics: {\n    averageSearchTime: number;\n    cacheHitRate: number;\n    errorRate: number;\n    memoryUsage: number;\n  }): number {\n    let score = 100;\n\n    // Search time penalty (0-30 points)\n    const searchTimePenalty = Math.min(\n      30,\n      (metrics.averageSearchTime / 1000) * 10,\n    );\n    score -= searchTimePenalty;\n\n    // Cache hit rate bonus (0-20 points)\n    const cacheBonus = metrics.cacheHitRate * 20;\n    score += cacheBonus - 20; // Subtract 20 to make it penalty-based\n\n    // Error rate penalty (0-25 points)\n    const errorPenalty = Math.min(25, metrics.errorRate * 100);\n    score -= errorPenalty;\n\n    // Memory usage penalty (0-25 points)\n    const memoryPenalty = Math.min(25, metrics.memoryUsage * 25);\n    score -= memoryPenalty;\n\n    return Math.max(0, Math.min(100, score));\n  }\n\n  /**\n   * Generate performance recommendations\n   */\n  private generateRecommendations(metrics: {\n    averageSearchTime: number;\n    cacheHitRate: number;\n    errorRate: number;\n    memoryUsage: number;\n  }): string[] {\n    const recommendations: string[] = [];\n\n    if (metrics.averageSearchTime > 500) {\n      recommendations.push(\n        'Consider optimizing search algorithms or implementing better caching',\n      );\n    }\n\n    if (metrics.cacheHitRate < 0.5) {\n      recommendations.push(\n        'Improve cache strategy to increase hit rate above 50%',\n      );\n    }\n\n    if (metrics.errorRate > 0.05) {\n      recommendations.push(\n        'Investigate and fix search errors (>5% error rate detected)',\n      );\n    }\n\n    if (\n      metrics.memoryUsage >\n      PERFORMANCE_CONFIG.THRESHOLDS.MEMORY_USAGE * 0.8\n    ) {\n      recommendations.push('Monitor memory usage - approaching 80% of limit');\n    }\n\n    if (recommendations.length === 0) {\n      recommendations.push(\n        'Performance is optimal - no immediate improvements needed',\n      );\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Get metrics from recent time period\n   */\n  private getRecentMetrics(timeWindow: number): PerformanceMetric[] {\n    const cutoff = Date.now() - timeWindow;\n    return this.metrics.filter(metric => metric.timestamp >= cutoff);\n  }\n\n  /**\n   * Clean up old metrics\n   */\n  private cleanupOldMetrics(): void {\n    const cutoff = Date.now() - PERFORMANCE_CONFIG.METRICS_TTL;\n\n    this.metrics = this.metrics.filter(metric => metric.timestamp >= cutoff);\n    this.memoryMetrics = this.memoryMetrics.filter(\n      metric => metric.timestamp >= cutoff,\n    );\n\n    // Clear old search cache entries\n    const oldOperations = Array.from(this.searchCache.entries())\n      .filter(\n        ([, data]) =>\n          Date.now() - data.duration > PERFORMANCE_CONFIG.METRICS_TTL,\n      )\n      .map(([id]) => id);\n\n    oldOperations.forEach(id => this.searchCache.delete(id));\n\n    console.log(\n      `🧹 Cleaned up ${oldOperations.length} old performance metrics`,\n    );\n  }\n\n  /**\n   * Generate unique identifier\n   */\n  private generateId(): string {\n    return `perf_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Get all collected metrics\n   */\n  getMetrics(filter?: {\n    type?: string;\n    timeRange?: { start: number; end: number };\n    tags?: string[];\n  }): PerformanceMetric[] {\n    let filtered = [...this.metrics];\n\n    if (filter?.type) {\n      filtered = filtered.filter(m => m.type === filter.type);\n    }\n\n    if (filter?.timeRange) {\n      filtered = filtered.filter(\n        m =>\n          m.timestamp >= filter.timeRange!.start &&\n          m.timestamp <= filter.timeRange!.end,\n      );\n    }\n\n    if (filter?.tags && filter.tags.length > 0) {\n      filtered = filtered.filter(m =>\n        m.tags?.some(tag => filter.tags!.includes(tag)),\n      );\n    }\n\n    return filtered;\n  }\n\n  /**\n   * Get memory usage history\n   */\n  getMemoryHistory(): MemoryMetric[] {\n    return [...this.memoryMetrics];\n  }\n\n  /**\n   * Reset all metrics and counters\n   */\n  reset(): void {\n    this.metrics = [];\n    this.memoryMetrics = [];\n    this.searchCache.clear();\n    this.activeOperations.clear();\n    this.errorCount = 0;\n    this.totalOperations = 0;\n\n    console.log('🔄 Performance Monitor reset successfully');\n  }\n\n  /**\n   * Stop performance monitoring and cleanup\n   */\n  destroy(): void {\n    this.isCollecting = false;\n\n    if (this.observer) {\n      this.observer.disconnect();\n      this.observer = null;\n    }\n\n    if (this.collectionTimer) {\n      clearInterval(this.collectionTimer);\n      this.collectionTimer = null;\n    }\n\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n      this.cleanupTimer = null;\n    }\n\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n      this.reportTimer = null;\n    }\n\n    if (this.memoryObserver) {\n      clearInterval(this.memoryObserver);\n      this.memoryObserver = null;\n    }\n\n    this.reset();\n    console.log('🔌 Performance Monitor destroyed');\n  }\n}\n\n// Export singleton instance\nexport const performanceMonitor = new PerformanceMonitor();\n\n// Export types for use in other modules\nexport type {\n  MemoryMetric,\n  PerformanceMetric,\n  PerformanceSummary,\n  SearchPerformanceData,\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\popularCitiesCache.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\pushNotificationManager.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\pwaUtils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\responsiveUtils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\searchCacheManager.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 120,
        "column": 27,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 120,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [2945, 2946], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 150,
        "column": 27,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 150,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [3701, 3702], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 192,
        "column": 27,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 192,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [4861, 4862], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 267,
        "column": 27,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 267,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [6715, 6716], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 304,
        "column": 27,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 304,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [7534, 7535], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 65,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 65,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [1386, 1449], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 71,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 71,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [1567, 1609], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 101,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 101,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [2432, 2470], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 134,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 134,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [3277, 3334], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 177,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 177,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [4513, 4575], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 277,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 277,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [6975, 7014], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 282,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 282,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [7084, 7139], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 330,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 330,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [8407, 8477], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 336,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 336,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [8561, 8618], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Advanced Search Cache Manager with IndexedDB\n * Provides persistent offline storage for search results with intelligent caching\n */\n\n/* eslint-disable no-console */\n\n// Cache configuration\nconst CACHE_CONFIG = {\n  DATABASE_NAME: 'WeatherAppSearchCache',\n  DATABASE_VERSION: 1,\n  STORE_NAME: 'searchResults',\n  DEFAULT_TTL: 24 * 60 * 60 * 1000, // 24 hours\n  MAX_CACHE_SIZE: 1000,\n  CLEANUP_THRESHOLD: 0.8,\n} as const;\n\n// Types\ninterface CachedSearchResult {\n  id: string;\n  query: string;\n  results: unknown[];\n  timestamp: number;\n  ttl: number;\n  source: 'api' | 'autocorrect' | 'prefetch';\n  metadata: {\n    responseTime: number;\n    accuracy?: number;\n    queryNormalized?: string;\n  };\n}\n\ninterface CacheMetrics {\n  hitRate: number;\n  cacheSize: number;\n  lastCleanup: number;\n  totalRequests: number;\n  cacheHits: number;\n}\n\n/**\n * Advanced Search Cache Manager\n */\nclass SearchCacheManager {\n  private db: IDBDatabase | null = null;\n  private metrics: CacheMetrics = {\n    hitRate: 0,\n    cacheSize: 0,\n    lastCleanup: Date.now(),\n    totalRequests: 0,\n    cacheHits: 0,\n  };\n\n  /**\n   * Initialize the cache manager\n   */\n  async initialize(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(\n        CACHE_CONFIG.DATABASE_NAME,\n        CACHE_CONFIG.DATABASE_VERSION,\n      );\n\n      request.onerror = () => {\n        console.error('Failed to open cache database:', request.error);\n        reject(request.error);\n      };\n\n      request.onsuccess = () => {\n        this.db = request.result;\n        console.log('✅ Search cache initialized');\n        resolve();\n      };\n\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        if (!db.objectStoreNames.contains(CACHE_CONFIG.STORE_NAME)) {\n          const store = db.createObjectStore(CACHE_CONFIG.STORE_NAME, {\n            keyPath: 'id',\n          });\n\n          store.createIndex('query', 'query', { unique: false });\n          store.createIndex('timestamp', 'timestamp', { unique: false });\n          store.createIndex('source', 'source', { unique: false });\n        }\n      };\n    });\n  }\n\n  /**\n   * Cache search results\n   */\n  async cacheSearchResults(\n    query: string,\n    results: unknown[],\n    source: 'api' | 'autocorrect' | 'prefetch',\n    metadata: { responseTime: number; accuracy?: number },\n  ): Promise<void> {\n    if (!this.db) {\n      console.warn('Cache not initialized');\n      return;\n    }\n\n    const normalizedQuery = this.normalizeQuery(query);\n    const cacheEntry: CachedSearchResult = {\n      id: this.generateCacheKey(normalizedQuery),\n      query: normalizedQuery,\n      results,\n      timestamp: Date.now(),\n      ttl: CACHE_CONFIG.DEFAULT_TTL,\n      source,\n      metadata: {\n        ...metadata,\n        queryNormalized: normalizedQuery,\n      },\n    };\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(\n        [CACHE_CONFIG.STORE_NAME],\n        'readwrite',\n      );\n      const store = transaction.objectStore(CACHE_CONFIG.STORE_NAME);\n\n      const request = store.put(cacheEntry);\n\n      request.onsuccess = () => {\n        this.updateCacheSize();\n        resolve();\n      };\n\n      request.onerror = () => {\n        console.error('Failed to cache results:', request.error);\n        reject(request.error);\n      };\n    });\n  }\n\n  /**\n   * Get cached search results\n   */\n  async getCachedResults(query: string): Promise<CachedSearchResult | null> {\n    if (!this.db) return null;\n\n    this.metrics.totalRequests++;\n    const normalizedQuery = this.normalizeQuery(query);\n\n    return new Promise(resolve => {\n      const transaction = this.db!.transaction(\n        [CACHE_CONFIG.STORE_NAME],\n        'readonly',\n      );\n      const store = transaction.objectStore(CACHE_CONFIG.STORE_NAME);\n      const index = store.index('query');\n\n      const request = index.get(normalizedQuery);\n\n      request.onsuccess = () => {\n        const result = request.result as CachedSearchResult | undefined;\n\n        if (result && this.isValidCache(result)) {\n          this.metrics.cacheHits++;\n          this.updateHitRate();\n          resolve(result);\n        } else if (result) {\n          // Expired cache, remove it\n          this.removeCacheEntry(result.id);\n          resolve(null);\n        } else {\n          // Try fuzzy search for typos\n          this.findFuzzyMatch(normalizedQuery).then(resolve);\n        }\n      };\n\n      request.onerror = () => {\n        console.error('Failed to get cached results:', request.error);\n        resolve(null);\n      };\n    });\n  }\n\n  /**\n   * Find fuzzy matches for typos\n   */\n  private async findFuzzyMatch(\n    query: string,\n  ): Promise<CachedSearchResult | null> {\n    if (!this.db) return null;\n\n    return new Promise(resolve => {\n      const transaction = this.db!.transaction(\n        [CACHE_CONFIG.STORE_NAME],\n        'readonly',\n      );\n      const store = transaction.objectStore(CACHE_CONFIG.STORE_NAME);\n\n      const request = store.getAll();\n\n      request.onsuccess = () => {\n        const allEntries = request.result as CachedSearchResult[];\n        let bestMatch: CachedSearchResult | null = null;\n        let bestScore = 0;\n\n        for (const entry of allEntries) {\n          if (!this.isValidCache(entry)) continue;\n\n          const similarity = this.calculateSimilarity(query, entry.query);\n          if (similarity > 0.8 && similarity > bestScore) {\n            bestMatch = entry;\n            bestScore = similarity;\n          }\n        }\n\n        if (bestMatch) {\n          this.metrics.cacheHits++;\n          this.updateHitRate();\n        }\n\n        resolve(bestMatch);\n      };\n\n      request.onerror = () => {\n        resolve(null);\n      };\n    });\n  }\n\n  /**\n   * Calculate string similarity using Levenshtein distance\n   */\n  private calculateSimilarity(str1: string, str2: string): number {\n    const matrix: number[][] = [];\n    const len1 = str1.length;\n    const len2 = str2.length;\n\n    for (let i = 0; i <= len1; i++) {\n      matrix[i] = [i];\n    }\n\n    for (let j = 0; j <= len2; j++) {\n      matrix[0][j] = j;\n    }\n\n    for (let i = 1; i <= len1; i++) {\n      for (let j = 1; j <= len2; j++) {\n        const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j] + 1,\n          matrix[i][j - 1] + 1,\n          matrix[i - 1][j - 1] + cost,\n        );\n      }\n    }\n\n    const maxLen = Math.max(len1, len2);\n    return (maxLen - matrix[len1][len2]) / maxLen;\n  }\n\n  /**\n   * Clear cache\n   */\n  async clearCache(): Promise<void> {\n    if (!this.db) return;\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(\n        [CACHE_CONFIG.STORE_NAME],\n        'readwrite',\n      );\n      const store = transaction.objectStore(CACHE_CONFIG.STORE_NAME);\n\n      const request = store.clear();\n\n      request.onsuccess = () => {\n        this.resetMetrics();\n        console.log('🧹 Search cache cleared');\n        resolve();\n      };\n\n      request.onerror = () => {\n        console.error('Failed to clear cache:', request.error);\n        reject(request.error);\n      };\n    });\n  }\n\n  /**\n   * Get cache metrics\n   */\n  getCacheMetrics(): CacheMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Cleanup expired entries\n   */\n  async cleanupExpiredEntries(): Promise<void> {\n    if (!this.db) return;\n\n    const currentTime = Date.now();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(\n        [CACHE_CONFIG.STORE_NAME],\n        'readwrite',\n      );\n      const store = transaction.objectStore(CACHE_CONFIG.STORE_NAME);\n\n      const request = store.getAll();\n\n      request.onsuccess = () => {\n        const allEntries = request.result as CachedSearchResult[];\n        const expiredEntries = allEntries.filter(\n          entry => !this.isValidCache(entry),\n        );\n\n        const deletePromises = expiredEntries.map(\n          entry =>\n            new Promise<void>(deleteResolve => {\n              const deleteRequest = store.delete(entry.id);\n              deleteRequest.onsuccess = () => deleteResolve();\n              deleteRequest.onerror = () => deleteResolve();\n            }),\n        );\n\n        Promise.all(deletePromises).then(() => {\n          this.metrics.lastCleanup = currentTime;\n          this.updateCacheSize();\n          console.log(`🧹 Cleaned up ${expiredEntries.length} expired entries`);\n          resolve();\n        });\n      };\n\n      request.onerror = () => {\n        console.error('Failed to cleanup cache:', request.error);\n        reject(request.error);\n      };\n    });\n  }\n\n  // Helper methods\n  private normalizeQuery(query: string): string {\n    return query.toLowerCase().trim().replace(/\\s+/g, ' ');\n  }\n\n  private generateCacheKey(query: string): string {\n    return `cache_${btoa(encodeURIComponent(query))}_${Date.now()}`;\n  }\n\n  private isValidCache(entry: CachedSearchResult): boolean {\n    return Date.now() - entry.timestamp < entry.ttl;\n  }\n\n  private async updateCacheSize(): Promise<void> {\n    if (!this.db) return;\n\n    const transaction = this.db.transaction(\n      [CACHE_CONFIG.STORE_NAME],\n      'readonly',\n    );\n    const store = transaction.objectStore(CACHE_CONFIG.STORE_NAME);\n\n    const request = store.count();\n    request.onsuccess = () => {\n      this.metrics.cacheSize = request.result;\n\n      // Auto-cleanup if threshold exceeded\n      if (\n        this.metrics.cacheSize >\n        CACHE_CONFIG.MAX_CACHE_SIZE * CACHE_CONFIG.CLEANUP_THRESHOLD\n      ) {\n        this.cleanupExpiredEntries();\n      }\n    };\n  }\n\n  private async removeCacheEntry(id: string): Promise<void> {\n    if (!this.db) return;\n\n    const transaction = this.db.transaction(\n      [CACHE_CONFIG.STORE_NAME],\n      'readwrite',\n    );\n    const store = transaction.objectStore(CACHE_CONFIG.STORE_NAME);\n    store.delete(id);\n  }\n\n  private updateHitRate(): void {\n    this.metrics.hitRate =\n      this.metrics.totalRequests > 0\n        ? this.metrics.cacheHits / this.metrics.totalRequests\n        : 0;\n  }\n\n  private resetMetrics(): void {\n    this.metrics = {\n      hitRate: 0,\n      cacheSize: 0,\n      lastCleanup: Date.now(),\n      totalRequests: 0,\n      cacheHits: 0,\n    };\n  }\n}\n\n// Export singleton instance\nexport const searchCacheManager = new SearchCacheManager();\nexport type { CachedSearchResult, CacheMetrics };\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\searchPerformanceMonitor.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 67,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 92,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 92,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 101,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 101,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2520, 2523], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2520, 2523], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 102,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 102,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2572, 2575], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2572, 2575], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 122,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 122,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 158,
        "column": 15,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 158,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [4014, 4015], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 185,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 185,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 202,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 202,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Search Performance Monitor\n * Tracks search performance metrics and memory usage\n */\n\ninterface SearchPerformanceMetrics {\n  searchType: string;\n  duration: number;\n  timestamp: number;\n  resultsCount: number;\n  memoryUsage?: {\n    used: number;\n    total: number;\n    limit: number;\n  };\n}\n\ninterface PerformanceStats {\n  averageLatency: number;\n  totalSearches: number;\n  searchTypes: Record<string, number>;\n  memoryTrend: Array<{ timestamp: number; used: number }>;\n}\n\nclass SearchPerformanceMonitor {\n  private metrics: SearchPerformanceMetrics[] = [];\n  private readonly MAX_METRICS = 100; // Keep last 100 searches\n  private readonly STORAGE_KEY = 'weather-search-performance';\n\n  /**\n   * Start tracking a search operation\n   */\n  startSearch(searchType: string): string {\n    const trackingId = `search-${searchType}-${Date.now()}`;\n    performance.mark(`${trackingId}-start`);\n    return trackingId;\n  }\n\n  /**\n   * End tracking and record metrics\n   */\n  endSearch(\n    trackingId: string,\n    searchType: string,\n    resultsCount: number = 0,\n  ): SearchPerformanceMetrics {\n    const endMark = `${trackingId}-end`;\n    performance.mark(endMark);\n\n    try {\n      performance.measure(trackingId, `${trackingId}-start`, endMark);\n      const measure = performance.getEntriesByName(trackingId)[0];\n      const duration = measure?.duration || 0;\n\n      const metric: SearchPerformanceMetrics = {\n        searchType,\n        duration,\n        timestamp: Date.now(),\n        resultsCount,\n        memoryUsage: this.getMemoryUsage(),\n      };\n\n      this.recordMetric(metric);\n      this.cleanup();\n\n      return metric;\n    } catch (error) {\n      // Fallback metric if performance API fails\n      return {\n        searchType,\n        duration: 0,\n        timestamp: Date.now(),\n        resultsCount,\n      };\n    }\n  }\n\n  /**\n   * Record search metric\n   */\n  private recordMetric(metric: SearchPerformanceMetrics): void {\n    this.metrics.push(metric);\n\n    // Keep only recent metrics\n    if (this.metrics.length > this.MAX_METRICS) {\n      this.metrics = this.metrics.slice(-this.MAX_METRICS);\n    }\n\n    // Persist to localStorage for analysis\n    try {\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(this.metrics));\n    } catch (error) {\n      // Storage quota exceeded or disabled - continue without persistence\n    }\n  }\n\n  /**\n   * Get current memory usage\n   */\n  private getMemoryUsage(): SearchPerformanceMetrics['memoryUsage'] {\n    if ('memory' in performance && (performance as any).memory) {\n      const memory = (performance as any).memory;\n      return {\n        used: memory.usedJSHeapSize,\n        total: memory.totalJSHeapSize,\n        limit: memory.jsHeapSizeLimit,\n      };\n    }\n    return undefined;\n  }\n\n  /**\n   * Clean up old performance entries\n   */\n  private cleanup(): void {\n    try {\n      // Clear old performance entries to prevent memory leaks\n      const entries = performance.getEntriesByType('measure');\n      if (entries.length > 50) {\n        performance.clearMeasures();\n      }\n    } catch (error) {\n      // Cleanup failed - continue without clearing\n    }\n  }\n\n  /**\n   * Get performance statistics\n   */\n  getStats(): PerformanceStats {\n    const totalSearches = this.metrics.length;\n\n    if (totalSearches === 0) {\n      return {\n        averageLatency: 0,\n        totalSearches: 0,\n        searchTypes: {},\n        memoryTrend: [],\n      };\n    }\n\n    // Calculate average latency\n    const totalDuration = this.metrics.reduce((sum, m) => sum + m.duration, 0);\n    const averageLatency = totalDuration / totalSearches;\n\n    // Count search types\n    const searchTypes: Record<string, number> = {};\n    this.metrics.forEach(m => {\n      searchTypes[m.searchType] = (searchTypes[m.searchType] || 0) + 1;\n    });\n\n    // Memory trend (last 10 measurements with memory data)\n    const memoryTrend = this.metrics\n      .filter(m => m.memoryUsage)\n      .slice(-10)\n      .map(m => ({\n        timestamp: m.timestamp,\n        used: m.memoryUsage!.used,\n      }));\n\n    return {\n      averageLatency,\n      totalSearches,\n      searchTypes,\n      memoryTrend,\n    };\n  }\n\n  /**\n   * Get recent metrics\n   */\n  getRecentMetrics(count: number = 10): SearchPerformanceMetrics[] {\n    return this.metrics.slice(-count);\n  }\n\n  /**\n   * Clear all metrics\n   */\n  clearMetrics(): void {\n    this.metrics = [];\n    try {\n      localStorage.removeItem(this.STORAGE_KEY);\n      performance.clearMeasures();\n      performance.clearMarks();\n    } catch (error) {\n      // Cleanup failed - continue\n    }\n  }\n\n  /**\n   * Load persisted metrics\n   */\n  loadPersistedMetrics(): void {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        if (Array.isArray(parsed)) {\n          this.metrics = parsed.slice(-this.MAX_METRICS);\n        }\n      }\n    } catch (error) {\n      // Failed to load - start fresh\n      this.metrics = [];\n    }\n  }\n\n  /**\n   * Check if performance is degrading\n   */\n  isPerformanceDegrading(): boolean {\n    if (this.metrics.length < 10) return false;\n\n    const recent = this.metrics.slice(-5);\n    const previous = this.metrics.slice(-10, -5);\n\n    const recentAvg =\n      recent.reduce((sum, m) => sum + m.duration, 0) / recent.length;\n    const previousAvg =\n      previous.reduce((sum, m) => sum + m.duration, 0) / previous.length;\n\n    // Performance is degrading if recent searches are 50% slower\n    return recentAvg > previousAvg * 1.5;\n  }\n}\n\n// Export singleton instance\nexport const searchPerformanceMonitor = new SearchPerformanceMonitor();\n\n// Load persisted metrics on initialization\nsearchPerformanceMonitor.loadPersistedMetrics();\n\nexport type { PerformanceStats, SearchPerformanceMetrics };\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\springAnimation.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\themeConfig.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\themeContext.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 111,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 111,
        "endColumn": 26,
        "suggestions": [
          {
            "fix": { "range": [3391, 3448], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\timeUtils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useAutoLocationServices.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useBackgroundRefresh.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useCityManagement.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 326,
        "column": 24,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 326,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [8994, 8995], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * City Management Hook\r\n *\r\n * Manages favorite cities, recent locations, and city switching functionality.\r\n * Provides localStorage persistence and weather data coordination.\r\n */\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { logError } from './logger';\r\n\r\n\r\nexport interface SavedCity {\r\n  id: string;\r\n  name: string;\r\n  displayName: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  country?: string;\r\n  state?: string;\r\n  isFavorite: boolean;\r\n  lastAccessed: number;\r\n  addedAt: number;\r\n}\r\n\r\nexport interface CityManagementState {\r\n  favorites: SavedCity[];\r\n  recentCities: SavedCity[];\r\n  currentCity: SavedCity | null;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst STORAGE_KEYS = {\r\n  FAVORITES: 'weather-app-favorite-cities',\r\n  RECENT: 'weather-app-recent-cities',\r\n  CURRENT: 'weather-app-current-city',\r\n} as const;\r\n\r\nconst MAX_RECENT_CITIES = 10;\r\nconst MAX_FAVORITE_CITIES = 20;\r\n\r\n/**\r\n * useCityManagement - Custom React hook for useCityManagement functionality\r\n */\r\n/**\r\n * useCityManagement - Custom React hook for useCityManagement functionality\r\n */\r\nexport const useCityManagement = () => {\r\n  const [state, setState] = useState<CityManagementState>({\r\n    favorites: [],\r\n    recentCities: [],\r\n    currentCity: null,\r\n    isLoading: false,\r\n    error: null,\r\n  });\r\n\r\n  // Load saved data from localStorage on mount\r\n  const loadSavedData = useCallback(() => {\r\n    try {\r\n      const savedFavorites = localStorage.getItem(STORAGE_KEYS.FAVORITES);\r\n      const savedRecent = localStorage.getItem(STORAGE_KEYS.RECENT);\r\n      const savedCurrent = localStorage.getItem(STORAGE_KEYS.CURRENT);\r\n\r\n      setState(prev => ({\r\n        ...prev,\r\n        favorites: savedFavorites ? JSON.parse(savedFavorites) : [],\r\n        recentCities: savedRecent ? JSON.parse(savedRecent) : [],\r\n        currentCity: savedCurrent ? JSON.parse(savedCurrent) : null,\r\n        error: null,\r\n      }));\r\n    } catch (error) {\r\n      logError('Failed to load saved city data:', error);\r\n      setState(prev => ({\r\n        ...prev,\r\n        error: 'Failed to load saved cities',\r\n      }));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadSavedData();\r\n  }, [loadSavedData]);\r\n\r\n  // Generate unique ID for a city\r\n  const generateCityId = useCallback(\r\n    (name: string, latitude: number, longitude: number): string => {\r\n      return `${name.toLowerCase().replace(/\\s+/g, '-')}-${latitude.toFixed(4)}-${longitude.toFixed(4)}`;\r\n    },\r\n    [],\r\n  );\r\n\r\n  // Create SavedCity object from basic data\r\n  const createCityObject = useCallback(\r\n    (\r\n      name: string,\r\n      latitude: number,\r\n      longitude: number,\r\n      displayName?: string,\r\n      country?: string,\r\n      state?: string,\r\n      isFavorite: boolean = false,\r\n    ): SavedCity => {\r\n      const now = Date.now();\r\n      return {\r\n        id: generateCityId(name, latitude, longitude),\r\n        name,\r\n        displayName: displayName || name,\r\n        latitude,\r\n        longitude,\r\n        country,\r\n        state,\r\n        isFavorite,\r\n        lastAccessed: now,\r\n        addedAt: now,\r\n      };\r\n    },\r\n    [generateCityId],\r\n  );\r\n\r\n  // Add city to favorites\r\n  const addToFavorites = useCallback(\r\n    (\r\n      name: string,\r\n      latitude: number,\r\n      longitude: number,\r\n      displayName?: string,\r\n      country?: string,\r\n      state?: string,\r\n    ) => {\r\n      setState(prev => {\r\n        const cityId = generateCityId(name, latitude, longitude);\r\n\r\n        // Check if already in favorites\r\n        const existingIndex = prev.favorites.findIndex(\r\n          city => city.id === cityId,\r\n        );\r\n        if (existingIndex !== -1) {\r\n          // Update existing favorite\r\n          const updatedFavorites = [...prev.favorites];\r\n          updatedFavorites[existingIndex] = {\r\n            ...updatedFavorites[existingIndex],\r\n            lastAccessed: Date.now(),\r\n            displayName: displayName || name,\r\n            country,\r\n            state,\r\n          };\r\n          return { ...prev, favorites: updatedFavorites };\r\n        }\r\n\r\n        // Add new favorite\r\n        const newCity = createCityObject(\r\n          name,\r\n          latitude,\r\n          longitude,\r\n          displayName,\r\n          country,\r\n          state,\r\n          true,\r\n        );\r\n        const updatedFavorites = [newCity, ...prev.favorites].slice(\r\n          0,\r\n          MAX_FAVORITE_CITIES,\r\n        );\r\n\r\n        return { ...prev, favorites: updatedFavorites };\r\n      });\r\n    },\r\n    [generateCityId, createCityObject],\r\n  );\r\n\r\n  // Remove city from favorites\r\n  const removeFromFavorites = useCallback((cityId: string) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      favorites: prev.favorites.filter(city => city.id !== cityId),\r\n    }));\r\n  }, []);\r\n\r\n  // Add city to recent history\r\n  const addToRecent = useCallback(\r\n    (\r\n      name: string,\r\n      latitude: number,\r\n      longitude: number,\r\n      displayName?: string,\r\n      country?: string,\r\n      state?: string,\r\n    ) => {\r\n      setState(prev => {\r\n        const cityId = generateCityId(name, latitude, longitude);\r\n\r\n        // Remove if already exists\r\n        const filteredRecent = prev.recentCities.filter(\r\n          city => city.id !== cityId,\r\n        );\r\n\r\n        // Add to front of list\r\n        const newCity = createCityObject(\r\n          name,\r\n          latitude,\r\n          longitude,\r\n          displayName,\r\n          country,\r\n          state,\r\n          false,\r\n        );\r\n        const updatedRecent = [newCity, ...filteredRecent].slice(\r\n          0,\r\n          MAX_RECENT_CITIES,\r\n        );\r\n\r\n        return { ...prev, recentCities: updatedRecent };\r\n      });\r\n    },\r\n    [generateCityId, createCityObject],\r\n  );\r\n\r\n  // Set current city\r\n  const setCurrentCity = useCallback(\r\n    (\r\n      name: string,\r\n      latitude: number,\r\n      longitude: number,\r\n      displayName?: string,\r\n      country?: string,\r\n      state?: string,\r\n    ) => {\r\n      const city = createCityObject(\r\n        name,\r\n        latitude,\r\n        longitude,\r\n        displayName,\r\n        country,\r\n        state,\r\n        false,\r\n      );\r\n\r\n      setState(prev => ({\r\n        ...prev,\r\n        currentCity: city,\r\n      }));\r\n\r\n      // Also add to recent history\r\n      addToRecent(name, latitude, longitude, displayName, country, state);\r\n    },\r\n    [createCityObject, addToRecent],\r\n  );\r\n\r\n  // Check if city is in favorites\r\n  const isFavorite = useCallback(\r\n    (name: string, latitude: number, longitude: number): boolean => {\r\n      const cityId = generateCityId(name, latitude, longitude);\r\n      return state.favorites.some(city => city.id === cityId);\r\n    },\r\n    [state.favorites, generateCityId],\r\n  );\r\n\r\n  // Toggle favorite status\r\n  const toggleFavorite = useCallback(\r\n    (\r\n      name: string,\r\n      latitude: number,\r\n      longitude: number,\r\n      displayName?: string,\r\n      country?: string,\r\n      state?: string,\r\n    ) => {\r\n      if (isFavorite(name, latitude, longitude)) {\r\n        const cityId = generateCityId(name, latitude, longitude);\r\n        removeFromFavorites(cityId);\r\n      } else {\r\n        addToFavorites(name, latitude, longitude, displayName, country, state);\r\n      }\r\n    },\r\n    [isFavorite, generateCityId, removeFromFavorites, addToFavorites],\r\n  );\r\n\r\n  // Clear all recent cities\r\n  const clearRecentCities = useCallback(() => {\r\n    setState(prev => ({ ...prev, recentCities: [] }));\r\n    localStorage.removeItem(STORAGE_KEYS.RECENT);\r\n  }, []);\r\n\r\n  // Clear all favorites\r\n  const clearFavorites = useCallback(() => {\r\n    setState(prev => ({ ...prev, favorites: [] }));\r\n    localStorage.removeItem(STORAGE_KEYS.FAVORITES);\r\n  }, []);\r\n\r\n  // Get combined city list for quick access (favorites + recent)\r\n  const getQuickAccessCities = useCallback((): SavedCity[] => {\r\n    const allCities = [...state.favorites, ...state.recentCities];\r\n    const uniqueCities = allCities.filter(\r\n      (city, index, self) => index === self.findIndex(c => c.id === city.id),\r\n    );\r\n\r\n    // Sort by: favorites first, then by last accessed\r\n    return uniqueCities.sort((a, b) => {\r\n      if (a.isFavorite && !b.isFavorite) return -1;\r\n      if (!a.isFavorite && b.isFavorite) return 1;\r\n      return b.lastAccessed - a.lastAccessed;\r\n    });\r\n  }, [state.favorites, state.recentCities]);\r\n\r\n  // Export city data\r\n  const exportCityData = useCallback(() => {\r\n    return {\r\n      favorites: state.favorites,\r\n      recentCities: state.recentCities,\r\n      exportedAt: new Date().toISOString(),\r\n      version: '1.0',\r\n    };\r\n  }, [state.favorites, state.recentCities]);\r\n\r\n  // Import city data\r\n  const importCityData = useCallback(\r\n    (data: {\r\n      favorites?: SavedCity[];\r\n      recentCities?: SavedCity[];\r\n      version?: string;\r\n    }) => {\r\n      try {\r\n        if (data.favorites && Array.isArray(data.favorites)) {\r\n          setState(prev => ({\r\n            ...prev,\r\n            favorites: data.favorites!.slice(0, MAX_FAVORITE_CITIES),\r\n            recentCities: data.recentCities\r\n              ? data.recentCities.slice(0, MAX_RECENT_CITIES)\r\n              : prev.recentCities,\r\n            error: null,\r\n          }));\r\n          return true;\r\n        }\r\n        throw new Error('Invalid city data format');\r\n      } catch (err) {\r\n        logError('Failed to import city data:', err);\r\n        setState(prev => ({\r\n          ...prev,\r\n          error: 'Failed to import city data',\r\n        }));\r\n        return false;\r\n      }\r\n    },\r\n    [],\r\n  );\r\n\r\n  return {\r\n    // State\r\n    favorites: state.favorites,\r\n    recentCities: state.recentCities,\r\n    currentCity: state.currentCity,\r\n    isLoading: state.isLoading,\r\n    error: state.error,\r\n\r\n    // Actions\r\n    addToFavorites,\r\n    removeFromFavorites,\r\n    addToRecent,\r\n    setCurrentCity,\r\n    toggleFavorite,\r\n    clearRecentCities,\r\n    clearFavorites,\r\n\r\n    // Utilities\r\n    isFavorite,\r\n    getQuickAccessCities,\r\n    exportCityData,\r\n    importCityData,\r\n    loadSavedData,\r\n\r\n    // Constants\r\n    maxFavorites: MAX_FAVORITE_CITIES,\r\n    maxRecent: MAX_RECENT_CITIES,\r\n  };\r\n};\r\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useEnhancedMobileScreen.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useEnhancedPullToRefresh.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useEnhancedSearch.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useFeature4B.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useHapticFeedback.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useLocationServices.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useMobileOptimization.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useMobileOptimizations.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useMultiSensoryWeather.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useNativeApi.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useOfflinePerformance.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "comma-dangle",
        "severity": 2,
        "message": "Missing trailing comma.",
        "line": 162,
        "column": 65,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missing",
        "endLine": 163,
        "endColumn": 1,
        "fix": { "range": [4317, 4326], "text": "),\n      )" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "comma-dangle",
        "severity": 2,
        "message": "Missing trailing comma.",
        "line": 167,
        "column": 71,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missing",
        "endLine": 168,
        "endColumn": 1,
        "fix": { "range": [4478, 4487], "text": "),\n      )" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "comma-dangle",
        "severity": 2,
        "message": "Missing trailing comma.",
        "line": 172,
        "column": 67,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missing",
        "endLine": 173,
        "endColumn": 1,
        "fix": { "range": [4629, 4638], "text": "),\n      )" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 193,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 193,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [5195, 5268], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 196,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 196,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [5342, 5398], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useCallback has missing dependencies: 'startPeriodicUpdates' and 'updateNetworkStatus'. Either include them or remove the dependency array.",
        "line": 200,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 200,
        "endColumn": 27,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [startPeriodicUpdates, state.isInitialized, updateNetworkStatus]",
            "fix": { "range": [5508, 5529], "text": "[startPeriodicUpdates, state.isInitialized, updateNetworkStatus]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useCallback has missing dependencies: 'performAutoOptimization', 'updateCacheStatus', and 'updatePerformanceStatus'. Either include them or remove the dependency array.",
        "line": 223,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 223,
        "endColumn": 38,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [performAutoOptimization, state.autoOptimization.enabled, updateCacheStatus, updatePerformanceStatus]",
            "fix": {
              "range": [6263, 6295],
              "text": "[performAutoOptimization, state.autoOptimization.enabled, updateCacheStatus, updatePerformanceStatus]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "comma-dangle",
        "severity": 2,
        "message": "Missing trailing comma.",
        "line": 271,
        "column": 38,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missing",
        "endLine": 272,
        "endColumn": 1,
        "fix": { "range": [7486, 7504], "text": "'closed',\n        )" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 339,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 339,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [9575, 9631], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 343,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 343,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [9713, 9765], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "comma-dangle",
        "severity": 2,
        "message": "Missing trailing comma.",
        "line": 353,
        "column": 34,
        "nodeType": "AssignmentPattern",
        "messageId": "missing",
        "endLine": 354,
        "endColumn": 1,
        "fix": { "range": [9960, 9967], "text": "},\n    )" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "comma-dangle",
        "severity": 2,
        "message": "Missing trailing comma.",
        "line": 397,
        "column": 16,
        "nodeType": "ObjectExpression",
        "messageId": "missing",
        "endLine": 398,
        "endColumn": 1,
        "fix": { "range": [11392, 11407], "text": "},\n            )" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "comma-dangle",
        "severity": 2,
        "message": "Missing trailing comma.",
        "line": 409,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "missing",
        "endLine": 410,
        "endColumn": 1,
        "fix": { "range": [11781, 11800], "text": "query,\n            )" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "comma-dangle",
        "severity": 2,
        "message": "Missing trailing comma.",
        "line": 424,
        "column": 16,
        "nodeType": "ObjectExpression",
        "messageId": "missing",
        "endLine": 425,
        "endColumn": 1,
        "fix": { "range": [12246, 12261], "text": "},\n            )" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "comma-dangle",
        "severity": 2,
        "message": "Missing trailing comma.",
        "line": 459,
        "column": 16,
        "nodeType": "ObjectExpression",
        "messageId": "missing",
        "endLine": 460,
        "endColumn": 1,
        "fix": { "range": [13262, 13277], "text": "},\n            )" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "comma-dangle",
        "severity": 2,
        "message": "Missing trailing comma.",
        "line": 509,
        "column": 12,
        "nodeType": "ObjectExpression",
        "messageId": "missing",
        "endLine": 510,
        "endColumn": 1,
        "fix": { "range": [14580, 14591], "text": "},\n        )" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "comma-dangle",
        "severity": 2,
        "message": "Missing trailing comma.",
        "line": 515,
        "column": 21,
        "nodeType": "ArrayExpression",
        "messageId": "missing",
        "endLine": 516,
        "endColumn": 1,
        "fix": { "range": [14649, 14654], "text": "],\n  )" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "comma-dangle",
        "severity": 2,
        "message": "Missing trailing comma.",
        "line": 540,
        "column": 24,
        "nodeType": "ArrayExpression",
        "messageId": "missing",
        "endLine": 541,
        "endColumn": 1,
        "fix": { "range": [15225, 15230], "text": "],\n  )" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "comma-dangle",
        "severity": 2,
        "message": "Missing trailing comma.",
        "line": 577,
        "column": 60,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missing",
        "endLine": 578,
        "endColumn": 1,
        "fix": { "range": [16153, 16162], "text": "),\n      )" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "comma-dangle",
        "severity": 2,
        "message": "Missing trailing comma.",
        "line": 582,
        "column": 13,
        "nodeType": "ArrayExpression",
        "messageId": "missing",
        "endLine": 583,
        "endColumn": 1,
        "fix": { "range": [16232, 16237], "text": "],\n  )" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "comma-dangle",
        "severity": 2,
        "message": "Missing trailing comma.",
        "line": 615,
        "column": 30,
        "nodeType": "ArrayExpression",
        "messageId": "missing",
        "endLine": 616,
        "endColumn": 1,
        "fix": { "range": [17085, 17090], "text": "],\n  )" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\usePerformanceTracking.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\usePullToRefresh.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useScreenSwipeConfig.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useSwipeGestures.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useTheme.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useVoiceSearch.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useWeatherHapticExperience.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\useWeatherOptimization.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\weatherAudioManager.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\weatherIconMorpher.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\utils\\weatherIcons.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\src\\vite-env.d.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\vite.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "C:\\git\\weather\\vitest.config.optimized.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "quotes", "url": "https://eslint.style/rules/quotes" }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "semi", "url": "https://eslint.style/rules/semi" }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": { "name": "@stylistic/eslint-plugin", "url": "https://eslint.style" },
              "rule": { "name": "comma-dangle", "url": "https://eslint.style/rules/comma-dangle" }
            }
          ]
        }
      }
    ]
  }
]
