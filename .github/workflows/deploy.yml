name: ‚ö° Ultra-Fast Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_quality:
        description: 'Skip quality checks for emergency deploys'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  deployments: write
  pull-requests: write

env:
  NODE_VERSION: '22'
  # Ultra-fast npm settings
  NPM_CONFIG_PREFER_OFFLINE: true
  NPM_CONFIG_NO_AUDIT: true
  NPM_CONFIG_NO_FUND: true
  NPM_CONFIG_PROGRESS: false
  NPM_CONFIG_LOGLEVEL: error
  # Vite optimizations
  VITE_CJS_IGNORE_WARNING: true
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  ultra-deploy:
    name: ‚ö° Ultra Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 6

    steps:
      - name: ‚ö° Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # Minimal checkout

      - name: ‚ö° Setup Node.js + Cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: ‚ö° Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.vite
            dist
          key: build-${{ runner.os }}-${{ hashFiles('**/package-lock.json', 'src/**/*', 'vite.config.ts') }}
          restore-keys: |
            build-${{ runner.os }}-

      - name: ‚ö° Install dependencies (turbo mode)
        run: |
          npm ci --prefer-offline --no-audit --no-fund --silent

      - name: ‚ö° Fast quality check
        if: ${{ !inputs.skip_quality }}
        run: |
          # Run essential checks (non-blocking for speed)
          npm run lint --silent || echo "‚ö†Ô∏è Lint warnings (non-blocking)"
        continue-on-error: true
        timeout-minutes: 1

      - name: ‚ö° Turbo build
        run: |
          # Ultra-fast build without TypeScript compilation check
          npm run build:ultra

      - name: ‚ö° Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name=premium-weather-app --branch=${{ github.ref_name }}

      - name: ‚ö° Success notification
        if: success()
        run: |
          echo "## ‚ö° Ultra-Fast Deploy Complete!" >> $GITHUB_STEP_SUMMARY
          echo "**‚è±Ô∏è Total time: <2 minutes**" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "üöÄ **Production**: https://weather.andernet.dev" >> $GITHUB_STEP_SUMMARY
            echo "üîó **Cloudflare**: https://premium-weather-app.pages.dev" >> $GITHUB_STEP_SUMMARY
          else
            echo "üß™ **Development**: https://weather-dev.andernet.dev" >> $GITHUB_STEP_SUMMARY
            echo "üîó **Cloudflare**: https://${{ github.ref_name }}.premium-weather-app.pages.dev" >> $GITHUB_STEP_SUMMARY
          fi
